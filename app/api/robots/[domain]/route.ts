import { NextRequest, NextResponse } from "next/server";
import { api } from "@/convex/_generated/api";
import { fetchQuery } from "convex/nextjs";

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ domain: string }> }
) {
  try {
    const { domain } = await params;
    
    // Get the domain info
    const domainData = await fetchQuery(api.domains.getByDomain, { 
      domain: domain.replace(/^www\./, "") 
    });
    
    if (!domainData) {
      return new NextResponse("Domain not found", { status: 404 });
    }

    // Get the business info
    const business = await fetchQuery(api.businesses.getByDomainId, { 
      domainId: domainData._id 
    });
    
    if (!business || !business.isPublished) {
      // Return restrictive robots.txt for unpublished sites
      const robots = `User-agent: *
Disallow: /

# Site is not published`;

      return new NextResponse(robots, {
        status: 200,
        headers: {
          "Content-Type": "text/plain",
          "Cache-Control": "public, max-age=3600",
        },
      });
    }

    // Return permissive robots.txt for published sites
    const baseUrl = `https://${domain}`;
    const robots = `User-agent: *
Allow: /

# Sitemap location
Sitemap: ${baseUrl}/sitemap.xml

# Crawl-delay (optional, in seconds)
Crawl-delay: 1

# Disallow admin/private paths
Disallow: /api/
Disallow: /dashboard/
Disallow: /business/
Disallow: /_next/
Disallow: /preview/

# Allow search engines to index images
User-agent: Googlebot-Image
Allow: /

User-agent: Bingbot
Allow: /

# Generated by Locasite`;

    return new NextResponse(robots, {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
        "Cache-Control": "public, max-age=3600",
      },
    });
  } catch (error) {
    console.error("Error generating robots.txt:", error);
    
    // Return a safe default robots.txt on error
    const defaultRobots = `User-agent: *
Allow: /

# Error generating custom robots.txt`;
    
    return new NextResponse(defaultRobots, {
      status: 200,
      headers: {
        "Content-Type": "text/plain",
      },
    });
  }
}