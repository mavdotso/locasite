"use client";

import { notFound, useRouter } from "next/navigation";
import { useQuery, useMutation } from "convex/react";
import { api } from "@/convex/_generated/api";
import { Id } from "@/convex/_generated/dataModel";
import { SimpleEditorResponsive } from "@/app/components/simple-builder/core/simple-editor-responsive";
import type {
  SimplePageData,
  SectionInstance,
} from "@/app/components/simple-builder/types/simple-builder";
import { getVariationById } from "@/app/components/simple-builder/sections/section-variations";
import { getPresetByType } from "@/app/components/simple-builder/sections/business-presets";
import { Loader2 } from "lucide-react";
import { toast } from "sonner";
import { useEffect } from "react";

export default function BusinessEditClient({
  businessId,
}: {
  businessId: Id<"businesses">;
}) {
  const router = useRouter();

  // All hooks must be called before any conditional returns
  const user = useQuery(api.auth.currentUser);
  const business = useQuery(api.businesses.getById, { id: businessId });
  const domain = useQuery(
    api.domains.getByBusinessId,
    business ? { businessId: business._id } : "skip",
  );
  const pages = useQuery(
    api.pages.listByDomain,
    domain ? { domainId: domain._id } : "skip",
  );
  const updatePage = useMutation(api.pages.updatePage);
  const createDefaultPages = useMutation(api.pages.createDefaultPages);
  const publishBusiness = useMutation(api.businesses.publish);

  // Handle authentication
  useEffect(() => {
    if (user === null) {
      // User is not authenticated, redirect to sign-in with redirect back to this page
      router.push(`/sign-in?redirect=/business/${businessId}/edit`);
    }
  }, [user, businessId, router]);

  // Loading state while fetching user or business
  if (user === undefined || business === undefined) {
    return (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  // User not authenticated (null)
  if (user === null) {
    return (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  // Business not found
  if (business === null) {
    return notFound();
  }

  // Check ownership - only allow owner to edit
  if (business.userId && business.userId !== user._id) {
    router.push(`/dashboard/sites`);
    return (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="h-8 w-8 animate-spin" />
      </div>
    );
  }

  // Get the single page or create initial data
  const page = pages?.[0];

  // Generate unique ID
  const generateId = () => Math.random().toString(36).substring(2, 9);

  // Create initial data for Simple Mode
  let initialData: SimplePageData = {
    title: business?.name || "Welcome",
    sections: [],
    theme: {
      colors: {
        primary: "#000000",
        secondary: "#666666",
        accent: "#0066cc",
        background: "#ffffff",
        text: "#333333",
        muted: "#f5f5f5",
      },
      fonts: {
        heading: "Inter",
        body: "Inter",
      },
      spacing: {
        section: "80px",
        element: "40px",
      },
    },
  };

  // Try to parse existing page content
  if (page?.content) {
    try {
      const parsed = JSON.parse(page.content);

      // Check if it's already in Simple Mode format
      if (parsed.mode === "simple" && parsed.sections) {
        // Populate sections with template data if they're empty
        const populatedSections = parsed.sections.map((section: any) => {
          // If section data is empty or missing content, populate from template
          if (
            !section.data?.content ||
            Object.keys(section.data.content).length === 0
          ) {
            const variation = getVariationById(section.variationId);
            if (variation) {
              return {
                ...section,
                data: JSON.parse(JSON.stringify(variation.template)), // Deep clone
              };
            }
          }
          return section;
        });

        // Populate sections with template data if they're empty
        const populatedSections = parsed.sections.map((section: any) => {
          // If section data is empty or missing content, populate from template
          if (
            !section.data?.content ||
            Object.keys(section.data.content).length === 0
          ) {
            const variation = getVariationById(section.variationId);
            if (variation) {
              return {
                ...section,
                data: JSON.parse(JSON.stringify(variation.template)), // Deep clone
              };
            }
          }
          return section;
        });

        initialData = {
          title: parsed.title || business.name || "Welcome",
          sections: populatedSections,
          theme: parsed.theme || initialData.theme,
        };
      } else {
        // If no content or it's in Pro mode, create default sections based on business type
        const businessType = detectBusinessType(business);
        const preset = getPresetByType(businessType);

        if (preset) {
          // Apply preset sections
          initialData.sections = preset.sections
            .map((sectionConfig, index) => {
              const variation = getVariationById(sectionConfig.variationId);
              if (!variation) return null;

              return {
                id: generateId(),
                variationId: sectionConfig.variationId,
                order: index,
                data: JSON.parse(JSON.stringify(variation.template)), // Deep clone
              } as SectionInstance;
            })
            .filter(Boolean) as SectionInstance[];

          initialData.theme = preset.theme;
        } else {
          // Default sections if no preset matches
          initialData.sections = [
            {
              id: generateId(),
              variationId: "hero-center-bg",
              order: 0,
              data: getVariationById("hero-center-bg")!.template,
            },
            {
              id: generateId(),
              variationId: "about-text-image",
              order: 1,
              data: getVariationById("about-text-image")!.template,
            },
            {
              id: generateId(),
              variationId: "services-3-column",
              order: 2,
              data: getVariationById("services-3-column")!.template,
            },
            {
              id: generateId(),
              variationId: "contact-form-map",
              order: 3,
              data: getVariationById("contact-form-map")!.template,
            },
          ];
        }
      }
    } catch (e) {
      console.error("Failed to parse page content", e);
    }
  }

  const handleSave = async (data: SimplePageData) => {
    try {
      // Add mode to the data
      const pageData = {
        mode: "simple" as const,
        title: data.title,
        sections: data.sections,
        theme: data.theme,
      };

      if (page) {
        await updatePage({
          pageId: page._id,
          content: JSON.stringify(pageData),
        });
        toast.success("Page saved successfully");
      } else if (domain) {
        // Create default page first if no page exists
        await createDefaultPages({
          domainId: domain._id,
          businessId: businessId,
        });
        toast.info(
          "Default pages created. Please refresh to continue editing.",
        );
      }
    } catch (error) {
      console.error("Error saving page:", error);
      toast.error("Failed to save page");
    }
  };

  const handlePublish = async (data: SimplePageData) => {
    try {
      const pageData = {
        sections: data.sections,
        theme: data.theme,
      };

      if (page) {
        await updatePage({
          pageId: page._id,
          content: JSON.stringify(pageData),
        });

        // Update business publish status
        if (business && !business.isPublished) {
          await publishBusiness({ businessId: businessId });
        }

        toast.success("Page published successfully");
      } else if (domain) {
        // Create default page first if no page exists
        await createDefaultPages({
          domainId: domain._id,
          businessId: businessId,
        });
        toast.info(
          "Default pages created. Please refresh to continue editing.",
        );
      }
    } catch (error) {
      console.error("Error publishing page:", error);
      toast.error("Failed to publish page");
    }
  };

  if (!domain || !pages) {
    return (
      <div className="flex items-center justify-center h-screen">
        <div className="text-center">
          <Loader2 className="h-8 w-8 animate-spin mx-auto mb-4" />
          <p className="text-muted-foreground">Loading your website...</p>
          {business && (
            <p className="text-sm text-muted-foreground mt-2">
              {business.name}
            </p>
          )}
        </div>
      </div>
    );
  }

  // Prepare business data for template variables
  const businessData = {
    businessName: business.name,
    businessAddress: business.address,
    businessPhone: business.phone || "",
    businessEmail: business.email || "",
    businessDescription: business.description || "",
    businessHours: business.hours.join(", "),
    businessWebsite: business.website || "",
  };

  return (
    <SimpleEditorResponsive
      initialData={initialData}
      businessData={businessData}
      domain={domain?.subdomain}
      isPublished={business.isPublished}
      onSaveAction={handleSave}
      onPublishAction={handlePublish}
    />
  );
}

// Helper function to detect business type from business data
function detectBusinessType(business: {
  category?: string;
  description?: string;
  name?: string;
}):
  | "restaurant"
  | "salon"
  | "medical"
  | "professional"
  | "retail"
  | "automotive" {
  const category = business.category?.toLowerCase() || "";
  const description = business.description?.toLowerCase() || "";
  const name = business.name?.toLowerCase() || "";

  // Check for restaurant keywords
  if (
    category.includes("restaurant") ||
    category.includes("food") ||
    category.includes("cafe") ||
    description.includes("restaurant") ||
    description.includes("dining") ||
    name.includes("restaurant") ||
    name.includes("cafe")
  ) {
    return "restaurant";
  }

  // Check for salon/beauty keywords
  if (
    category.includes("salon") ||
    category.includes("beauty") ||
    category.includes("spa") ||
    description.includes("salon") ||
    description.includes("beauty") ||
    name.includes("salon") ||
    name.includes("spa")
  ) {
    return "salon";
  }

  // Check for medical keywords
  if (
    category.includes("medical") ||
    category.includes("health") ||
    category.includes("clinic") ||
    category.includes("doctor") ||
    description.includes("medical") ||
    description.includes("clinic") ||
    name.includes("clinic") ||
    name.includes("medical")
  ) {
    return "medical";
  }

  // Check for automotive keywords
  if (
    category.includes("auto") ||
    category.includes("car") ||
    category.includes("mechanic") ||
    description.includes("auto") ||
    description.includes("car repair") ||
    name.includes("auto") ||
    name.includes("garage")
  ) {
    return "automotive";
  }

  // Check for retail keywords
  if (
    category.includes("shop") ||
    category.includes("store") ||
    category.includes("retail") ||
    description.includes("shop") ||
    description.includes("store") ||
    name.includes("shop") ||
    name.includes("store")
  ) {
    return "retail";
  }

  // Default to professional services
  return "professional";
}
