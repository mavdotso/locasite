Directory structure:
└── puckeditor-puck/
    ├── README.md
    ├── CHANGELOG.md
    ├── CODE_OF_CONDUCT.md
    ├── CONTRIBUTING.md
    ├── lerna.json
    ├── LICENSE
    ├── package.json
    ├── turbo.json
    ├── .eslintrc.js
    ├── .npmrc
    ├── .prettierignore
    ├── .prettierrc.json
    ├── .yarnrc
    ├── apps/
    │   ├── demo/
    │   │   ├── README.md
    │   │   ├── next-env.d.ts
    │   │   ├── next.config.js
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── .eslintrc.js
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   ├── styles.css
    │   │   │   ├── [...puckPath]/
    │   │   │   │   ├── client.tsx
    │   │   │   │   └── page.tsx
    │   │   │   ├── custom-ui/
    │   │   │   │   └── [...puckPath]/
    │   │   │   │       ├── client.tsx
    │   │   │   │       └── page.tsx
    │   │   │   └── rsc/
    │   │   │       └── page.tsx
    │   │   ├── config/
    │   │   │   ├── index.tsx
    │   │   │   ├── initial-data.ts
    │   │   │   ├── options.ts
    │   │   │   ├── root.tsx
    │   │   │   ├── server.tsx
    │   │   │   ├── types.ts
    │   │   │   ├── blocks/
    │   │   │   │   ├── Blank/
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   └── styles.module.css
    │   │   │   │   ├── Button/
    │   │   │   │   │   └── index.tsx
    │   │   │   │   ├── Card/
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   └── styles.module.css
    │   │   │   │   ├── Flex/
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   └── styles.module.css
    │   │   │   │   ├── Grid/
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   └── styles.module.css
    │   │   │   │   ├── Heading/
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   └── styles.module.css
    │   │   │   │   ├── Hero/
    │   │   │   │   │   ├── client.tsx
    │   │   │   │   │   ├── Hero.tsx
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   ├── quotes.ts
    │   │   │   │   │   ├── server.tsx
    │   │   │   │   │   └── styles.module.css
    │   │   │   │   ├── Logos/
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   └── styles.module.css
    │   │   │   │   ├── Space/
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   └── styles.module.css
    │   │   │   │   ├── Stats/
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   └── styles.module.css
    │   │   │   │   ├── Template/
    │   │   │   │   │   ├── client.tsx
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   ├── server.tsx
    │   │   │   │   │   ├── styles.module.css
    │   │   │   │   │   └── Template.tsx
    │   │   │   │   └── Text/
    │   │   │   │       ├── index.tsx
    │   │   │   │       └── styles.module.css
    │   │   │   └── components/
    │   │   │       ├── Footer/
    │   │   │       │   └── index.tsx
    │   │   │       ├── Header/
    │   │   │       │   ├── index.tsx
    │   │   │       │   └── styles.module.css
    │   │   │       ├── Layout/
    │   │   │       │   ├── index.tsx
    │   │   │       │   └── styles.module.css
    │   │   │       └── Section/
    │   │   │           ├── index.tsx
    │   │   │           └── styles.module.css
    │   │   ├── lib/
    │   │   │   ├── resolve-puck-path.ts
    │   │   │   └── use-demo-data.ts
    │   │   └── tsconfig/
    │   │       ├── base.json
    │   │       └── nextjs.json
    │   └── docs/
    │       ├── middleware.ts
    │       ├── next-env.d.ts
    │       ├── next-sitemap.config.js
    │       ├── next.config.mjs
    │       ├── package.json
    │       ├── releases.json
    │       ├── styles.css
    │       ├── theme.config.tsx
    │       ├── tsconfig.json
    │       ├── .eslintrc.js
    │       ├── .gitignore
    │       ├── components/
    │       │   ├── CtaCard/
    │       │   │   ├── index.tsx
    │       │   │   └── styles.module.css
    │       │   ├── DiscoveryButton/
    │       │   │   └── index.tsx
    │       │   ├── FooterActions/
    │       │   │   ├── index.tsx
    │       │   │   └── styles.module.css
    │       │   ├── Home/
    │       │   │   ├── index.tsx
    │       │   │   └── styles.module.css
    │       │   ├── Preview/
    │       │   │   ├── index.tsx
    │       │   │   └── styles.module.css
    │       │   ├── ReleaseSwitcher/
    │       │   │   ├── index.tsx
    │       │   │   └── styles.module.css
    │       │   └── Viewport/
    │       │       ├── index.tsx
    │       │       └── styles.module.css
    │       ├── pages/
    │       │   ├── _app.tsx
    │       │   ├── _document.tsx
    │       │   ├── _meta.js
    │       │   ├── index.mdx
    │       │   ├── api/
    │       │   │   └── releases.ts
    │       │   ├── docs/
    │       │   │   ├── _meta.js
    │       │   │   ├── getting-started.mdx
    │       │   │   ├── index.mdx
    │       │   │   ├── api-reference/
    │       │   │   │   ├── _meta.js
    │       │   │   │   ├── actions.mdx
    │       │   │   │   ├── components.mdx
    │       │   │   │   ├── configuration.mdx
    │       │   │   │   ├── data-model.mdx
    │       │   │   │   ├── fields.mdx
    │       │   │   │   ├── functions.mdx
    │       │   │   │   ├── overrides.mdx
    │       │   │   │   ├── permissions.mdx
    │       │   │   │   ├── plugin.mdx
    │       │   │   │   ├── puck-api.mdx
    │       │   │   │   ├── components/
    │       │   │   │   │   ├── _meta.js
    │       │   │   │   │   ├── action-bar-action.mdx
    │       │   │   │   │   ├── action-bar-group.mdx
    │       │   │   │   │   ├── action-bar-label.mdx
    │       │   │   │   │   ├── action-bar.mdx
    │       │   │   │   │   ├── auto-field.mdx
    │       │   │   │   │   ├── drawer-item.mdx
    │       │   │   │   │   ├── drawer.mdx
    │       │   │   │   │   ├── drop-zone.mdx
    │       │   │   │   │   ├── field-label.mdx
    │       │   │   │   │   ├── puck-components.mdx
    │       │   │   │   │   ├── puck-fields.mdx
    │       │   │   │   │   ├── puck-outline.mdx
    │       │   │   │   │   ├── puck-preview.mdx
    │       │   │   │   │   ├── puck.mdx
    │       │   │   │   │   └── render.mdx
    │       │   │   │   ├── configuration/
    │       │   │   │   │   ├── _meta.js
    │       │   │   │   │   ├── component-config.mdx
    │       │   │   │   │   └── config.mdx
    │       │   │   │   ├── data-model/
    │       │   │   │   │   ├── app-state.mdx
    │       │   │   │   │   ├── component-data.mdx
    │       │   │   │   │   ├── data.mdx
    │       │   │   │   │   ├── item-selector.mdx
    │       │   │   │   │   └── root-data.mdx
    │       │   │   │   ├── fields/
    │       │   │   │   │   ├── _meta.js
    │       │   │   │   │   ├── array.mdx
    │       │   │   │   │   ├── base.mdx
    │       │   │   │   │   ├── custom.mdx
    │       │   │   │   │   ├── external.mdx
    │       │   │   │   │   ├── number.mdx
    │       │   │   │   │   ├── object.mdx
    │       │   │   │   │   ├── radio.mdx
    │       │   │   │   │   ├── select.mdx
    │       │   │   │   │   ├── slot.mdx
    │       │   │   │   │   ├── text.mdx
    │       │   │   │   │   └── textarea.mdx
    │       │   │   │   ├── functions/
    │       │   │   │   │   ├── migrate.mdx
    │       │   │   │   │   ├── resolve-all-data.mdx
    │       │   │   │   │   ├── transform-props.mdx
    │       │   │   │   │   ├── use-get-puck.mdx
    │       │   │   │   │   ├── use-puck.mdx
    │       │   │   │   │   └── walk-tree.mdx
    │       │   │   │   └── overrides/
    │       │   │   │       ├── _meta.js
    │       │   │   │       ├── action-bar.mdx
    │       │   │   │       ├── component-item.mdx
    │       │   │   │       ├── components.mdx
    │       │   │   │       ├── field-label.mdx
    │       │   │   │       ├── field-types.mdx
    │       │   │   │       ├── fields.mdx
    │       │   │   │       ├── header-actions.mdx
    │       │   │   │       ├── header.mdx
    │       │   │   │       ├── iframe.mdx
    │       │   │   │       ├── outline.mdx
    │       │   │   │       ├── preview.mdx
    │       │   │   │       └── puck.mdx
    │       │   │   ├── extending-puck/
    │       │   │   │   ├── _meta.js
    │       │   │   │   ├── composition.mdx
    │       │   │   │   ├── custom-fields.mdx
    │       │   │   │   ├── internal-puck-api.mdx
    │       │   │   │   ├── plugins.mdx
    │       │   │   │   ├── theming.mdx
    │       │   │   │   └── ui-overrides.mdx
    │       │   │   ├── guides/
    │       │   │   │   ├── _meta.js
    │       │   │   │   └── migrations/
    │       │   │   │       ├── _meta.js
    │       │   │   │       └── dropzones-to-slots.mdx
    │       │   │   └── integrating-puck/
    │       │   │       ├── _meta.js
    │       │   │       ├── categories.mdx
    │       │   │       ├── component-configuration.mdx
    │       │   │       ├── data-migration.mdx
    │       │   │       ├── dynamic-fields.mdx
    │       │   │       ├── dynamic-props.mdx
    │       │   │       ├── external-data-sources.mdx
    │       │   │       ├── feature-toggling.mdx
    │       │   │       ├── multi-column-layouts.mdx
    │       │   │       ├── root-configuration.mdx
    │       │   │       ├── server-components.mdx
    │       │   │       └── viewports.mdx
    │       │   └── showcase/
    │       ├── public/
    │       │   ├── manifest.webmanifest
    │       │   └── robots.txt
    │       └── tsconfig/
    │           ├── base.json
    │           └── nextjs.json
    ├── packages/
    │   ├── core/
    │   │   ├── globals.d.ts
    │   │   ├── index.ts
    │   │   ├── jest.config.ts
    │   │   ├── package.json
    │   │   ├── rsc.tsx
    │   │   ├── styles.css
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   ├── .gitignore
    │   │   ├── components/
    │   │   │   ├── ActionBar/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── AutoField/
    │   │   │   │   ├── context.tsx
    │   │   │   │   ├── index.tsx
    │   │   │   │   ├── styles.module.css
    │   │   │   │   └── fields/
    │   │   │   │       ├── index.tsx
    │   │   │   │       ├── ArrayField/
    │   │   │   │       │   ├── index.tsx
    │   │   │   │       │   └── styles.module.css
    │   │   │   │       ├── DefaultField/
    │   │   │   │       │   └── index.tsx
    │   │   │   │       ├── ExternalField/
    │   │   │   │       │   └── index.tsx
    │   │   │   │       ├── ObjectField/
    │   │   │   │       │   ├── index.tsx
    │   │   │   │       │   └── styles.module.css
    │   │   │   │       ├── RadioField/
    │   │   │   │       │   └── index.tsx
    │   │   │   │       ├── SelectField/
    │   │   │   │       │   └── index.tsx
    │   │   │   │       └── TextareaField/
    │   │   │   │           └── index.tsx
    │   │   │   ├── AutoFrame/
    │   │   │   │   └── index.tsx
    │   │   │   ├── Button/
    │   │   │   │   ├── Button.module.css
    │   │   │   │   ├── Button.tsx
    │   │   │   │   └── index.ts
    │   │   │   ├── ComponentList/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── DefaultOverride/
    │   │   │   │   └── index.tsx
    │   │   │   ├── DragDropContext/
    │   │   │   │   └── index.tsx
    │   │   │   ├── DraggableComponent/
    │   │   │   │   ├── index.tsx
    │   │   │   │   ├── styles.css
    │   │   │   │   └── styles.module.css
    │   │   │   ├── DragIcon/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── Drawer/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── DropZone/
    │   │   │   │   ├── context.tsx
    │   │   │   │   ├── index.tsx
    │   │   │   │   ├── styles.module.css
    │   │   │   │   ├── types.ts
    │   │   │   │   └── lib/
    │   │   │   │       ├── use-content-with-preview.ts
    │   │   │   │       ├── use-drag-axis.ts
    │   │   │   │       └── use-min-empty-height.ts
    │   │   │   ├── ExternalInput/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── Heading/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── IconButton/
    │   │   │   │   ├── IconButton.module.css
    │   │   │   │   ├── IconButton.tsx
    │   │   │   │   └── index.ts
    │   │   │   ├── LayerTree/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── Loader/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── MenuBar/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── Modal/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── OutlineList/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── Puck/
    │   │   │   │   ├── index.tsx
    │   │   │   │   ├── styles.module.css
    │   │   │   │   ├── __tests__/
    │   │   │   │   │   ├── index.tsx
    │   │   │   │   │   └── __snapshots__/
    │   │   │   │   │       └── index.tsx.snap
    │   │   │   │   └── components/
    │   │   │   │       ├── Canvas/
    │   │   │   │       │   ├── index.tsx
    │   │   │   │       │   └── styles.module.css
    │   │   │   │       ├── Components/
    │   │   │   │       │   └── index.tsx
    │   │   │   │       ├── Fields/
    │   │   │   │       │   ├── index.tsx
    │   │   │   │       │   └── styles.module.css
    │   │   │   │       ├── Header/
    │   │   │   │       │   ├── index.tsx
    │   │   │   │       │   └── styles.module.css
    │   │   │   │       ├── Outline/
    │   │   │   │       │   └── index.tsx
    │   │   │   │       └── Preview/
    │   │   │   │           ├── index.tsx
    │   │   │   │           └── styles.module.css
    │   │   │   ├── Render/
    │   │   │   │   └── index.tsx
    │   │   │   ├── ServerRender/
    │   │   │   │   └── index.tsx
    │   │   │   ├── SidebarSection/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.module.css
    │   │   │   ├── SlotRender/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── server.tsx
    │   │   │   ├── Sortable/
    │   │   │   │   ├── index.tsx
    │   │   │   │   └── styles.css
    │   │   │   └── ViewportControls/
    │   │   │       ├── default-viewports.ts
    │   │   │       ├── index.tsx
    │   │   │       └── styles.module.css
    │   │   ├── lib/
    │   │   │   ├── accumulate-transform.ts
    │   │   │   ├── assign-refs.ts
    │   │   │   ├── bubble-pointer-event.ts
    │   │   │   ├── filter-data-attrs.ts
    │   │   │   ├── filter.ts
    │   │   │   ├── generate-id.ts
    │   │   │   ├── get-changed.ts
    │   │   │   ├── get-class-name-factory.ts
    │   │   │   ├── get-deep-dir.ts
    │   │   │   ├── get-deep-scroll-position.ts
    │   │   │   ├── get-frame.ts
    │   │   │   ├── get-zone-id.ts
    │   │   │   ├── get-zoom-config.ts
    │   │   │   ├── global-position.ts
    │   │   │   ├── index.ts
    │   │   │   ├── insert-component.ts
    │   │   │   ├── is-ios.ts
    │   │   │   ├── load-overrides.ts
    │   │   │   ├── migrate.ts
    │   │   │   ├── on-scroll-end.ts
    │   │   │   ├── plugin-debug.tsx
    │   │   │   ├── resolve-all-data.ts
    │   │   │   ├── resolve-component-data.ts
    │   │   │   ├── resolve-permissions.ts
    │   │   │   ├── root-droppable-id.ts
    │   │   │   ├── safe-json-parse.ts
    │   │   │   ├── scroll-into-view.ts
    │   │   │   ├── throttle.ts
    │   │   │   ├── transform-props.ts
    │   │   │   ├── use-breadcrumbs.ts
    │   │   │   ├── use-component-list.tsx
    │   │   │   ├── use-context-store.ts
    │   │   │   ├── use-frame.ts
    │   │   │   ├── use-hotkey.ts
    │   │   │   ├── use-inject-css.ts
    │   │   │   ├── use-loaded-overrides.ts
    │   │   │   ├── use-on-value-change.ts
    │   │   │   ├── use-parent.ts
    │   │   │   ├── use-preview-mode-hotkeys.ts
    │   │   │   ├── use-puck.ts
    │   │   │   ├── use-safe-id.ts
    │   │   │   ├── use-slots.tsx
    │   │   │   ├── use-why-render.ts
    │   │   │   ├── __tests__/
    │   │   │   │   ├── insert-component.spec.tsx
    │   │   │   │   ├── load-overrides.spec.tsx
    │   │   │   │   ├── migrate.spec.tsx
    │   │   │   │   ├── resolve-all-data.spec.tsx
    │   │   │   │   ├── resolve-component-data.spec.tsx
    │   │   │   │   ├── transform-props.spec.tsx
    │   │   │   │   └── use-breadcrumbs.spec.tsx
    │   │   │   ├── data/
    │   │   │   │   ├── default-data.ts
    │   │   │   │   ├── default-slots.ts
    │   │   │   │   ├── find-zones-for-area.ts
    │   │   │   │   ├── flatten-data.ts
    │   │   │   │   ├── flatten-node.ts
    │   │   │   │   ├── for-related-zones.ts
    │   │   │   │   ├── get-ids-for-parent.ts
    │   │   │   │   ├── get-item.ts
    │   │   │   │   ├── insert.ts
    │   │   │   │   ├── make-state-public.ts
    │   │   │   │   ├── map-slots.ts
    │   │   │   │   ├── populate-ids.ts
    │   │   │   │   ├── remove.ts
    │   │   │   │   ├── reorder.ts
    │   │   │   │   ├── replace.ts
    │   │   │   │   ├── setup-zone.ts
    │   │   │   │   ├── strip-slots.ts
    │   │   │   │   ├── to-component.ts
    │   │   │   │   ├── to-root.ts
    │   │   │   │   ├── walk-app-state.ts
    │   │   │   │   ├── walk-tree.ts
    │   │   │   │   └── __tests__/
    │   │   │   │       ├── walk-app-state.spec.tsx
    │   │   │   │       └── walk-tree.spec.tsx
    │   │   │   └── dnd/
    │   │   │       ├── NestedDroppablePlugin.ts
    │   │   │       ├── use-on-drag-finished.ts
    │   │   │       ├── use-rendered-callback.ts
    │   │   │       ├── use-sensors.ts
    │   │   │       └── collision/
    │   │   │           ├── collision-debug.ts
    │   │   │           ├── directional/
    │   │   │           │   └── index.ts
    │   │   │           └── dynamic/
    │   │   │               ├── get-direction.ts
    │   │   │               ├── get-midpoint-impact.ts
    │   │   │               ├── index.ts
    │   │   │               ├── store.ts
    │   │   │               └── track-movement-interval.ts
    │   │   ├── reducer/
    │   │   │   ├── actions.tsx
    │   │   │   ├── index.ts
    │   │   │   └── actions/
    │   │   │       ├── duplicate.ts
    │   │   │       ├── insert.ts
    │   │   │       ├── move.ts
    │   │   │       ├── register-zone.ts
    │   │   │       ├── remove.ts
    │   │   │       ├── reorder.ts
    │   │   │       ├── replace-root.ts
    │   │   │       ├── replace.ts
    │   │   │       ├── set-data.ts
    │   │   │       ├── set-ui.ts
    │   │   │       ├── set.ts
    │   │   │       ├── __helpers__/
    │   │   │       │   └── index.tsx
    │   │   │       └── __tests__/
    │   │   │           ├── duplicate.spec.ts
    │   │   │           ├── insert.spec.ts
    │   │   │           ├── move.spec.ts
    │   │   │           ├── register-zone.spec.ts
    │   │   │           ├── remove.spec.ts
    │   │   │           ├── reorder.spec.ts
    │   │   │           ├── replace.spec.ts
    │   │   │           ├── set-ui.spec.ts
    │   │   │           └── set.spec.ts
    │   │   ├── store/
    │   │   │   ├── default-app-state.ts
    │   │   │   ├── index.ts
    │   │   │   └── slices/
    │   │   │       ├── fields.ts
    │   │   │       ├── history.ts
    │   │   │       ├── nodes.ts
    │   │   │       ├── permissions.ts
    │   │   │       └── __tests__/
    │   │   │           ├── fields.spec.tsx
    │   │   │           ├── history.spec.tsx
    │   │   │           ├── nodes.spec.tsx
    │   │   │           └── permissions.spec.tsx
    │   │   ├── styles/
    │   │   │   ├── color.css
    │   │   │   └── typography.css
    │   │   └── types/
    │   │       ├── AppState.tsx
    │   │       ├── Config.tsx
    │   │       ├── Data.tsx
    │   │       ├── Fields.ts
    │   │       ├── index.ts
    │   │       ├── Internal.tsx
    │   │       ├── Props.tsx
    │   │       ├── Utils.tsx
    │   │       ├── __tests__/
    │   │       │   └── internal.spec.ts
    │   │       └── API/
    │   │           ├── DropZone.ts
    │   │           ├── index.ts
    │   │           ├── Overrides.ts
    │   │           └── Viewports.ts
    │   ├── create-puck-app/
    │   │   ├── README.md
    │   │   ├── index.js
    │   │   ├── package.json
    │   │   ├── scripts/
    │   │   │   └── generate.js
    │   │   └── templates/
    │   │       ├── .gitignore
    │   │       ├── next/
    │   │       │   └── package.json.hbs
    │   │       ├── react-router/
    │   │       │   ├── package.json.hbs
    │   │       │   └── tsconfig.json.hbs
    │   │       └── remix/
    │   │           └── package.json.hbs
    │   ├── eslint-config-custom/
    │   │   ├── index.js
    │   │   └── package.json
    │   ├── field-contentful/
    │   │   ├── README.md
    │   │   ├── index.ts
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   └── tsup.config.ts
    │   ├── plugin-emotion-cache/
    │   │   ├── README.md
    │   │   ├── index.tsx
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   └── tsup.config.ts
    │   ├── plugin-heading-analyzer/
    │   │   ├── README.md
    │   │   ├── globals.d.ts
    │   │   ├── index.ts
    │   │   ├── package.json
    │   │   ├── tsconfig.json
    │   │   ├── tsup.config.ts
    │   │   └── src/
    │   │       ├── HeadingAnalyzer.module.css
    │   │       └── HeadingAnalyzer.tsx
    │   ├── tsconfig/
    │   │   ├── base.json
    │   │   ├── nextjs.json
    │   │   ├── package.json
    │   │   └── react-library.json
    │   └── tsup-config/
    │       ├── index.ts
    │       ├── package.json
    │       └── react-import.js
    ├── recipes/
    │   ├── next/
    │   │   ├── README.md
    │   │   ├── database.json
    │   │   ├── middleware.ts
    │   │   ├── next-env.d.ts
    │   │   ├── next.config.js
    │   │   ├── package.json
    │   │   ├── puck.config.tsx
    │   │   ├── tsconfig.json
    │   │   ├── .eslintrc.js
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── layout.tsx
    │   │   │   ├── page.tsx
    │   │   │   ├── styles.css
    │   │   │   ├── [...puckPath]/
    │   │   │   │   ├── client.tsx
    │   │   │   │   └── page.tsx
    │   │   │   └── puck/
    │   │   │       ├── page.tsx
    │   │   │       ├── [...puckPath]/
    │   │   │       │   ├── client.tsx
    │   │   │       │   └── page.tsx
    │   │   │       └── api/
    │   │   │           └── route.ts
    │   │   ├── lib/
    │   │   │   └── get-page.ts
    │   │   └── tsconfig/
    │   │       ├── base.json
    │   │       └── nextjs.json
    │   ├── react-router/
    │   │   ├── README.md
    │   │   ├── database.json
    │   │   ├── package.json
    │   │   ├── puck.config.tsx
    │   │   ├── react-router.config.ts
    │   │   ├── tsconfig.json
    │   │   ├── vite.config.ts
    │   │   ├── .gitignore
    │   │   ├── app/
    │   │   │   ├── root.tsx
    │   │   │   ├── routes.ts
    │   │   │   ├── components/
    │   │   │   │   └── puck-render.tsx
    │   │   │   ├── lib/
    │   │   │   │   ├── pages.server.ts
    │   │   │   │   └── resolve-puck-path.server.ts
    │   │   │   └── routes/
    │   │   │       ├── _index.tsx
    │   │   │       └── puck-splat.tsx
    │   │   └── public/
    │   └── remix/
    │       ├── README.md
    │       ├── database.json
    │       ├── package.json
    │       ├── remix.config.js
    │       ├── remix.env.d.ts
    │       ├── tsconfig.json
    │       ├── .eslintrc.cjs
    │       ├── .gitignore
    │       ├── app/
    │       │   ├── entry.client.tsx
    │       │   ├── entry.server.tsx
    │       │   ├── puck.config.tsx
    │       │   ├── root.tsx
    │       │   ├── models/
    │       │   │   └── page.server.ts
    │       │   ├── routes/
    │       │   │   ├── $puckPath.tsx
    │       │   │   ├── $puckPath_.edit.tsx
    │       │   │   ├── _index.tsx
    │       │   │   └── edit.tsx
    │       │   └── styles/
    │       │       └── shared.css
    │       └── public/
    ├── scripts/
    │   ├── create-changelog.js
    │   ├── get-unstable-version.js
    │   ├── publish.sh
    │   └── e2e/
    │       ├── smoke-framework.mjs
    │       ├── smoke.mjs
    │       └── utils/
    │           ├── drag-and-drop.mjs
    │           ├── get-box.mjs
    │           ├── pause.mjs
    │           └── setup.mjs
    └── .github/
        ├── ISSUE_TEMPLATE/
        │   ├── bug-report.md
        │   ├── config.yml
        │   └── feature_request.md
        └── workflows/
            ├── ci.yml
            ├── publish-canary.yml
            └── publish.yml

================================================
FILE: README.md
================================================
# Puck

The visual editor for React.

<p align="left">
  <a aria-label="NPM version" href="https://www.npmjs.com/package/@measured/puck">
    <img alt="" src="https://img.shields.io/npm/v/@measured/puck.svg?style=for-the-badge&labelColor=000000">
  </a>
  <a aria-label="License" href="https://github.com/measuredco/puck/blob/main/LICENSE">
    <img alt="" src="https://img.shields.io/npm/l/@measured/puck.svg?style=for-the-badge&labelColor=000000">
  </a>
  <a aria-label="Join the community on Discord" href="https://discord.gg/D9e4E3MQVZ">
    <img alt="" src="https://img.shields.io/badge/Join%20the%20Discord-blueviolet.svg?style=for-the-badge&logo=Discord&labelColor=000000&logoWidth=20">
  </a>
 <a aria-label="Browse the awesome-puck community repo" href="https://github.com/measuredco/awesome-puck">
    <img alt="" src="https://img.shields.io/badge/repo-awesome--puck-fc60a8.svg?style=for-the-badge&labelColor=000000&logoWidth=20">
  </a>
</p>

## Demo

Visit https://demo.puckeditor.com/edit to try the demo.

## Documentation

Visit https://puckeditor.com to view the full documentation.

## Quick start

Install the package:

```sh
npm i @measured/puck --save # or npx create-puck-app my-app
```

Render the editor:

```jsx
// Editor.jsx
import { Puck } from "@measured/puck";
import "@measured/puck/puck.css";

// Create Puck component config
const config = {
  components: {
    HeadingBlock: {
      fields: {
        children: {
          type: "text",
        },
      },
      render: ({ children }) => {
        return <h1>{children}</h1>;
      },
    },
  },
};

// Describe the initial data
const initialData = {};

// Save the data to your database
const save = (data) => {};

// Render Puck editor
export function Editor() {
  return <Puck config={config} data={initialData} onPublish={save} />;
}
```

Render the page:

```jsx
// Page.jsx
import { Render } from "@measured/puck";
import "@measured/puck/puck.css";

export function Page() {
  return <Render config={config} data={data} />;
}
```

## Recipes

Use `create-puck-app` to quickly spin up a a pre-configured app based on our provided [recipes](https://github.com/measuredco/puck/tree/main/recipes):

```sh
npx create-puck-app my-app
```

Available recipes include:

- [**next**](https://github.com/measuredco/puck/tree/main/recipes/next): Next.js example, using App Router and static page generation
- [**remix**](https://github.com/measuredco/puck/tree/main/recipes/remix): Remix Run v2 example, using dynamic routes at root-level
- [**react-router**](https://github.com/measuredco/puck/tree/main/recipes/react-router): React Router v7 app example, using dynamic routes to create pages at any level

## Community

- [Discord server](https://discord.gg/D9e4E3MQVZ) for discussions
- [awesome-puck](https://github.com/measuredco/awesome-puck) community repo for plugins, custom fields & more

## Get support

If you have any questions about Puck, please open a [GitHub issue](https://github.com/measuredco/puck/issues) or join us on [Discord](https://discord.gg/D9e4E3MQVZ).

Or [book a discovery call](https://app.cal.com/chrisvxd/puck-enquiry/) for hands-on support and consultancy.

## License

MIT © [The Puck Contributors](https://github.com/measuredco/puck/graphs/contributors)



================================================
FILE: CHANGELOG.md
================================================
# CHANGELOG

<!--__CHANGELOG_ENTRY__-->

## [0.19.1](https://github.com/measuredco/puck/compare/v0.19.0...v0.19.1) (2025-06-09)


### Bug Fixes

* address flat package import errors ([61f2e46](https://github.com/measuredco/puck/commit/61f2e46822471fcdbc52476eaae813a3fb2dd27b))
* handle multiple slots in migrate function ([8597105](https://github.com/measuredco/puck/commit/859710536bc17102f73db6b9cd411c55e1ed6517))
* prevent type erasure in object props ([00fbbb8](https://github.com/measuredco/puck/commit/00fbbb8ae2217e38a304a4114069c4e124a1a28f))
* tidy internal index when array slots removed ([f9d3f0e](https://github.com/measuredco/puck/commit/f9d3f0e93f21735b9a3fb605b4eed4fa8c7ded3e))




## [0.19.0](https://github.com/measuredco/puck/compare/v0.18.2...v0.19.0) (2025-06-04)


### Features

* add convenience metadata API to fields ([5fe936e](https://github.com/measuredco/puck/commit/5fe936e08d2f27f663e8849fc59f20973a289332))
* add getItem helpers to usePuck ([ad947d8](https://github.com/measuredco/puck/commit/ad947d8c2f9f25bb71585f7158900292237a46d4))
* add labelIcon param to all fields for custom label icons ([24030a9](https://github.com/measuredco/puck/commit/24030a9caa4091382561019c9adc123839a90569))
* add mapSlots helper function for manipulating slot data ([a27944f](https://github.com/measuredco/puck/commit/a27944ff7c1135c9ee582ff41173b060dd0d79bf))
* add metadata API for passing data to every component ([b9add22](https://github.com/measuredco/puck/commit/b9add22951755737e272dbf6e475e24198c401ec))
* add placeholder param for text, textarea and number fields ([32a6f78](https://github.com/measuredco/puck/commit/32a6f7844b7bd3962a16fd2c6989b412aa91685f))
* add react-router v7 recipe ([706ea0c](https://github.com/measuredco/puck/commit/706ea0c1f0d9237046675674903a0ba7f61fd785))
* add replaceRoot action to dispatcher ([586eccd](https://github.com/measuredco/puck/commit/586eccd6f3d80af6a4f43001f5d51feb29eeb887))
* add selector to usePuck for improved performance ([8976e5f](https://github.com/measuredco/puck/commit/8976e5f28736d97d61a99f6e219e88797d67e309))
* add slots API ([40bc2ee](https://github.com/measuredco/puck/commit/40bc2eec7e5b409cb2479dc10a989b7b5824ae60))
* add step parameter to number fields ([0ea6ce4](https://github.com/measuredco/puck/commit/0ea6ce41281710ceecdc5dee8a632c06004244f8))
* add useGetPuck hook for getting latest internal PuckApi ([1d9a47d](https://github.com/measuredco/puck/commit/1d9a47d78ff0e239ef343f851ef0e5e5de8e1d0d))
* add visible param to show/hide fields ([e5911f3](https://github.com/measuredco/puck/commit/e5911f3d075bcc560672f27e7b74849ab8c6df50))
* deprecate DropZone component ([d54145d](https://github.com/measuredco/puck/commit/d54145d8bedf6df319620fde82d867edb9d034e3))
* export package.json for module federation ([b918900](https://github.com/measuredco/puck/commit/b918900b1ffbd4de46c405a73b6a5c74f8db76f5))
* expose CustomFieldRender type for custom field render functions ([8d459e4](https://github.com/measuredco/puck/commit/8d459e4e848f70e0256c736b1b6cd58081ff7cb7))
* expose RootConfig type ([638e066](https://github.com/measuredco/puck/commit/638e066fb655bc3e258093bf2428189f3afd88f9))
* expose WithSlotProps type ([6dc5101](https://github.com/measuredco/puck/commit/6dc5101e26093960a528c9c908acebfe2c917b4e))
* provide `trigger` event to resolveData parameters ([55b42ae](https://github.com/measuredco/puck/commit/55b42aeeddbc1ada53646bf93c29592523c27e54))
* rename mapSlots to walkTree ([427e686](https://github.com/measuredco/puck/commit/427e686fdd2a54f35b2de5370bad289a4d409873))
* support slots in transformProps via optional config arg ([7d59b94](https://github.com/measuredco/puck/commit/7d59b94046e121b4e6afa7e502a66f43a2b236c7))


### Performance Improvements

* eliminate most re-renders ([9fcd968](https://github.com/measuredco/puck/commit/9fcd96851fd1472890c5846183f64d62a3a2643f))
* eliminate re-renders during drag operations ([3ba3ac5](https://github.com/measuredco/puck/commit/3ba3ac51b0733be0c2ce822d9dd82524873a31d3))


### Bug Fixes

* account for transforms in overlays ([22f5e3a](https://github.com/measuredco/puck/commit/22f5e3a37611e4d86c43ace936b0ffbbfaf9dd90))
* add missing `id` to changed type for resolvers ([eb4f9d8](https://github.com/measuredco/puck/commit/eb4f9d857952ee3323447c355edb9fd3d6770716))
* avoid query selector collision with multiple iframes ([2c1db86](https://github.com/measuredco/puck/commit/2c1db862bfddfee06c78bcf211ece0b9400bec58))
* bind array item to correct field when using multiple arrays ([7e231b7](https://github.com/measuredco/puck/commit/7e231b782e49162f2b5050ba17fa4178af6ec7c8))
* deeply check items before populating resolveData changed ([db75e42](https://github.com/measuredco/puck/commit/db75e42b85cfd2cff38bc633d0cd0335213db1fa))
* don't artificially constrain array items to container ([36b5713](https://github.com/measuredco/puck/commit/36b5713d04e6ad1d116faa25e41fc9683dddb09e))
* don't collide with parent if component contains drop zone ([e7d2371](https://github.com/measuredco/puck/commit/e7d237137f3381b517eebf39bedf29997e76d4fa))
* don't render array item until dropped ([1dfc1b3](https://github.com/measuredco/puck/commit/1dfc1b334678ad5b63de0919c92e810bbea19311))
* don't reset old values when modifying fields in other array items ([ad78e98](https://github.com/measuredco/puck/commit/ad78e98fc7f711da476fa0678a702fd4aa0310d2))
* don't track dragged headings in heading-outline-analyzer ([2e1a24e](https://github.com/measuredco/puck/commit/2e1a24ed77aa5157647ad93a9dfe2e0723f38cd1))
* ensure array items can be opened on mobile ([a60c81e](https://github.com/measuredco/puck/commit/a60c81eb4836c368c90cd1d000c77cecc33610cb))
* ensure file inputs work inside array fields ([83f8f2d](https://github.com/measuredco/puck/commit/83f8f2d7a1eab1bd7a9c182c5435b3782d3dc720))
* ensure nested array fields are draggable ([af4f756](https://github.com/measuredco/puck/commit/af4f756348db1a13c6e3139890e2d8b6750a1dc2))
* export migrate util in RSC bundle ([2568ac3](https://github.com/measuredco/puck/commit/2568ac34b4e6f5f00b3c0840b409d6b4f9655e03))
* expose transformProps in server bundle ([020071e](https://github.com/measuredco/puck/commit/020071e4a8820880b5c5e3389a71b97ce7d9ad4e))
* fix undo/redo hotkeys for Windows ([a994207](https://github.com/measuredco/puck/commit/a994207e11e6f04cfd23cf827f5e7176a87bab1e))
* prevent ActionBar clipping if it exceeds top bounds ([56f23e8](https://github.com/measuredco/puck/commit/56f23e8166e9ddf96f929d9f52faa072af2e98da))
* prevent horizontal scroll on touch  devices ([cb4b6ee](https://github.com/measuredco/puck/commit/cb4b6ee597f6e603bc084de3458195e3dfb6b84f))
* prevent input-type fields from exceeding container boundaries ([b22833e](https://github.com/measuredco/puck/commit/b22833ee9d3365789fe38d4350c79ee43b8441a1))
* prevent item from sometimes sticking to window during drag ([e62832e](https://github.com/measuredco/puck/commit/e62832e171de88e2710581d3a3096d5d759d2d63))
* reflect resolveData value changes in fields ([69dd799](https://github.com/measuredco/puck/commit/69dd799d0bb20ca2baa0bd206f84a575b68dbd70))
* remove erroneous React 17 from supported peer dependencies ([46212f0](https://github.com/measuredco/puck/commit/46212f0fdb11c2327d92317551a1503646f10e03))
* remove unexpected license from recipes ([7010bdc](https://github.com/measuredco/puck/commit/7010bdc2f971cb4ee535524e40b3d5c01a5e48f3))
* reorder array items more predictably ([64c65c3](https://github.com/measuredco/puck/commit/64c65c32ef6f8130832d11c1b532563890b9dcfe))
* reset stacking context in Puck entry ([6bf9c99](https://github.com/measuredco/puck/commit/6bf9c995ce8e3445e350fa864978fc2dabec52be))
* restore ability to drop between sibling zones ([2807cba](https://github.com/measuredco/puck/commit/2807cbaa83a161974802886ec8d12d555cf8c65d))
* restore field values during undo/redo ([6917928](https://github.com/measuredco/puck/commit/6917928d3ce053eee214c438268dbd115520c1f6))
* retain minimum height when ActionBar is empty ([a52ccb9](https://github.com/measuredco/puck/commit/a52ccb96abdd37ade8a76e12f902b56d5f4f4efd))
* set ready status more reliably when using strict mode ([5a526d0](https://github.com/measuredco/puck/commit/5a526d0a2fffdd243c8eb191961bd136639f75f2))
* show correct styles when insert permission is disabled ([f19cdca](https://github.com/measuredco/puck/commit/f19cdcab2c3579f38ad79c55f168bdfba5699ed2))
* show top border on array button when array empty ([add5a17](https://github.com/measuredco/puck/commit/add5a175286036bd029113b2746bc0c94fa0a2ff))
* still select item from outline if element not in document ([8e1d722](https://github.com/measuredco/puck/commit/8e1d722355409e0985195415a4b05e56a62af470))
* support strings in readOnly type for arrays and object ([9358a3b](https://github.com/measuredco/puck/commit/9358a3b53f245a1caf245ee984da8017edac3fc6))


## [0.18.3](https://github.com/measuredco/puck/compare/v0.18.2...v0.18.3) (2025-04-05)


### Bug Fixes

* bind array item to correct field when using multiple arrays ([934cfae](https://github.com/measuredco/puck/commit/934cfaeed36b9737cd51c0d400b4e7ec8686ae35))
* don't artificially constrain array items to container ([648a235](https://github.com/measuredco/puck/commit/648a235f5bb20b276f7fc307e81842b1215838f9))
* don't render array item until dropped ([94f5e23](https://github.com/measuredco/puck/commit/94f5e238e2a8dd2ec5b3eba211d1160a2faa739a))
* don't reset old values when modifying fields in other array items ([73c17b3](https://github.com/measuredco/puck/commit/73c17b30d1c13a8971731942f690c44ddc1794cc))
* don't track dragged headings in heading-outline-analyzer ([3c16391](https://github.com/measuredco/puck/commit/3c16391bc8085cbddc910f70657e440471216995))
* ensure file inputs work inside array fields ([746033f](https://github.com/measuredco/puck/commit/746033f53623b1824f31e987339737fd92ce38dc))
* ensure nested array fields are draggable ([0bdd243](https://github.com/measuredco/puck/commit/0bdd2434a254151cfbe636840ed1294fef5c0c26))
* expose transformProps in server bundle ([d234345](https://github.com/measuredco/puck/commit/d234345c73d530803f3effb1c8a458353ac006e2))
* prevent ActionBar clipping if it exceeds top bounds ([e8355f0](https://github.com/measuredco/puck/commit/e8355f09c668baa044629d923076c59817d43072))
* remove erroneous React 17 from supported peer dependencies ([98ad734](https://github.com/measuredco/puck/commit/98ad73412c1addb9214a3d953d962f401f044a3f))
* reorder array items more predictably ([659f2d8](https://github.com/measuredco/puck/commit/659f2d8fc0c3c4511211a4933e0337ab771b29dd))
* show top border on array button when array empty ([7442118](https://github.com/measuredco/puck/commit/7442118598793d808c80535428dd21de9315daa1))




## [0.18.2](https://github.com/measuredco/puck/compare/v0.18.0...v0.18.2) (2025-01-31)


### Bug Fixes

* add missing types for root render method ([0f52caf](https://github.com/measuredco/puck/commit/0f52caf0a3d77978d913b0915bbb23725fc94a3d))
* address ownerDocument permission error in Firefox ([c22b3a9](https://github.com/measuredco/puck/commit/c22b3a9838fad6c65c71091eb89bb9104b6aabaf))
* address prop name collision regression ([3a69ad4](https://github.com/measuredco/puck/commit/3a69ad4ac3e982340b3fcae6b5773240d88e7f92))
* correctly infer types when using Render with RSC ([ad7fbf4](https://github.com/measuredco/puck/commit/ad7fbf4bc7534cfb348dd7fdbac56b84b03552e3))
* don't jump to end of textarea fields during change ([36c27a9](https://github.com/measuredco/puck/commit/36c27a9c166affc83ecfd36f79974cb9990917c6))
* don't trigger clicks when dropping array items ([29a7f1d](https://github.com/measuredco/puck/commit/29a7f1df55f1eff6bee55ee7984ec7974a4feaec))
* don't trigger drag when interacting with array fields ([c7cd341](https://github.com/measuredco/puck/commit/c7cd34165cbde90ae0297ab79a1ea6852f9d9726))
* ensure ctrl+i interactive toggle hotkey works on Windows ([5db6f4d](https://github.com/measuredco/puck/commit/5db6f4d5f90b222423df363e9964ec344b9a0a7e))
* ensure renderDropZone provided correctly to root render ([b9ce5b7](https://github.com/measuredco/puck/commit/b9ce5b700056f985362d1f4a9125996badfcbdd7))
* fix RTL drag-and-drop behaviour ([28f518a](https://github.com/measuredco/puck/commit/28f518aad9da211042e3b51e52369b6c126c75d8))
* improve behaviour of array drag-and-drop ([565fabd](https://github.com/measuredco/puck/commit/565fabdaa78f92fdbb327d878d7142e0455f5e8a))
* provide empty readOnly object instead of undefined to root resolveFields ([8992a94](https://github.com/measuredco/puck/commit/8992a9476ab2bc3837bb986bbd3e1042babd81a8))
* provide updated props to resolveFields ([b7ff689](https://github.com/measuredco/puck/commit/b7ff6898618a1a30b07a85669f16e891db975ffd))
* reinstate padding for external field filters ([28ccfda](https://github.com/measuredco/puck/commit/28ccfdaf8b6c546464df18f1a3ebb2b8b6363dc7))
* tidy up stale items on drag cancellation ([de48691](https://github.com/measuredco/puck/commit/de48691b017a66c251616ba31861bd0b8816ef68))
* update styles for RTL ([23c8dda](https://github.com/measuredco/puck/commit/23c8dda031b0f50e30eacdb15d3a774bd8045879))
* use correct type for onChange args when overriding fieldTypes ([daff71e](https://github.com/measuredco/puck/commit/daff71ef726ad74d2b5628c466b2ddbaa1850160))




## [0.18.1](https://github.com/measuredco/puck/compare/v0.18.0...v0.18.1) (2025-01-24)


### Bug Fixes

* address React 19 peer dependency issues ([7649086](https://github.com/measuredco/puck/commit/7649086009deb9b9ceb5c4790e9c356b107a20b6))
* address ResizeObserver loop error ([d3e6b57](https://github.com/measuredco/puck/commit/d3e6b57190e3f6e8a4f857a45a51cbb060daf050))
* don't access selectedItem if undefined right after drop ([0573b18](https://github.com/measuredco/puck/commit/0573b182452f1c614a15f4125fefa81a880e37a2))
* ensure nested drag-and-drop works in Firefox ([f077a37](https://github.com/measuredco/puck/commit/f077a37158194867a10c1406252fe4a8f4f6974c))




## [0.18.0](https://github.com/measuredco/puck/compare/v0.17.1...v0.18.0) (2025-01-21)


### Features

* add action to select parent component to ActionBar ([7c910d5](https://github.com/measuredco/puck/commit/7c910d5272e8d6d77819ccb3280dff143ea848fd))
* add ActionBar.Label component for adding labels to action bars ([d2645fd](https://github.com/measuredco/puck/commit/d2645fd68a57b4c07bb8a3948ab6a845c2ce1988))
* add DropZone collisionAxis API for forcing collision direction ([ba68732](https://github.com/measuredco/puck/commit/ba687329c6fac5085f78768bff6eb37bfd842f33))
* add meta+i hotkey and previewMode state to toggle interactivity ([ec1eba5](https://github.com/measuredco/puck/commit/ec1eba58525e0245ee1214f8e401fa935c41fe23))
* add wrapFields prop to control padding of fields in Puck.Fields ([30f9a92](https://github.com/measuredco/puck/commit/30f9a926d2640a5bf9f65d8f4c2b6018e73f8719))
* control empty DropZone height with minEmptyHeight prop ([96f8340](https://github.com/measuredco/puck/commit/96f83408f4e6219dd35f5c29b204ef18e6d11d64))
* deselect item on viewport change ([e35585d](https://github.com/measuredco/puck/commit/e35585d767c857413ed5560f311d64bcab1218c4))
* forward the ref to the DropZone component ([676aa1c](https://github.com/measuredco/puck/commit/676aa1c974bd1260aaa687aa3edc2c54ef34e22b))
* introduce new drag-and-drop engine ([6ebb3b8](https://github.com/measuredco/puck/commit/6ebb3b8724b8ed56cc76d3ce166b1dc87ed07dad))
* reduce DropZone to height of items unless empty ([2b2595a](https://github.com/measuredco/puck/commit/2b2595a4e3e1c5ed8352cdfbec704290a1b396e8))
* remove `position: fixed;` from Puck layout ([5deb774](https://github.com/measuredco/puck/commit/5deb7744c07fca12e6aa44d058b495f65b298eab))
* support inline Drawers, deprecating unnecessary props ([f93b71e](https://github.com/measuredco/puck/commit/f93b71e1ad555184fc1a43f151ef1b161be148c6))


### Bug Fixes

* deselect item on delete ([f27871b](https://github.com/measuredco/puck/commit/f27871b5b63be8246cd281d93c49f7744d7e186f))
* improve heading-analyzer reliability ([ab6c018](https://github.com/measuredco/puck/commit/ab6c01862c35e27929b249a6d4bc4d2e9065dc12))
* never render FieldLabel with padding or borders ([a97b54f](https://github.com/measuredco/puck/commit/a97b54fd9427f3cd587951a0a30a95d56c5ff020))
* prevent propagation of custom ActionBar actions by default ([14909bd](https://github.com/measuredco/puck/commit/14909bdc5a782330af661a32bc80ab387ab12897))
* prevent user pollution of ActionBar styles ([e154cb7](https://github.com/measuredco/puck/commit/e154cb7c72c4fce735ccd60ccbdc862314f0ad26))
* render DropZones the same in Puck and Render ([d975aaf](https://github.com/measuredco/puck/commit/d975aaf90bf7d0956ccf1d6c377a6e20ba224801))
* reset resolveFields lastFields param when changing component ([7fead35](https://github.com/measuredco/puck/commit/7fead35fddf8fef49b41508a27c0e6be458ab2c4))
* select new item when dispatching duplicate action ([e3d0025](https://github.com/measuredco/puck/commit/e3d0025d08408103940c2f84c4524266288f38fd))
* set root DropZone to 100% height ([3d93f46](https://github.com/measuredco/puck/commit/3d93f46555372e83ead6f671e40970937802f5f4))
* stop actions from overflowing outside left of frame ([c036b6d](https://github.com/measuredco/puck/commit/c036b6d2036cc759e0a2eda6154bdec5b8a7784e))
* trigger iframe resize when closing devtools ([2c0b782](https://github.com/measuredco/puck/commit/2c0b782d41817caa2b6fae41fc52b1a7ccbb8d09))



## [0.17.4](https://github.com/measuredco/puck/compare/v0.17.3...v0.17.4) (2025-01-19)


### Bug Fixes

* handle null when provided to text/textarea/number fields ([e778246](https://github.com/measuredco/puck/commit/e778246e4ae8925f3d04962369a33a9c1a4b6589))
* improve stability of resolveFields API ([5c60d6a](https://github.com/measuredco/puck/commit/5c60d6a11512086f395ace352eec868fcd748f44))
* respect allow prop for existing items ([e414e34](https://github.com/measuredco/puck/commit/e414e34680acb7259dcee1da081060f5be923c02))




## [0.17.3](https://github.com/measuredco/puck/compare/v0.17.2...v0.17.3) (2025-01-13)


### Bug Fixes

* ensure items in root DropZone can be selected ([f61dd4a](https://github.com/measuredco/puck/commit/f61dd4a955e6c09d49f4fc1967e1cac5445697f7))




## [0.17.2](https://github.com/measuredco/puck/compare/v0.17.1...v0.17.2) (2025-01-10)


### Bug Fixes

* always respect history hotkeys inside iframes ([1134e8b](https://github.com/measuredco/puck/commit/1134e8b893e6828ad6407d570d987d4206e71566))
* clear old readOnly data when running resolveData ([3e91adc](https://github.com/measuredco/puck/commit/3e91adcf38a3a0f03537d592d15458f368048857))
* don't trigger move action if source / destination the same ([8a0b811](https://github.com/measuredco/puck/commit/8a0b811c79d7ec91cd6cc0007f05048680e42997))
* ensure parent is not null on first render in resolveFields ([773a81a](https://github.com/measuredco/puck/commit/773a81a330bc133b2d77b58d3ec99300cda1546e))
* factor in border when setting viewport size ([cc3b3b8](https://github.com/measuredco/puck/commit/cc3b3b8685e63cccba2c5a59e349a9394445f1f6))
* fix plugin-emotion-cache style sync when using initialData ([ac8679c](https://github.com/measuredco/puck/commit/ac8679c309a5b9b46670aa41b263b7369d155a46))
* fix readOnly behaviour in nested fields ([f6ab512](https://github.com/measuredco/puck/commit/f6ab51269d6f2acfb3a366ac5c33337158ac30ba))
* remove unnecessary transpile from next recipe ([a5f2d08](https://github.com/measuredco/puck/commit/a5f2d08efe6e3aec8c65ed1a1d59df26f45277be))
* respect min/max for freeform input in number field ([715710a](https://github.com/measuredco/puck/commit/715710a37c06ec6f255036c3e1334cf4fb0b2549))
* use correct label for array and object subfields ([c00ea00](https://github.com/measuredco/puck/commit/c00ea007f20242766786c57b915e43c65047a045))




## [0.17.1](https://github.com/measuredco/puck/compare/v0.17.0...v0.17.1) (2024-12-18)


### Bug Fixes

* respect falsey booleans types in select/radio fields ([3406b01](https://github.com/measuredco/puck/commit/3406b01d5ce00e8f2b885a1f951b5c96aa7a7989))




## [0.17.0](https://github.com/measuredco/puck/compare/v0.16.2...v0.17.0) (2024-12-18)

### Features

* add duplicate action to array field ([229cbdd](https://github.com/measuredco/puck/commit/229cbddb7eed513c8ac9a2e36e3af3b53ff28d7e))
* add renderFooter API to external field ([ccec96e](https://github.com/measuredco/puck/commit/ccec96e5ddf831fcd89a2af335449ad4cff1ea81))
* allow react elements in external field mapRow ([2f781de](https://github.com/measuredco/puck/commit/2f781de0a910a193f0a4bae795725119476f8e94))
* enable resolveFields to access parent data ([196227b](https://github.com/measuredco/puck/commit/196227bdf33ee678ce47b68fc624804448008cc1))
* list React 19 as supported peer dependency ([85e8cc1](https://github.com/measuredco/puck/commit/85e8cc1a6fcd29d9dd04e5e53c6e7f9a85f99959))
* track focused field in app state ([91bc97a](https://github.com/measuredco/puck/commit/91bc97a760d1750d65dedbbffee962a6c6ee8d60))
* upgrade next recipe to v15.1 ([8ef51c5](https://github.com/measuredco/puck/commit/8ef51c54e386528fca69be1e54b8a3ce69651bd0))
* use React 19 in next recipe ([6b3d97f](https://github.com/measuredco/puck/commit/6b3d97f9f3d0cc2283178ba6f4bda3b23f1f718a))


### Bug Fixes

* always run field resolvers when item change ([159d819](https://github.com/measuredco/puck/commit/159d819e0263f4e91bff8a83adfa404601850aa5))
* always update fields when resolveData runs ([39dd619](https://github.com/measuredco/puck/commit/39dd61934c15a452c59f26b0c6721802df0c1889))
* ensure radio fields are functional inside arrays ([7736294](https://github.com/measuredco/puck/commit/7736294d201f432799c0854be14b35edbad156d8))
* prevent field name collision causing hook render mismatch ([b51954a](https://github.com/measuredco/puck/commit/b51954a19875e1f3c87e0cdc03c10173e9786820))
* prevent flicker when using resolveData with arrays ([1be9b88](https://github.com/measuredco/puck/commit/1be9b886325a1515434759011e9e3514c583bd2e))
* provide better error when usePuck used inappropriately ([9991c07](https://github.com/measuredco/puck/commit/9991c079b2b7d8f18ecb42efc3ebc32e5d679b88))
* remove leading zeros in Number field ([5ba9399](https://github.com/measuredco/puck/commit/5ba9399e6546919ae744d7a4986b59faa1cd7aef))
* respect original value type in radio and select fields ([00ccd1d](https://github.com/measuredco/puck/commit/00ccd1df6513d2420c87cd136577e1df1ac9a9a3) and [6e5864a](https://github.com/measuredco/puck/commit/6e5864a5df01a52fb4e6b23132d68d4496f1e64e))




## [0.16.2](https://github.com/measuredco/puck/compare/v0.16.1...v0.16.2) (2024-11-07)


### Bug Fixes

* always treat data as immutable, fixing Redux issues ([51154e9](https://github.com/measuredco/puck/commit/51154e92b9022311afa79d086f69b70b6b8beb77))
* don't crash if component definition missing ([525b506](https://github.com/measuredco/puck/commit/525b5065563675d03d89cf090ce1f7fdf8ff0486))
* don't crash when selecting component with no config ([cb90f5d](https://github.com/measuredco/puck/commit/cb90f5d9109b340407bc9828fcd9761183d83e68)), closes [#671](https://github.com/measuredco/puck/issues/671)
* export missing resolveAllData lib in RSC bundle ([2f5fb7b](https://github.com/measuredco/puck/commit/2f5fb7ba69b61b857ad14720b93ceab026571aa7))
* fix RTL styles in action bar overlay ([bf5c5a3](https://github.com/measuredco/puck/commit/bf5c5a33081599331049063c79c7859aea96d0da))
* remove internal AutoField and FieldLabel components from bundle ([5df1597](https://github.com/measuredco/puck/commit/5df1597feede2f0ff922ad13297fd3acaf942da2))
* remove unused label from AutoField type ([18b6f1a](https://github.com/measuredco/puck/commit/18b6f1acae0186245817f35d4a27e6fdf4153ea1))




## [0.16.1](https://github.com/measuredco/puck/compare/v0.16.0...v0.16.1) (2024-10-07)


### Bug Fixes

* don't delete array field on click in FieldLabel ([ed282b9](https://github.com/measuredco/puck/commit/ed282b98ebe8574258444ba91716d8da7e8117d1))
* don't overwrite user input when field recently changed ([6126040](https://github.com/measuredco/puck/commit/61260407c5c87cc8c5c4fe925835f2d0d2a6f9ff))
* don't show field loader if no resolver defined ([8c706cd](https://github.com/measuredco/puck/commit/8c706cda92474114faffc7ed77f4b4024f75bf68))
* hide ActionBar.Group border when empty ([4345165](https://github.com/measuredco/puck/commit/4345165ee71b9762e6bca9baaa53d0c53144d0c4))
* prevent item click before iframe load ([61e1653](https://github.com/measuredco/puck/commit/61e1653020b9e272133c70fa9494f1a81782531e))
* prevent flash of field loader when no data changed ([20d7309](https://github.com/measuredco/puck/commit/20d730924d2f235871bfec4f0467a6652a518704))
* respect readOnly styles in AutoField ([9ffe817](https://github.com/measuredco/puck/commit/9ffe8176c1c437524fd9f7b2912f1a5846fc5e55))




## [0.16.0](https://github.com/measuredco/puck/compare/v0.15.0...v0.16.0) (2024-09-16)


### Features

* add actionBar override for adding component controls ([48ec0d7](https://github.com/measuredco/puck/commit/48ec0d786c7c589efc8b97152a5e1a4c065c0312))
* add automatic RSC export, replacing /rsc bundle ([d21eba6](https://github.com/measuredco/puck/commit/d21eba6185da8efcbcb5458eaaa5be6c321b3d1a))
* add isDisabled prop to Drawer.Item ([cad95b8](https://github.com/measuredco/puck/commit/cad95b887c6b06a41a2bacf28792fd4dbc808d72))
* add generic type to usePuck hook ([01703a9](https://github.com/measuredco/puck/commit/01703a95093413a57af1314b1f31cc34f85c38e0))
* add iframe override for style injection ([7cac376](https://github.com/measuredco/puck/commit/7cac3764d1f9336776b97fa08cbd48bec95e6a10))
* add initialHistory prop to Puck ([54b5a87](https://github.com/measuredco/puck/commit/54b5a871570120a3d0d55e96738746ec375dee0d))
* add onAction API to track and react to state changes ([c7007ac](https://github.com/measuredco/puck/commit/c7007acab334ec2d08f95669d685edb8c3947bcc))
* add permissions API ([a43914d](https://github.com/measuredco/puck/commit/a43914dc36e70c5596c186d3c63b9497949365a9))
* add plugin for injecting Emotion cache ([f8a88b9](https://github.com/measuredco/puck/commit/f8a88b9c2447c76f2f7a00ce5705f8fae07be58c))
* add resolvePermissions API ([f0655f0](https://github.com/measuredco/puck/commit/f0655f08a96b853cf18d681025f40e8d30df3013))
* add waitForStyles option to iframe config ([bc81d9c](https://github.com/measuredco/puck/commit/bc81d9c7de671fea0bc155911ee11598a1b920c2))
* call resolveData when new item inserted ([3298831](https://github.com/measuredco/puck/commit/329883165c9e428b9f291add7b6009ba29680146))
* don't mandate fields for optional props ([5a219ef](https://github.com/measuredco/puck/commit/5a219eff0c2f4763ec1d9f48f45fe684e6482b8f))
* export ActionBar component for use in overrides ([04fd6c5](https://github.com/measuredco/puck/commit/04fd6c5c7a65fc3ec9a05da277865341efe229af))
* infer Data type from user config ([50045bb](https://github.com/measuredco/puck/commit/50045bbda2cf3b64e37e0e6bedcfce14f680cda1))
* make ID optional in History type (BREAKING CHANGE) ([d917229](https://github.com/measuredco/puck/commit/d917229ae4f553bb54a420e1c708c1a509431106))
* provide ES Module build ([ff9076b](https://github.com/measuredco/puck/commit/ff9076b9d24d030ad47619b6a359b1f120422d70))
* rename history.data to history.state (BREAKING CHANGE) ([b09244c](https://github.com/measuredco/puck/commit/b09244c864fd049ceeda2b7eb20ec6cab9f40054))
* show spinner if iframe load takes over 500ms ([cfecf54](https://github.com/measuredco/puck/commit/cfecf5499d06b8e90438dc151e5e915da06ccb87))
* streamline usePuck history API ([c8b2807](https://github.com/measuredco/puck/commit/c8b28075fde0081b8ac824eb256114c9b8836f9e))
* upgrade "next" recipe to typescript@5.5.4 ([60fe631](https://github.com/measuredco/puck/commit/60fe63113f8ad8bbce52d8457ee4372aa4b09509))


### Bug Fixes

* add favicon to next recipe to prevent Puck 404 ([2c52d27](https://github.com/measuredco/puck/commit/2c52d271c6c20e9368a59eb1f2a5df184cef72bc))
* add missing readOnly state to External fields ([bf1449d](https://github.com/measuredco/puck/commit/bf1449dd8b299a4f469986d94f8986b02b79a688))
* always record history on component insert ([88c5ab6](https://github.com/measuredco/puck/commit/88c5ab6b545ecbd045de3ee0d43801c48f50e8b0))
* don't cache /edit route in Next recipe ([94f16b2](https://github.com/measuredco/puck/commit/94f16b25efea86ff475683d3a21f5937e07b201c))
* don't submit buttons if Puck used in form ([f761e5f](https://github.com/measuredco/puck/commit/f761e5fed63fc698e3a9d6ba94607364ed46f31b))
* ensure demo types are satisfied with TypeScript@5 ([958dc25](https://github.com/measuredco/puck/commit/958dc255ac5d285f98b6b592df677883b74e2830))
* export missing Plugin type ([eb42734](https://github.com/measuredco/puck/commit/eb427343fd58752861cac850f59c1098cf473f50))
* fix crash if component in data is missing from config ([0daf478](https://github.com/measuredco/puck/commit/0daf478d9ad8b14d2844ff6ae2db9bd72970d680))
* improve resiliency of iframe CSS for some frameworks, like Mantine ([538cb05](https://github.com/measuredco/puck/commit/538cb05606126c338e97c047b97065463e618d36))
* make Config and Data types more robust ([6bcf555](https://github.com/measuredco/puck/commit/6bcf555da74d54d70f00f37878d35fa166bb7e4c))
* prevent infinite loop when using plugins with some frameworks ([3870871](https://github.com/measuredco/puck/commit/38708716f32d65a9131b87fe664ba96b32aead15))
* prevent Tailwind from clashing with viewport zoom select ([9151255](https://github.com/measuredco/puck/commit/91512553430b295c37c80a935f0db929bb37870c))
* remove body margin in remix recipe ([0898b26](https://github.com/measuredco/puck/commit/0898b26cd021680dfb77a439b04140ce2fb8cb2c))
* resize viewport when changed via app state ([14419ec](https://github.com/measuredco/puck/commit/14419ecf1c606e6fa0d6d9c5198401eb01bc72dd))
* resolve fields when switching between items of same type ([a3518ca](https://github.com/measuredco/puck/commit/a3518ca8560ba9fcdbe5086220490920ecf24fc0))
* return lastData as null instead of empty object in resolvers (BREAKING CHANGE) ([648eb92](https://github.com/measuredco/puck/commit/648eb92b3d2c5be8f5fc99a22db5eff64cefb155))
* show warning if heading-analyzer styles aren't loaded ([4e7110b](https://github.com/measuredco/puck/commit/4e7110b591a4a12e2b3c89eb1fa98faf5f9338d4))
* use correct color in FieldLabel labels ([b0469a1](https://github.com/measuredco/puck/commit/b0469a1134ac8eafc9a3b16de4d7805241127947))




## [0.15.0](https://github.com/measuredco/puck/compare/v0.14.2...v0.15.0) (2024-05-30)


### Bug Fixes

* align Drawer behaviour and docs with expectation ([e2cd445](https://github.com/measuredco/puck/commit/e2cd445f9d3abccca5b3daf95a4d92774a1dd47a))
* animate loader in iframe ([151a267](https://github.com/measuredco/puck/commit/151a2675bf8e700368aad0652192bc7d9fd2bbd6))
* don't inline link stylesheets for more predictable behaviour ([c0a331d](https://github.com/measuredco/puck/commit/c0a331de31c2d59e0e21ef342eb4c821850e10be))
* don't overflow external inputs inside arrays/objects ([42ef582](https://github.com/measuredco/puck/commit/42ef582cac949f8a24f9cdad204baf24d808b410))
* don't throw warning when user is correctly specifying root props ([46aa8ff](https://github.com/measuredco/puck/commit/46aa8ff3a68dcbd4aec4ebfef246d400469ca4d4))
* don't unintentionally use read-only styles in external fields ([acaf727](https://github.com/measuredco/puck/commit/acaf72746c2c82881a753dab6350161c774cd13f))
* fix defaultProps for root ([9a1cc7c](https://github.com/measuredco/puck/commit/9a1cc7c925f0b8a79b5f523fc7c8a6d6afdc2067))
* infer correct value types in Custom fields ([5c8c0e1](https://github.com/measuredco/puck/commit/5c8c0e1bfa9ca4da04e1cfac83c7a3ab5883fc5c))
* position field loader relative to sidebar, not fields ([2e8936e](https://github.com/measuredco/puck/commit/2e8936e4f416b0a04b273250cf3848447fb7e045))
* show external field modal when using custom interfaces ([6e97a0e](https://github.com/measuredco/puck/commit/6e97a0e18aea72581ba466e8cf3f87e60f3a65f3))
* show field loader when using field overrides ([8ccfa4c](https://github.com/measuredco/puck/commit/8ccfa4c0c3477b8e1d2db2fcc7a352b353643095))
* still load iframe if styles fail to load ([3e56bc1](https://github.com/measuredco/puck/commit/3e56bc1816c40c555de2eb28148baf5dcdcacbea))


### Features

* add AutoField component for using Puck fields inside custom fields ([106028b](https://github.com/measuredco/puck/commit/106028b59bb1a02756645bb76ce400adc398430d))
* add isEditing flag to `puck` object prop ([13bb1bd](https://github.com/measuredco/puck/commit/13bb1bdf03a62000c07a7d49a56ad09c1433fda0))
* add resolveFields API for dynamic fields ([0a18bdb](https://github.com/measuredco/puck/commit/0a18bdb9387f302565f74fa30f09fd912ea0769b))
* allow data prop to accept an empty object ([aedd401](https://github.com/measuredco/puck/commit/aedd401dd415e9d7dc1cbd6e33e59f5264180374))
* bump next recipe to Next@14 ([47a27ed](https://github.com/measuredco/puck/commit/47a27ed2c6aee80d4093975c399d96b950cb6956))
* enable override of publish button (breaking change) ([480467a](https://github.com/measuredco/puck/commit/480467ae2e06ae4d36c4fd67f75757557058f561))
* expose previous data to resolveData via `lastData` param ([dd7051e](https://github.com/measuredco/puck/commit/dd7051e8fbb3770714100c92f7f5c69d0be5dab6))
* replace history chevrons with undo/redo icons ([91dff22](https://github.com/measuredco/puck/commit/91dff227c382ddd5ad183cd69cb4d2fabd56f093))




## [0.14.2](https://github.com/measuredco/puck/compare/v0.14.0...v0.14.2) (2024-04-17)


### Bug Fixes

* add DropZone iframe compatablity mode for bug in Safari 17.2, 17.3 and 17.4 ([47496c2](https://github.com/measuredco/puck/commit/47496c25407b1a5fdb88333e1fbf5416efc51c50))
* check for optionality to handle race condition when dragging ([4dbd487](https://github.com/measuredco/puck/commit/4dbd487f6055ea3d38ab7de54e29bd6e4ffe84ce))
* defer iframe event binding until contentWindow is ready ([268ea53](https://github.com/measuredco/puck/commit/268ea53f969a892843c026e5ba9ced15edb9f801))
* don't crash if component is missing after referenced in category ([dc93789](https://github.com/measuredco/puck/commit/dc93789c4311e386b022b5c3d7c8595c00a8a212))
* don't force height of DropZones in custom interfaces ([046c255](https://github.com/measuredco/puck/commit/046c2557b6baa62994380c547ad006759b02cc92))
* don't query iframe document if not ready ([2b2ef32](https://github.com/measuredco/puck/commit/2b2ef32555387d4656872674289740b73dcd406b))
* don't throw undefined error if rapidly zooming browser in some environments ([282a8b0](https://github.com/measuredco/puck/commit/282a8b0d9f170ea95f5717c8b2ad08ec487d7d8f))
* fix drag-and-drop when entire Puck component used inside an iframe ([23db292](https://github.com/measuredco/puck/commit/23db292b9a2caa8e65117c08706843d3ed343454))
* fix support for boolean values in select fields ([c4a66ad](https://github.com/measuredco/puck/commit/c4a66addacd9acdc1f042ac54831b7dac38f2757))
* make draggable outlines consistent ([9008b70](https://github.com/measuredco/puck/commit/9008b70ed63155140a5241914c86456a2d4c9388))
* prevent grid layout issues in generated apps ([5c05f94](https://github.com/measuredco/puck/commit/5c05f945679f7f2c0edd5d99c652989c00920ac6))
* reflect value changes made via resolveData in radio fields ([9a7066f](https://github.com/measuredco/puck/commit/9a7066f4e837575aecbde0de4dd2bc96328a2a15))
* remove peer dependencies causing warnings ([041ca64](https://github.com/measuredco/puck/commit/041ca64a6fe96539681d88e9cd0e66a6ac27a6ce))
* resolve security warning when additional iframes present ([03ab0bd](https://github.com/measuredco/puck/commit/03ab0bd3314a4d6dfc863bdcf5f23246331b959b))
* use 100% width for Puck preview when iframe disabled ([#414](https://github.com/measuredco/puck/issues/414)) ([64303c8](https://github.com/measuredco/puck/commit/64303c8510df15b6ca94bc7be0294d9746193b35))
* use more custom interface friendly styles for iframes ([e6e01c6](https://github.com/measuredco/puck/commit/e6e01c6ec5b2bee9ab3a4a9425276ad4f1840c20))


### Performance Improvements

* add API for disabling auto-scroll due to performance issues ([3e5599e](https://github.com/measuredco/puck/commit/3e5599e687643094f7c80d0ce99a7c6a0c947e28))
* batch load initial iframe styles ([e585f20](https://github.com/measuredco/puck/commit/e585f2090c0457d124006bd6349a69c9883d3c03))
* don't lock main thread when iframe styles changed ([e529e85](https://github.com/measuredco/puck/commit/e529e8525eb758025261577c424d8601c1ed8daf))
* reuse host window styles in iframes ([e7fe7e0](https://github.com/measuredco/puck/commit/e7fe7e0d7577bae1ab90650e5d7986d6745fbaf9))




## [0.14.1](https://github.com/measuredco/puck/compare/v0.14.0...v0.14.1) (2024-04-01)


### Bug Fixes

* don't throw undefined error if rapidly zooming browser in some environments ([282a8b0](https://github.com/measuredco/puck/commit/282a8b0d9f170ea95f5717c8b2ad08ec487d7d8f))
* prevent grid layout issues in generated apps ([5c05f94](https://github.com/measuredco/puck/commit/5c05f945679f7f2c0edd5d99c652989c00920ac6))
* remove peer dependencies causing warnings ([041ca64](https://github.com/measuredco/puck/commit/041ca64a6fe96539681d88e9cd0e66a6ac27a6ce))




## [0.14.0](https://github.com/measuredco/puck/compare/v0.13.0...v0.14.0) (2024-03-28)


### Features

* add "name" prop to componentItem override ([45bbceb](https://github.com/measuredco/puck/commit/45bbceb1d2805455fa38f5bce91d892f6acacfbf))
* add `min` and `max` APIs to array fields ([53b7937](https://github.com/measuredco/puck/commit/53b7937675303bc3cf282bbd005309c8c276d1b2))
* add API to opt-out of iframes ([03dd90b](https://github.com/measuredco/puck/commit/03dd90b98c8a72e2af3baa8fc436ff7d4f4c7449))
* add Contentful field package ([d944288](https://github.com/measuredco/puck/commit/d94428819a958b4f566e5d0e8cd29b3bf1107881))
* add filter fields to ExternalFields ([7a55053](https://github.com/measuredco/puck/commit/7a5505374953ab8004720a9c91d8975ad3df94e5))
* add iframe support ([1d0bf57](https://github.com/measuredco/puck/commit/1d0bf57894200edc6b9a883a41937f7a3141074f))
* add `min` and `max` APIs to number fields ([4932a6e](https://github.com/measuredco/puck/commit/4932a6ef1b640410b3291cc67fb1f3153c04eac4))
* add `selectedItem` convenience param to usePuck ([c1224d0](https://github.com/measuredco/puck/commit/c1224d026d37bbbcf1366804947771902e29d9bb))
* add viewport switching ([ccf9149](https://github.com/measuredco/puck/commit/ccf91495f3a9f20a37051ba407abd992095a7b4d))
* enable mapping of table rows in external fields ([d50c56e](https://github.com/measuredco/puck/commit/d50c56e829b482f13c5ec08acc76eed70494d3cf))
* expose history via usePuck hook ([1b907cb](https://github.com/measuredco/puck/commit/1b907cba506dda7a2b1fe201a426e1c4bcfffecc))
* hide array Add button when array is readOnly ([4e27c3f](https://github.com/measuredco/puck/commit/4e27c3f18a0fa9a97dcd5fd240b01a133d7cb153))
* improve touch, contrast & keyboard a11y ([f975d87](https://github.com/measuredco/puck/commit/f975d87c5c2823e1f27161e6b6aa76a0d3fafad2))
* refine UI for external field modal ([6a2afa1](https://github.com/measuredco/puck/commit/6a2afa1abbd33a062bca6962b547b5534ed93036))
* support custom component labels via the new label param ([712fb8e](https://github.com/measuredco/puck/commit/712fb8eeac0502b2baea4c86a4494eb8f924ed82))
* update to 12-tint color palette ([d43da58](https://github.com/measuredco/puck/commit/d43da581da3bd79324ed846ca5c5cd0c86469b23))
* use InterVariable font ([88532fb](https://github.com/measuredco/puck/commit/88532fbc248a3a171dc2e26906dcd68ba5979570))


### Bug Fixes

* avoid FOUC of side bars on mobile ([83be956](https://github.com/measuredco/puck/commit/83be95643e4dcb96e30d0e6a9dbfe03c60f83002))
* correctly infer objectFields type from props ([e8991cc](https://github.com/measuredco/puck/commit/e8991cc90d5fd899a3357f6d1f50b382d90aad23))
* don't attempt to resolve data if component missing from config ([cc7d391](https://github.com/measuredco/puck/commit/cc7d391503cce3cbdbad9b769b5fb0fca6610cb0))
* don't flash nested DropZones on first drag ([38c3dc4](https://github.com/measuredco/puck/commit/38c3dc418e047b7f1218c8c50cf3ba3f2e6b74d8))
* don't unexpectedly show DropZone background ([2001fa2](https://github.com/measuredco/puck/commit/2001fa2bb6e69451f68cd94a3f872a0f83ff2b4b))
* ensure font loads for ExternalFields ([e9bca75](https://github.com/measuredco/puck/commit/e9bca751926db8a88f4f6ad2bc135a10705987d9))
* ensure heading-analyzer updates when content changes ([d75df7a](https://github.com/measuredco/puck/commit/d75df7a5c8ab365a4ef0de6c81c707e706433383))
* ensure select and radio fields support read only arrays ([cbdf66d](https://github.com/measuredco/puck/commit/cbdf66d348acc3461f321956c80dbc87a896069e))
* fix array field when used on root ([95280e6](https://github.com/measuredco/puck/commit/95280e686409342d3be3d68ec2acb90f7cfc570e))
* fix renderDropZone method in editor ([2c738dd](https://github.com/measuredco/puck/commit/2c738dd3761596925caecfee2bfdcb2960a10b83))
* lower opacity of DropZone background to support dark backgrounds ([9a5c0b8](https://github.com/measuredco/puck/commit/9a5c0b8ec57e41eeda3592d9a45ab00907a7a313))
* make getItemSummary optional on ExternalFields, as expected ([26bc4ff](https://github.com/measuredco/puck/commit/26bc4ff320cc93bf4376edd190b3779774f2f87c))
* only import Puck CSS on editor pages ([22a4182](https://github.com/measuredco/puck/commit/22a41823559d36fd06842496d59788004b316797))
* prevent unexpected field behaviour when pressing "Enter" key ([bf4f527](https://github.com/measuredco/puck/commit/bf4f5277f5d5cbf7a7ccf473130055575a5e983a))
* use strict return type for resolveData ([777cd3c](https://github.com/measuredco/puck/commit/777cd3c02a0b0ec8df1b81e19654b1179b56cb53))
* vertically align field icons ([fa92436](https://github.com/measuredco/puck/commit/fa924363c8f2e5ad3d866793ba34a1b488250ce5))



## [0.13.1](https://github.com/measuredco/puck/compare/v0.13.0...v0.13.1) (2023-12-23)


### Bug Fixes

* don't render plugins twice when using React strict mode ([f70c722](https://github.com/measuredco/puck/commit/f70c7222dd844257fab791fb4d5f8cf90e3361df))
* replace crypto with uuid lib ([a84e06f](https://github.com/measuredco/puck/commit/a84e06feec977bca1ac7e08b6e55ba8afe0141dc))




## [0.13.0](https://github.com/measuredco/puck/compare/v0.12.0...v0.13.0) (2023-12-19)


### Features

* add "ui" prop to Puck to set the initial state ([71f8b2f](https://github.com/measuredco/puck/commit/71f8b2f1143b9774fd763a8f5a3685957474237b))
* add APIs to restrict components dropped in DropZones ([28f24f9](https://github.com/measuredco/puck/commit/28f24f927a2d1c378834f124e85abfcc2267a0d7))
* add data migration API ([f987324](https://github.com/measuredco/puck/commit/f987324804d59e55a3a5e6770389305d88f39194))
* add generic Config type to Puck and Render components ([1c4b97f](https://github.com/measuredco/puck/commit/1c4b97f0a8487785b5a677a2a1ba168b292e5ca4))
* add object field type ([243278b](https://github.com/measuredco/puck/commit/243278bb01e34de6123a47d902fcc58ea7678642))
* add Puck class to outer div ([0698a12](https://github.com/measuredco/puck/commit/0698a127e093cb2cf66fa35dafca80ebd4c73f89))
* add search to external fields ([fe3b439](https://github.com/measuredco/puck/commit/fe3b4394c7464eeab69e1af5a96bd525bd15872a))
* add transformProps lib to migrate component props ([1ec2a78](https://github.com/measuredco/puck/commit/1ec2a78968e10efc5666aaf994b6feea6c820449))
* add usePuck hook ([13f3ccb](https://github.com/measuredco/puck/commit/13f3ccbd314e5a82f5a509c713ad34d3d0614b34))
* introduce UI overrides API ([8a7c325](https://github.com/measuredco/puck/commit/8a7c3252d8aed2c160e390c1ba7c411d8b884b6f))
* make onPublish prop optional ([60f317f](https://github.com/measuredco/puck/commit/60f317f75bb1a18bd59819d1323c45266334138c))
* remove renderComponentList in favour of overrides API ([97f65e3](https://github.com/measuredco/puck/commit/97f65e3f0411abab66a72ea3c9ecd485cd941b4e))
* replace existing plugin API with plugin overrides ([46cca26](https://github.com/measuredco/puck/commit/46cca26c879a2ae53cf3e668f1dad37bb480bd84))
* support compositional Puck ([22f053f](https://github.com/measuredco/puck/commit/22f053fa6209735c27b172eb625ea25d9df4bb3d))
* track isDragging in app state ([841ae12](https://github.com/measuredco/puck/commit/841ae126d3f5e8a9e40c064b69d5ee675169e4cd))


### Bug Fixes

* don't crash when loading external data into array field items ([d13d00b](https://github.com/measuredco/puck/commit/d13d00b67a7106889a0fc3beae94fa9c2e5bfcc3))
* enable user to pass in config without casting ([ee211e2](https://github.com/measuredco/puck/commit/ee211e2a3ae6fbcb3d2b12316172e49f11fecd1e)), closes [#185](https://github.com/measuredco/puck/issues/185)
* fix broken nested array fields ([7a3949f](https://github.com/measuredco/puck/commit/7a3949f7f10b2323504b31bcae9a9aa5d46f4074))
* fix initial UI state on mobile ([3aa0057](https://github.com/measuredco/puck/commit/3aa005740b650879d95318a01ac9e2949ec5e9d8))
* prevent pollution of global styles into component overlay ([3fcf8e3](https://github.com/measuredco/puck/commit/3fcf8e3f9975a14d8bc355e025585c9f55f233b1))
* record history when a user selects an item ([3a649c9](https://github.com/measuredco/puck/commit/3a649c9922cc0a6c8c6c2b96f5fbe44bd3a6176a))
* remove packages triggering superficial security warning ([0f52b61](https://github.com/measuredco/puck/commit/0f52b610769550b3365ab91f856b264d02d005c2))
* respect label in radio fields ([fe550d7](https://github.com/measuredco/puck/commit/fe550d795eed20ce3a3004a2e7c8dfdbaca0b67d))
* set aria-label on all loaders ([9adca27](https://github.com/measuredco/puck/commit/9adca2774dae5e532134be76de9c79e0b4af751c))
* stop color pollution in external field modals ([2e1b5ef](https://github.com/measuredco/puck/commit/2e1b5ef330ebbddee8c44b5002be65c2361fda4f))
* use correct title path in recipes ([60244ba](https://github.com/measuredco/puck/commit/60244ba5637d889530ae646986b1890c6b89efea))
* watch puck.config.tsx in Remix recipe ([ecb276c](https://github.com/measuredco/puck/commit/ecb276c39fd3cf03d524b221b3f34b3a8df99823))




## [0.12.0](https://github.com/measuredco/puck/compare/v0.11.0...v0.12.0) (2023-11-23)


### Features

* support React server components via @measured/puck/rsc bundle ([90ac161](https://github.com/measuredco/puck/commit/90ac161513d0c8c84f6b2bb968f7e5400c732a0a))
* add remix recipe ([f882878](https://github.com/measuredco/puck/commit/f882878e081b44a2b0bd1f773114f3c35b8398b1))
* add explicit rsc and css exports ([0b6a527](https://github.com/measuredco/puck/commit/0b6a52792628225d392775ba6b3d549aab5be59b))
* improve responsive behaviour ([889b4c7](https://github.com/measuredco/puck/commit/889b4c7a91f1a9b95c9fd7d4b3cdb20b2ee4946b))
* add visibility toggle for right-hand sidebar ([3d6c5d4](https://github.com/measuredco/puck/commit/3d6c5d479f2237400e0dc7cab6d5ed5773058d3b))
* allow custom fields to set UI state during onChange ([388793c](https://github.com/measuredco/puck/commit/388793c9b0ac27b14a538b70357abd0dc4f26779))
* expose field "id" to custom fields ([849161e](https://github.com/measuredco/puck/commit/849161ef0e2e2e01f6a1b9f517ba4bcc66cf6bd1))
* improve IconButton accessibility ([4c71d39](https://github.com/measuredco/puck/commit/4c71d39d1138f0fc823ada04710d0057433475b7))
* add new monospaced font stack ([c484ea6](https://github.com/measuredco/puck/commit/c484ea6bae5e6283bf82860e9a84413e60720163))
* tweak Field input focus state ([8012afd](https://github.com/measuredco/puck/commit/8012afdd9be2e3bc96185b4f0208b3ebdef0ed21))


### Bug Fixes

* don't enable style pollution of input background color ([bb1a76b](https://github.com/measuredco/puck/commit/bb1a76b314f744b76197cb670c448abc7896a45e))
* don't reset array item labels when changing order ([57563e1](https://github.com/measuredco/puck/commit/57563e1da1826dbfa08a32fabb27153e4618ab40))
* ensure field icon and label are vertically aligned ([caa40e0](https://github.com/measuredco/puck/commit/caa40e0499570831e5779f9a6a031e38f054c3f8))
* ensure root render receives props from latest data API ([abb6ff1](https://github.com/measuredco/puck/commit/abb6ff1bd53d7f93ef0ac287290712943ca2c1ce))
* export missing PuckAction type ([f22f32d](https://github.com/measuredco/puck/commit/f22f32dc5569eaa9cea90f896cf4cdafc59940fe))
* fix rootResolver behaviour when using recommended root data API ([5c13de5](https://github.com/measuredco/puck/commit/5c13de58a335f2b4c81f2b424fee8b4a356fb563))
* migrate to @hello-pangea/dnd to fix defaultProps warning ([2c97362](https://github.com/measuredco/puck/commit/2c97362e15f5d2046dc216c6e5fc25f5199d0a37))
* prevent inconsistent default input font-size ([99f90b3](https://github.com/measuredco/puck/commit/99f90b3ba81bf286758685f7c2a457abaffeb2e1))
* show a default value when no placeholder set on external fields ([e30b5b6](https://github.com/measuredco/puck/commit/e30b5b69b6a9f6467db4b05c55ffdc5f1ecebcfb))
* stop `zones` getting wiped out if data prop updated ([0c4514f](https://github.com/measuredco/puck/commit/0c4514fcde24d0ba585fea0981d73e7a8188840f))
* stop style pollution into array field items ([03b89d5](https://github.com/measuredco/puck/commit/03b89d568ded7cae6eb34e0dcf45e60eb758b552))
* stretch external field table to width of modal ([f6d89f6](https://github.com/measuredco/puck/commit/f6d89f69f1a24f94479365b9d955a3ea60b17b8d))
* use correct root data API in next recipe example database ([b598144](https://github.com/measuredco/puck/commit/b5981446ee64a3b5451eb17b8d42263f42df179f))
* use Inter font in button type Buttons ([1973847](https://github.com/measuredco/puck/commit/19738473723c49ddb0d764864283bf597280c7c5))




## [0.11.3](https://github.com/measuredco/puck/compare/v0.11.2...v0.11.3) (2023-11-12)


### Bug Fixes

* ensure field debounce doesn't sporadically lock preview update ([487ab83](https://github.com/measuredco/puck/commit/487ab83e2ffa42ad93ab90c2eadea9486008de9b))
* stop generator crashing on Windows due to commits with single quotes ([ab9d43f](https://github.com/measuredco/puck/commit/ab9d43f08113ef1c3f6fa30f7f87ba881b74a1e1))




## [0.11.2](https://github.com/measuredco/puck/compare/v0.11.1...v0.11.2) (2023-11-11)


### Bug Fixes

* add missing database.json back to generated next recipe ([3c15255](https://github.com/measuredco/puck/commit/3c15255a8f7f5e77c047ce853382f92715045c8d))




## [0.11.1](https://github.com/measuredco/puck/compare/v0.11.0...v0.11.1) (2023-11-11)


### Bug Fixes

* include next recipe in generator ([5b833ef](https://github.com/measuredco/puck/commit/5b833efd0f87b21e57303256e89f1456254b82bf))




## [0.11.0](https://github.com/measuredco/puck/compare/v0.10.0...v0.11.0) (2023-11-03)


### Bug Fixes

* don't flicker root DropZone when dragging ([358435c](https://github.com/measuredco/puck/commit/358435c36a216e6749be73599ab631ffdd8069c8))
* ensure array fields can render if value is undefined ([47ab3c9](https://github.com/measuredco/puck/commit/47ab3c971e4aafec443e8b4d73e7c921dec38ac6))
* isolate external field modal from high z-indexes ([fdf97c7](https://github.com/measuredco/puck/commit/fdf97c7f6da6035447e9b7deec9019217875c4ef))
* make Field types required based on type ([daf36ac](https://github.com/measuredco/puck/commit/daf36ac8864dc1b0f324c3e08294f9d62568acf2))
* prevent global style pollution in external fields ([429731d](https://github.com/measuredco/puck/commit/429731dbb77de2d8ca1c4a88832c73294a9b141c))
* prevent long header titles from rendering over actions ([4613df4](https://github.com/measuredco/puck/commit/4613df47fdde9ac796419f02a2d9f649892b3d35))
* use correct heading component for external inputs ([462266d](https://github.com/measuredco/puck/commit/462266d069b04a3de09684af4b816e1d1dac46dc))


### Features

* add categories API for grouping components in side bar ([594cc76](https://github.com/measuredco/puck/commit/594cc76c763a7d2ce06cd78f34a4683c0fa89f8e))
* add read-only states to all field types ([746d896](https://github.com/measuredco/puck/commit/746d896996f01d086d557f2a2918f4e76e3f5b35))
* add icon to external fields ([a3a018b](https://github.com/measuredco/puck/commit/a3a018bb1876fd4b831676e8ff848052ec7ba527))
* add loading state to external field modal ([5b4fc92](https://github.com/measuredco/puck/commit/5b4fc92f96caf83148fa335321dad3a5f1a65789))
* add lock icon when field is read-only ([a051000](https://github.com/measuredco/puck/commit/a05100016fed1e368be333f2707087b152fb4c0e))
* add mapProp API to external fields ([86c4979](https://github.com/measuredco/puck/commit/86c49795ac1d198836242772ec01bd755ee699c8))
* add renderComponentList API ([ec985e3](https://github.com/measuredco/puck/commit/ec985e3d28a4915f8fb2816b9599060d20bbf621))
* add resolveData API for modifying props dynamically ([c1181ad](https://github.com/measuredco/puck/commit/c1181ad9b1de6cc036cfedebcc3e57334ef62196))
* deprecate adaptors in favour of new external field APIs ([7f13efc](https://github.com/measuredco/puck/commit/7f13efc769ddc77fc7931a8191796f017354e89a))
* deprecate magic adaptor _data behaviour in favour of resolveData API ([4ee31e7](https://github.com/measuredco/puck/commit/4ee31e7c0d93578976b2b655e0c56477571f8341))
* deprecate props under root in favour of `root.props` ([7593584](https://github.com/measuredco/puck/commit/759358446e01b4320e55156dbe849d264e4e7edf))
* make external field more consistent with other fields ([5bfbc5b](https://github.com/measuredco/puck/commit/5bfbc5bf71b0af72e97e24b5828ad7009836e51e))
* update next recipe to render to static ([a333857](https://github.com/measuredco/puck/commit/a33385783022179e12ef3f732cb4e2e387985030))


### Performance Improvements

* cache data between fetchList calls in external fields ([04b7322](https://github.com/measuredco/puck/commit/04b7322d5fa5a5506b853c3dcde7a0b47d5b21bc))
* improve render performance of fields ([d92de7f](https://github.com/measuredco/puck/commit/d92de7fe6eaf081deff139b010e4741d07ba6114))




## [0.10.0](https://github.com/measuredco/puck/compare/v0.9.0...v0.10.0) (2023-10-18)


### Bug Fixes

* ensure layer tree consistently shows selected item ([6a9145c](https://github.com/measuredco/puck/commit/6a9145c23b1461e46f3568e9a107d3c429aa87d2))
* only render strings or numbers in external adaptors ([3c337be](https://github.com/measuredco/puck/commit/3c337be171c5fa6ad464f5a16fcb7f17e9b1a4f9))
* prevent style pollution for select fields ([fa7af7d](https://github.com/measuredco/puck/commit/fa7af7da9d770d5e790944d421dc0a30f0da84b1))


### Features

* align component list UI with refreshed array fields ([74cd3a7](https://github.com/measuredco/puck/commit/74cd3a7ba9100e5e7e1a5e626511906fbdf75b98))
* enable drag-and-drop of array items ([12800f8](https://github.com/measuredco/puck/commit/12800f816b872d614ed50c9fcf3179f41dbbbfb2))
* expose state dispatcher to plugins ([e94accb](https://github.com/measuredco/puck/commit/e94accb22bae2afbb30728e0d58f8c6a558b3e39))
* expose state to plugins, removing data ([89f9f2e](https://github.com/measuredco/puck/commit/89f9f2e3a526a1459d14bdd7301f2c761f7c340d))
* expose state to renderHeader, removing data ([29ddaaf](https://github.com/measuredco/puck/commit/29ddaaf376b57134be46a489e7686978d0465669))
* record application state in undo/redo history ([0f2d7c5](https://github.com/measuredco/puck/commit/0f2d7c55aebe898925084ff27d5af97e9a7b9090))
* refresh UI for array fields ([5ef8a96](https://github.com/measuredco/puck/commit/5ef8a96b6952d450927a499f1ec0f93610450864))




## [0.9.0](https://github.com/measuredco/puck/compare/v0.8.0...v0.9.0) (2023-10-06)


### Bug Fixes

* fill empty space under puck-root ([d42cfb6](https://github.com/measuredco/puck/commit/d42cfb69aa7c7e0b70321b4b509efd3c6fdbe393))
* prevent global pollution of Heading color ([327721c](https://github.com/measuredco/puck/commit/327721c705546a538fedd0a3b794926605cd58fc))
* render `icon` if provided to FieldLabel ([ae01891](https://github.com/measuredco/puck/commit/ae01891ce55b844c5a76a20faa33e5df16c2d593))
* reset stacking context for each item ([a826492](https://github.com/measuredco/puck/commit/a826492ee7bab57710edad6b7df498f294398606))


### Features

* add undo/redo history ([222697e](https://github.com/measuredco/puck/commit/222697e5b9e95e3b28d0dfd9ac0b85f46c56068e))
* make actions sticky to component scroll ([f3e5b50](https://github.com/measuredco/puck/commit/f3e5b50d921f0c75978f805a7d44b88511fbaf69))




## [0.8.0](https://github.com/measuredco/puck/compare/v0.7.0...v0.8.0) (2023-10-03)


 ### Features

 * introduce DropZone API for nesting components and advanced layouts ([5053a84](https://github.com/measuredco/puck/commit/5053a8430de1f4bfb6fb7a4b1f194a1474ed3ae3))
 * introduce new outline UI ([e32c4ff](https://github.com/measuredco/puck/commit/e32c4ff784a2fcc5f2e2879807c045bd2742f4ac))
 * redesign action overlay and move outside of component ([5145cba](https://github.com/measuredco/puck/commit/5145cba6595e2051d14a7bfd37d9b180d9553330))
 * cast number field types to Number ([d5df959](https://github.com/measuredco/puck/commit/d5df95946dd9abf1502cb21bfc8682dd98efb1e1))


 ### Bug Fixes

 * add missing id type to render props ([18753cf](https://github.com/measuredco/puck/commit/18753cf1142d70f7100bc6fd5aa913813491042e))
 * add missing optional chaining operator to next recipe ([a368319](https://github.com/measuredco/puck/commit/a368319ec73adfc5bce8fb6bd31ac8e46e669400))
 * don't show margin underneath placeholder when dragging in ([2620455](https://github.com/measuredco/puck/commit/26204557b6fc92b208ee1051921965b793a78b1e))
 * don't switch between controlled/uncontrolled inputs ([b20e298](https://github.com/measuredco/puck/commit/b20e2980be6df6d57f9dfb6987b512686ccc5a7a))
 * ensure form styles override global styles ([104091a](https://github.com/measuredco/puck/commit/104091ac87c95d1395687d1785e621f5580efd87))
 * ensure hooks can always be used within render functions ([cbf8e8e](https://github.com/measuredco/puck/commit/cbf8e8e49fc5d43a8818cf41010cfba6034bbf28))
 * ensure types allow for nested arrays ([06b145b](https://github.com/measuredco/puck/commit/06b145b9089548725166fec3dd54f757b6e932cc))
 * fix unpredictable rendering of drop placeholder ([bf5f16b](https://github.com/measuredco/puck/commit/bf5f16b394ef950318949e9a440dd1bf2407636e))
 * only show sidebar scroll bars if necessary ([87c8736](https://github.com/measuredco/puck/commit/87c87369003f417600ca0a7bb38041de5c675afb))
 * prevent global styles from overwriting fieldset styles ([550bd0e](https://github.com/measuredco/puck/commit/550bd0ef9263766817709cea2c0365e9bd3e95cf))
 * respect labels for array item fields ([f2e7843](https://github.com/measuredco/puck/commit/f2e7843de0b12df4b15b1c1dd953e8b4d82ce366))
 * prevent global styles from overwriting outline styles ([1dc222c](https://github.com/measuredco/puck/commit/1dc222cfa5924aca2e5eb5ea535f77cfe2fe1281))
 * prevent styles from clashing with dark mode root element ([8506e8e](https://github.com/measuredco/puck/commit/8506e8e7f72aa8df7e69a1e7349eae273ebdee0e))
 * upgrade next version in recipe to ensure vercel builds pass ([c2d7fae](https://github.com/measuredco/puck/commit/c2d7faeed59fea5c7c795f76915cf354151d644d))


 ### Performance Improvements

 * reduce bundle size by 61% by removing unused react-feather icons ([f4b0563](https://github.com/measuredco/puck/commit/f4b0563e38a93a5f582b0210b0d75a846e3bada4))


## [0.7.0](https://github.com/measuredco/puck/compare/v0.6.2...v0.7.0) (2023-09-14)


### Features

* add support for custom fields ([b46b721](https://github.com/measuredco/puck/commit/b46b721aea70698e249cd3dfff34f88717952da7))




## [0.6.2](https://github.com/measuredco/puck/compare/v0.6.1...v0.6.2) (2023-09-07)


### Bug Fixes

* bust cache in generated app on publish ([6e1c8ed](https://github.com/measuredco/puck/commit/6e1c8ed9df1be9634e49d18edc8c42c7ebf6e864))
* don't 404 on homepage in generated app ([8fd7b3b](https://github.com/measuredco/puck/commit/8fd7b3b38a046776f69105e25f86a622b5e41c40))
* don't call API when building generated app ([8041fc1](https://github.com/measuredco/puck/commit/8041fc1da598f61b4c30c711d8233466c8643099))
* fix type issues in generated app ([b16e98e](https://github.com/measuredco/puck/commit/b16e98e15407678524d904211ecc74230b205018))




## [0.6.1](https://github.com/measuredco/puck/compare/v0.6.0...v0.6.1) (2023-09-06)


### Bug Fixes

* add missing glob dependency for create-puck-app ([7dbe190](https://github.com/measuredco/puck/commit/7dbe1902bf1c31a674b35c1269ee44ac09aac763))
* return component to original position when drag cancelled ([cae760f](https://github.com/measuredco/puck/commit/cae760fbfb8497de09311bb81e3059c07efe75ac))
* use correct peer dependencies for react ([39f4e7f](https://github.com/measuredco/puck/commit/39f4e7fab5818266aa75046d2c2ca6e858803a13))




## [0.6.0](https://github.com/measuredco/puck/compare/v0.5.0...v0.6.0) (2023-08-15)


### Bug Fixes

* ensure component label doesn't inherit user styles ([5c0d65b](https://github.com/measuredco/puck/commit/5c0d65b8519897c454b2f321330dd24dd30f831f))
* make default props on root optional ([dc5b1ae](https://github.com/measuredco/puck/commit/dc5b1aec6518f1c3ed1ad8f798bcfe359077865f))


### Features

* export Button and IconButton to make extending header seamless ([d98eb29](https://github.com/measuredco/puck/commit/d98eb298f14ef0ae8888a710cadf85fac13e084d))




## [0.5.0](https://github.com/measuredco/puck/compare/v0.4.1...v0.5.0) (2023-08-14)


### Features

* add headerTitle and headerPath APIs ([ae5c7c2](https://github.com/measuredco/puck/commit/ae5c7c2083b16e8f69e9995d74f8be7fffbe6ea5))
* gracefully fallback if component definition doesn't exist ([d7e3190](https://github.com/measuredco/puck/commit/d7e31901626734ce43cd9161971d9811b6d5c483))
* refine editor styles ([9e57649](https://github.com/measuredco/puck/commit/9e57649e7bd9444b290122ecbc1c40bc6d88c3d1))
* support booleans in radios and selects ([acb7a96](https://github.com/measuredco/puck/commit/acb7a96b727c9bc6d4599dcd06e2448c10e82d0f))




## [0.4.1](https://github.com/measuredco/puck/compare/v0.4.0...v0.4.1) (2023-08-09)


### Bug Fixes

* move incorrect dependency to devDependencies ([6ffd86c](https://github.com/measuredco/puck/commit/6ffd86c9d668449991a0642d79fa85c1a364deae))




## [0.4.0](https://github.com/measuredco/puck/compare/v0.3.2...v0.4.0) (2023-07-07)


### Bug Fixes

* avoid hardcoding localhost in strapi adaptor ([f8d920c](https://github.com/measuredco/puck/commit/f8d920c6d188e9b8c9ea1bc7cb58d63e6f25d823))
* stretch ExternalInput button to fill container ([69ee221](https://github.com/measuredco/puck/commit/69ee221e41ab09aae3d4d4d89c92d799d9b387f9))


### Features

* add adaptor-fetch package ([eaf7875](https://github.com/measuredco/puck/commit/eaf787527c0f76f3d43cbb8fd6fd1542aebdf5b0))
* rename page to root in API ([8519675](https://github.com/measuredco/puck/commit/8519675ab450438ae459bee54a8ae00bdc7553b4))




## [0.3.2](https://github.com/measuredco/puck/compare/v0.3.1...v0.3.2) (2023-07-06)


### Bug Fixes

* export correct files for Strapi adaptor ([577a849](https://github.com/measuredco/puck/commit/577a84928cd3c8e4f7a57d1f2746abd69db23eeb))
* set correct font family for empty outlines ([3d45841](https://github.com/measuredco/puck/commit/3d4584190e13f9b07077d6012d1ce4197de0a436))




## [0.3.1](https://github.com/measuredco/puck/compare/v0.3.0...v0.3.1) (2023-07-05)


### Bug Fixes

* include .gitignore in recipes ([e18bf67](https://github.com/measuredco/puck/commit/e18bf67e366c431a6bea08a9965b7d40866119e2))




## [0.3.0](https://github.com/measuredco/puck/compare/v0.2.2...v0.3.0) (2023-07-05)


### Features

* release create-puck-app ([0722a65](https://github.com/measuredco/puck/commit/0722a656c7da4b4caa9212385affd62323a56c92))




## [0.2.2](https://github.com/measuredco/puck/compare/v0.2.1...v0.2.2) (2023-07-05)


### Bug Fixes

* ensure margin collapse fix works with coloured backgrounds ([fdec4fa](https://github.com/measuredco/puck/commit/fdec4faac197e541a04785ab7c16919223b3ec9d))




## [0.2.1](https://github.com/measuredco/puck/compare/v0.2.0...v0.2.1) (2023-07-05)


### Bug Fixes

* remove border on draggable components ([726a27c](https://github.com/measuredco/puck/commit/726a27cc0df6b8c439d0aa8e0dd05cac32774b3e))




## [0.2.0](https://github.com/measuredco/puck/compare/v0.1.3...v0.2.0) (2023-07-04)


### Bug Fixes

* inject react into libraries ([7e10d91](https://github.com/measuredco/puck/commit/7e10d9141901aaf79ae4ebfa3a7b60b589c6c715))
* render drag and drop correctly when using margins ([f88025b](https://github.com/measuredco/puck/commit/f88025bf27479036426305a1004acfe8f0ab6644))


### Features

* add icons to inputs ([f47482e](https://github.com/measuredco/puck/commit/f47482e8cabd334360666ea90d2e6a12b3648cf9))
* improve UI for fields ([aa0d2fe](https://github.com/measuredco/puck/commit/aa0d2fe56ff633b9c2cff2023ae00c8b9ec04df3))
* rename "group" field type to "array" ([4f99c7d](https://github.com/measuredco/puck/commit/4f99c7d761b8e1cfa280fb5e74f6f369be84d7a2))




## [0.1.6](https://github.com/measuredco/puck/compare/v0.1.3...v0.1.6) (2023-07-04)


### Bug Fixes

* inject react into libraries ([7e10d91](https://github.com/measuredco/puck/commit/7e10d9141901aaf79ae4ebfa3a7b60b589c6c715))




## 0.1.5 (2023-07-03)

- Publish all packages



================================================
FILE: CODE_OF_CONDUCT.md
================================================
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, caste, color, religion, or sexual
identity and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

- Demonstrating empathy and kindness toward other people
- Being respectful of differing opinions, viewpoints, and experiences
- Giving and gracefully accepting constructive feedback
- Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
- Focusing on what is best not just for us as individuals, but for the overall
  community

Examples of unacceptable behavior include:

- The use of sexualized language or imagery, and sexual attention or advances of
  any kind
- Trolling, insulting or derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or email address,
  without their explicit permission
- Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement via Discord.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series of
actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or permanent
ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior, harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within the
community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org),
version 2.1, available at [https://www.contributor-covenant.org/version/2/1/code_of_conduct.html](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html).

Community Impact Guidelines were inspired by
[Mozilla's code of conduct enforcement ladder](https://opensource.creativecommons.org/community/code-of-conduct/enforcement/).

For answers to common questions about this code of conduct, see the FAQ at [https://www.contributor-covenant.org/faq](https://www.contributor-covenant.org/faq). Translations are available at
[https://www.contributor-covenant.org/translations](https://www.contributor-covenant.org/translations).



================================================
FILE: CONTRIBUTING.md
================================================
# Contributing to Puck

Puck is still under heavy development, having gained significant interest at an early stage. The contribution guidelines are designed to help us balance community engagement with our vision and direction.

## Reporting bugs or requesting features

Bugs and feature requests are best reported via GitHub issues. Always check if the issue already exists before opening a new one.

If you're unsure whether or not you've encountered a bug, feel free to ask first 👇

## Asking questions

There are several ways to ask questions or ask for help:

- Open a [discussion](https://github.com/measuredco/puck/discussions) via GitHub
- Use the #chat or #help channels in our [Discord server](https://discord.gg/D9e4E3MQVZ)

_Please only use GitHub issues for bugs and feature requests, and not for questions._

## Labels

We manage our backlog using labels. Labels can help you understand the status of each ticket.

### Status labels

- **ready** - this ticket has a description and is ready to be worked on.
- **in triage** - this ticket has been seen by the Puck team and we are identifying next steps. Tickets may stay in this state until we're ready to process them.
- **blocked** - this ticket is blocked by another ticket. The relationship should be made apparent in the comments.

### Type labels

Denoted by the `type:` prefix.

- **type: bug**
- **type: feature**
- **type: docs**
- **type: performance**
- **type: test**

### Other labels

- **good first issue** - if you're new to contributing on Puck, this is a good place to start.
- **opinions wanted** - we're looking for opinions on this ticket. Feel free to chime in with comments or suggestions.

## Contributing code

### When to contribute

#### Existing issues

If picking up an existing GitHub issue, please respect the **ready** status label.

Any PRs made to close issues without the **ready** label are at risk of being premature and likely to be rejected.

#### New issues

If you've reported a bug via an issue and have a fix, you don't need to wait for the **ready** label before proposing a fix.

It's also okay to propose solutions to your own feature requests, but without proper discussion the solution may be rejected.

#### No issue

PRs without issues may be accepted for small fixes, but larger changes may be rejected or require further discussion.

### Setting up the environment

Puck uses:

- TypeScript
- CSS Modules
- Turborepo for monorepo tooling
- Yarn for package management and release automation
- Next.js for demo applications

To get setup, first clone the repo and then install the dependencies:

```sh
yarn
```

Rather than running the entire monorepo, it's quicker to run the project you need.

Generally, it's easiest to work in the context of the demo application:

```sh
cd apps/demo
yarn dev
```

### Style

#### TypeScript

- Avoid the use of `any`.
- Tests appreciated, but not required. They may be requested for complicated code.

#### CSS

- Class names must follow the [SUIT CSS](https://suitcss.github.io) methodology. This is a tooling-angostic convention used at [@measuredco](https://github.com/measuredco) for all CSS work.
- Don't rely on global styles. Puck is deployed into hostile third-party environments and we have no control over what CSS may be running on the page.

#### Commits

**Keep your PRs focused to a single issue**. This makes it easier to review and is necessary for our release process.

We rely on [angular-style conventional commits](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#-git-commit-guidelines) for automating our releases, determining the version bump and generating our changelog.

You generally don't need to write perfect commit messages yourselves - we squash most PRs and rewrite the messages on merge.

If you need to solve multiple issues, it's best to split it into multiple PRs. Or, if you're comfortable writing conventional commits, you can also split each change into a separate commit. The team is more likely to have opinions about this and you may be asked to reword your commits.

### Additional guidance

#### Public APIs

If your PR introduces or changes public APIs, it will come under additional scrutiny to avoid introducing breaking changes.

## Releases

### Canary

A canary release is automatically deployed after each merge to `main`. These are suffixed with the hash of the commit, for example `0.10.0-canary.42c24f1`.

### Latest

Releases are triggered manually when the team feels the `main` branch is sufficiently stable.



================================================
FILE: lerna.json
================================================
{
  "packages": [
    "apps/docs",
    "packages/core",
    "packages/create-puck-app",
    "packages/field-contentful",
    "packages/plugin-emotion-cache",
    "packages/plugin-heading-analyzer"
  ],
  "version": "0.19.1",
  "npmClient": "yarn"
}



================================================
FILE: LICENSE
================================================
MIT License

Copyright (c) The Puck Contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
FILE: package.json
================================================
{
  "private": true,
  "scripts": {
    "build": "turbo run build",
    "dev": "rm -rf packages/core/dist && turbo run dev --filter=demo",
    "lint": "turbo run lint",
    "format:check": "prettier --check \"**/*.{ts,tsx,md,mdx,css}\"",
    "format": "prettier --write \"**/*.{ts,tsx,md,mdx,css}\"",
    "release": "yarn release:prepare && yarn changelog && yarn release-commit",
    "release:prepare": "git fetch --tags && conventional-recommended-bump -p angular | xargs yarn version:auto $1",
    "release:canary": "yarn release:prepare && node scripts/get-unstable-version canary | xargs yarn version:auto $1",
    "release-commit": "git add -u && git commit -m \"release: v${npm_package_version}\"",
    "smoke": "node scripts/e2e/smoke.mjs",
    "test": "turbo run test",
    "version": "lerna version --force-publish -y --no-push --no-changelog --no-git-tag-version $npm_package_version",
    "version:auto": "yarn version --no-git-tag-version --new-version $1",
    "changelog": "node scripts/create-changelog"
  },
  "devDependencies": {
    "@turbo/gen": "^2.3.3",
    "asciichart": "^1.5.25",
    "conventional-changelog-angular": "^4.0.0",
    "conventional-recommended-bump": "^6.0.5",
    "eslint": "^7.32.0",
    "eslint-config-custom": "*",
    "lerna": "^7.1.1",
    "prettier": "^2.5.1",
    "puppeteer": "^24.8.2",
    "standard-changelog": "^2.0.21",
    "turbo": "^2.3.3"
  },
  "name": "puck-repo",
  "packageManager": "yarn@1.22.19",
  "workspaces": [
    "apps/*",
    "recipes/*",
    "packages/*"
  ],
  "version": "0.19.1",
  "engines": {
    "node": ">=20.0.0"
  }
}



================================================
FILE: turbo.json
================================================
{
  "$schema": "https://turbo.build/schema.json",
  "globalDependencies": ["**/.env.*local"],
  "globalEnv": [
    "NEXT_PUBLIC_PLAUSIBLE_DATA_DOMAIN",
    "NEXT_PUBLIC_IS_LATEST",
    "NEXT_PUBLIC_IS_CANARY",
    "VERCEL_GIT_COMMIT_REF",
    "NEXT_PUBLIC_BASE_URL",
    "NODE_ENV"
  ],
  "tasks": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": [".next/**", "!.next/cache/**", "dist/**"]
    },
    "lint": {},
    "test": {},
    "dev": {
      "cache": false,
      "persistent": true
    }
  }
}



================================================
FILE: .eslintrc.js
================================================
module.exports = {
  root: true,
  // This tells ESLint to load the config from the package `eslint-config-custom`
  extends: ["custom"],
  settings: {
    next: {
      rootDir: ["apps/*/"],
    },
  },
  rules: {
    "react-hooks/exhaustive-deps": "off",
  },
  // eslint-config-next causes warning on Remix's default remix.config.js
  ignorePatterns: ["recipes/remix/remix.config.js"],
};



================================================
FILE: .npmrc
================================================
auto-install-peers = true



================================================
FILE: .prettierignore
================================================
CHANGELOG.md



================================================
FILE: .prettierrc.json
================================================
{}



================================================
FILE: .yarnrc
================================================
version-git-message "release: v%s"


================================================
FILE: apps/demo/README.md
================================================
# `next` recipe

The `next` recipe showcases one of the most powerful ways to implement Puck using to provide an authoring tool for any route in your Next app.

## Demonstrates

- Next.js 13 App Router implementation
- JSON database implementation with HTTP API
- Catch-all routes to use puck for any route on the platform

## Usage

Run the generator and enter `next` when prompted

```
npx create-puck-app my-app
```

Start the server

```
yarn dev
```

Navigate to the homepage at https://localhost:3000. To edit the homepage, access the Puck editor at https://localhost:3000/edit.

You can do this for any route on the application, **even if the page doesn't exist**. For example, visit https://localhost:3000/hello/world and you'll receive a 404. You can author and publish a page by visiting https://localhost:3000/hello/world/edit. After publishing, go back to the original URL to see your page.

## Using this recipe

To adopt this recipe you will need to:

- **IMPORTANT** Add authentication to `/edit` routes. This can be done by modifying the example API routes in `/app/api/puck/route.ts` and server component in `/app/[...puckPath]/page.tsx`. **If you don't do this, Puck will be completely public.**
- Integrate your database into the API calls in `/app/api/puck/route.ts`
- Implement a custom puck configuration in `puck.config.tsx`

## License

MIT © [The Puck Contributors](https://github.com/measuredco/puck/graphs/contributors).



================================================
FILE: apps/demo/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
FILE: apps/demo/next.config.js
================================================
module.exports = {
  reactStrictMode: true,
  transpilePackages: ["@measured/puck", "lucide-react"],
};



================================================
FILE: apps/demo/package.json
================================================
{
  "name": "demo",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "classnames": "^2.3.2",
    "lucide-react": "^0.468.0",
    "next": "^15.2.4",
    "rc-footer": "^0.6.8",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@types/node": "^17.0.12",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "eslint-config-custom": "*",
    "typescript": "^5.5.4"
  }
}



================================================
FILE: apps/demo/tsconfig.json
================================================
{
  "extends": "./tsconfig/nextjs.json",
  "compilerOptions": {
    "strict": true,
    "plugins": [{ "name": "next" }],
    "paths": {
      "@/core": ["../../packages/core"],
      "@/core/*": ["../../packages/core/*"],
      "@measured/puck": ["../../packages/core"],
      "@/plugin-heading-analyzer": ["../../packages/plugin-heading-analyzer"],
      "@/plugin-heading-analyzer/*": [
        "../../packages/plugin-heading-analyzer/*"
      ]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: apps/demo/.eslintrc.js
================================================
module.exports = {
  root: true,
  extends: ["custom"],
};



================================================
FILE: apps/demo/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel

database.json


================================================
FILE: apps/demo/app/layout.tsx
================================================
import "@/core/styles.css";
import "./styles.css";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <head>
        {process.env.NEXT_PUBLIC_PLAUSIBLE_DATA_DOMAIN && (
          <script
            defer
            data-domain={process.env.NEXT_PUBLIC_PLAUSIBLE_DATA_DOMAIN}
            src="https://plausible.io/js/plausible.js"
          ></script>
        )}
      </head>
      <body>
        <div>{children}</div>
      </body>
    </html>
  );
}



================================================
FILE: apps/demo/app/page.tsx
================================================
export { default } from "./[...puckPath]/page";
export * from "./[...puckPath]/page";



================================================
FILE: apps/demo/app/styles.css
================================================
@import url("https://rsms.me/inter/inter.css");

body {
  font-family: Inter, -apple-system, BlinkMacSystemFont, Segoe UI,
    Helvetica Neue, sans-serif, Apple Color Emoji, Segoe UI Emoji,
    Segoe UI Symbol;
  margin: 0;
}

@supports (font-variation-settings: normal) {
  body {
    font-family: InterVariable, -apple-system, BlinkMacSystemFont, Segoe UI,
      Helvetica Neue, sans-serif, Apple Color Emoji, Segoe UI Emoji,
      Segoe UI Symbol;
  }
}



================================================
FILE: apps/demo/app/[...puckPath]/client.tsx
================================================
"use client";

import { Button, Puck, Render } from "@/core";
import headingAnalyzer from "@/plugin-heading-analyzer/src/HeadingAnalyzer";
import config from "../../config";
import { useDemoData } from "../../lib/use-demo-data";
import { useEffect, useState } from "react";

export function Client({ path, isEdit }: { path: string; isEdit: boolean }) {
  const metadata = {
    example: "Hello, world",
  };

  const { data, resolvedData, key } = useDemoData({
    path,
    isEdit,
    metadata,
  });

  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  if (!isClient) return null;

  const params = new URL(window.location.href).searchParams;

  if (isEdit) {
    return (
      <div>
        <Puck
          config={config}
          data={data}
          onPublish={async (data) => {
            localStorage.setItem(key, JSON.stringify(data));
          }}
          plugins={[headingAnalyzer]}
          headerPath={path}
          iframe={{
            enabled: params.get("disableIframe") === "true" ? false : true,
          }}
          overrides={{
            headerActions: ({ children }) => (
              <>
                <div>
                  <Button href={path} newTab variant="secondary">
                    View page
                  </Button>
                </div>

                {children}
              </>
            ),
          }}
          metadata={metadata}
        />
      </div>
    );
  }

  if (data.content) {
    return <Render config={config} data={resolvedData} metadata={metadata} />;
  }

  return (
    <div
      style={{
        display: "flex",
        height: "100vh",
        textAlign: "center",
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <div>
        <h1>404</h1>
        <p>Page does not exist in session storage</p>
      </div>
    </div>
  );
}

export default Client;



================================================
FILE: apps/demo/app/[...puckPath]/page.tsx
================================================
import resolvePuckPath from "../../lib/resolve-puck-path";
import { Metadata } from "next";
import Client from "./client";
export async function generateMetadata({
  params,
}: {
  params: Promise<{ framework: string; uuid: string; puckPath: string[] }>;
}): Promise<Metadata> {
  const { puckPath } = await params;
  const { isEdit, path } = resolvePuckPath(puckPath);

  if (isEdit) {
    return {
      title: "Editing: " + path,
    };
  }

  return {
    title: "",
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ framework: string; uuid: string; puckPath: string[] }>;
}) {
  const { puckPath } = await params;
  const { isEdit, path } = resolvePuckPath(puckPath);

  return <Client isEdit={isEdit} path={path} />;
}



================================================
FILE: apps/demo/app/custom-ui/[...puckPath]/client.tsx
================================================
// Disable rules of hooks as they are regularly used inside render functions
/* eslint-disable react-hooks/rules-of-hooks */

"use client";

import { ActionBar, Button, Data, Puck, Render } from "@/core";
import { HeadingAnalyzer } from "@/plugin-heading-analyzer/src/HeadingAnalyzer";
import config from "../../../config";
import { UserConfig } from "../../../config/types";
import { useDemoData } from "../../../lib/use-demo-data";
import { IconButton, createUsePuck } from "@/core";
import { ReactNode, useEffect, useRef, useState } from "react";
import { Drawer } from "@/core/components/Drawer";
import { ChevronUp, ChevronDown, Globe, Lock, Unlock } from "lucide-react";

const usePuck = createUsePuck<UserConfig>();

const CustomHeader = ({ onPublish }: { onPublish: (data: Data) => void }) => {
  const get = usePuck((s) => s.get);
  const dispatch = usePuck((s) => s.dispatch);
  const previewMode = usePuck((s) => s.appState.ui.previewMode);

  const toggleMode = () => {
    dispatch({
      type: "setUi",
      ui: {
        previewMode: previewMode === "edit" ? "interactive" : "edit",
      },
    });
  };

  return (
    <header
      style={{
        display: "flex",
        flexWrap: "wrap",
        gap: 16,
        padding: "16px 24px",
        background: "white",
        color: "black",
        alignItems: "center",
        borderBottom: "1px solid #ddd",
      }}
      onClick={() => dispatch({ type: "setUi", ui: { itemSelector: null } })}
    >
      <span style={{ fontWeight: 600 }}>Custom UI example </span>
      <div style={{ marginLeft: "auto", display: "flex", gap: 8 }}>
        <div style={{ gap: 8, display: "flex" }}>
          <Button onClick={toggleMode} variant="secondary">
            Switch to {previewMode === "edit" ? "interactive" : "edit"}
          </Button>
          <Button
            onClick={() => onPublish(get().appState.data)}
            icon={<Globe size="14" />}
          >
            Publish
          </Button>
        </div>
      </div>
    </header>
  );
};

const Tabs = ({
  tabs,
  onTabCollapse,
  scrollTop,
}: {
  tabs: { label: string; body: ReactNode }[];
  onTabCollapse: () => void;
  scrollTop: number;
}) => {
  const [currentTab, setCurrentTab] = useState(-1);
  const itemSelector = usePuck((s) => s.appState.ui.itemSelector);
  const isDragging = usePuck((s) => s.appState.ui.isDragging);

  const currentTabRef = useRef(currentTab);

  useEffect(() => {
    if (currentTabRef.current !== -1 && itemSelector) {
      setCurrentTab(1);
    }
  }, [itemSelector]);

  useEffect(() => {
    currentTabRef.current = currentTab;
  }, [currentTab]);

  useEffect(() => {
    if (isDragging && currentTab === 1) {
      setCurrentTab(-1);
    }
  }, [currentTab, isDragging]);

  useEffect(() => {
    if (scrollTop === 0) {
      setCurrentTab(-1);
      onTabCollapse();
    }
  }, [scrollTop]);

  return (
    <div
      onClick={(e) => e.stopPropagation()}
      style={{
        background: "#ffffff",
        pointerEvents: "all",
        borderTop: "1px solid #ddd",
        boxShadow: "rgba(140, 152, 164, 0.25) 0px 0px 6px 0px",
      }}
    >
      <div
        style={{
          display: "flex",
          paddingLeft: 16,
          paddingRight: 16,
          borderBottom: "1px solid #ddd",
          overflowX: "auto",
        }}
      >
        {tabs.map((tab, idx) => {
          const isCurrentTab = currentTab === idx;
          return (
            <button
              key={idx}
              type="button"
              onClick={() => {
                if (currentTab === idx) {
                  setCurrentTab(-1);
                } else {
                  setCurrentTab(idx);
                  if (scrollTop < 20) {
                    setTimeout(() => {
                      document
                        .querySelector("#action-bar")
                        ?.scroll({ top: 128, behavior: "smooth" });
                    }, 25);
                  }
                }
              }}
              style={{
                fontFamily: "inherit",
                fontSize: 16,
                padding: "16px 16px",
                paddingTop: 19,
                color: isCurrentTab ? "var(--puck-color-azure-04)" : "black",
                border: "none",
                borderBottom: isCurrentTab
                  ? "3px solid var(--puck-color-azure-04)"
                  : "3px solid transparent",
                background: "white",
                cursor: "pointer",
              }}
            >
              {tab.label}
            </button>
          );
        })}
        <div
          style={{
            marginLeft: "auto",
            display: "flex",
            alignItems: "center",
            gap: 8,
          }}
        >
          <div>
            <IconButton
              onClick={() => {
                setCurrentTab(currentTab === -1 ? 0 : -1);

                if (currentTab !== -1) {
                  onTabCollapse();
                } else {
                  setTimeout(() => {
                    document
                      .querySelector("#action-bar")
                      ?.scroll({ top: 128, behavior: "smooth" });
                  }, 25);
                }
              }}
              title={currentTab !== -1 ? "Collapse Tabs" : "Expand Tabs"}
            >
              {currentTab === -1 ? <ChevronUp /> : <ChevronDown />}
            </IconButton>
          </div>
        </div>
      </div>
      <div style={{ overflowX: "auto" }}>
        {tabs.map((tab, idx) => {
          const isCurrentTab = currentTab === idx;
          return (
            <div
              key={idx}
              style={{
                display: isCurrentTab ? "block" : "none",
              }}
            >
              {tab.body}
            </div>
          );
        })}
      </div>
    </div>
  );
};

const CustomPuck = ({ dataKey }: { dataKey: string }) => {
  const [hoveringTabs, setHoveringTabs] = useState(false);

  const [actionBarScroll, setActionBarScroll] = useState(0);

  return (
    <div
      style={{
        position: "relative",
      }}
    >
      <div style={{ position: "sticky", top: 0, zIndex: 2 }}>
        <CustomHeader
          onPublish={async (data: Data) => {
            localStorage.setItem(dataKey, JSON.stringify(data));
          }}
        />
      </div>
      <div
        style={{
          position: "relative",
          overflowY: hoveringTabs ? "hidden" : "auto",
          zIndex: 0,
        }}
      >
        <Puck.Preview />
      </div>
      <div
        id="action-bar"
        style={{
          position: "fixed",
          bottom: 0,
          overflowY: "auto",
          overflowX: "hidden",
          maxHeight: "100vh",
          width: "100%",
          boxSizing: "border-box",
          paddingTop: "calc(100vh - 58px)",
          pointerEvents: hoveringTabs ? undefined : "none",
          zIndex: 1,
          overscrollBehavior: "none",
        }}
        onTouchStart={() => setHoveringTabs(false)}
        onScrollCapture={(e) => {
          setActionBarScroll(e.currentTarget.scrollTop);
        }}
      >
        <div
          style={{
            background: "white",
            position: "relative",
            pointerEvents: "none",
            zIndex: 0,
          }}
          onMouseOver={(e) => {
            e.stopPropagation();
            setHoveringTabs(true);
          }}
          onTouchStart={(e) => {
            e.stopPropagation();
            setHoveringTabs(true);
          }}
          onMouseOut={() => {
            setHoveringTabs(false);
          }}
        >
          {/* Force react to render when hoveringTabs changes, otherwise scroll gets trapped */}
          {hoveringTabs && <span />}
          <Tabs
            onTabCollapse={() => {
              setTimeout(() => setHoveringTabs(false), 50);
            }}
            scrollTop={actionBarScroll}
            tabs={[
              { label: "Components", body: <Puck.Components /> },
              { label: "Fields", body: <Puck.Fields /> },
              { label: "Outline", body: <Puck.Outline /> },
              {
                label: "Headings",
                body: (
                  <div style={{ padding: 24 }}>
                    <HeadingAnalyzer />
                  </div>
                ),
              },
            ]}
          />
        </div>
      </div>
    </div>
  );
};

const CustomDrawer = () => {
  const getPermissions = usePuck((s) => s.getPermissions);

  return (
    <Drawer>
      <div
        style={{
          display: "grid",
          gridTemplateColumns: "repeat(auto-fill, minmax(256px, 1fr))",
          pointerEvents: "all",
          padding: "16px",
          background: "var(--puck-color-grey-12)",
          gap: 8,
        }}
      >
        {Object.keys(config.components).map((componentKey, componentIndex) => {
          const canInsert = getPermissions({
            type: componentKey as keyof UserConfig["components"],
          }).insert;

          return (
            <Drawer.Item
              key={componentKey}
              name={componentKey}
              isDragDisabled={!canInsert}
            />
          );
        })}
      </div>
    </Drawer>
  );
};

export function Client({ path, isEdit }: { path: string; isEdit: boolean }) {
  const { data, resolvedData, key } = useDemoData({
    path,
    isEdit,
  });

  const [lockedComponents, setLockedComponents] = useState<
    Record<string, boolean>
  >({});

  const configOverride: UserConfig = {
    ...config,
    components: {
      ...Object.keys(config.components).reduce((acc, componentKey) => {
        return {
          ...acc,
          [componentKey]: {
            ...acc[componentKey as keyof UserConfig["components"]],
            resolvePermissions: (data: any, { permissions }: any) => {
              if (lockedComponents[data.props.id]) {
                return {
                  drag: false,
                  edit: false,
                  duplicate: false,
                  delete: false,
                };
              }

              return permissions;
            },
          },
        };
      }, config.components),
    },
  };

  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
  }, []);

  if (!isClient) return null;

  if (isEdit) {
    return (
      <Puck<UserConfig>
        config={configOverride}
        data={data}
        iframe={{ enabled: false }}
        headerPath={path}
        permissions={{
          lockable: true,
        }}
        overrides={{
          outline: ({ children }) => (
            <div style={{ padding: 16 }}>{children}</div>
          ),
          actionBar: ({ children, label, parentAction }) => {
            const selectedItem = usePuck((s) => s.selectedItem);
            const getPermissions = usePuck((s) => s.getPermissions);
            const refreshPermissions = usePuck((s) => s.refreshPermissions);

            const globalPermissions = getPermissions();

            // eslint-disable-next-line react-hooks/rules-of-hooks
            useEffect(() => {
              if (selectedItem) {
                // We have to force refresh the permission resolver to refresh, since it relies on lockedComponents state
                // Without this, the resolver won't trigger as no props will have changed
                refreshPermissions({ item: selectedItem });
              }
              // eslint-disable-next-line react-hooks/exhaustive-deps
            }, [lockedComponents, selectedItem?.props.id, refreshPermissions]);

            if (!selectedItem)
              return (
                <ActionBar>
                  <ActionBar.Group>
                    {parentAction}
                    {label && <ActionBar.Label label={label} />}
                  </ActionBar.Group>
                  <ActionBar.Group>{children}</ActionBar.Group>
                </ActionBar>
              );

            const isLocked = !!lockedComponents[selectedItem.props.id];

            return (
              <ActionBar>
                <ActionBar.Group>
                  {parentAction}
                  {label && <ActionBar.Label label={label} />}
                </ActionBar.Group>
                <ActionBar.Group>
                  {children}
                  {globalPermissions.lockable && (
                    <ActionBar.Action
                      onClick={() => {
                        setLockedComponents({
                          ...lockedComponents,
                          [selectedItem.props.id as string]: !isLocked,
                        });

                        refreshPermissions({ item: selectedItem });
                      }}
                      label={isLocked ? "Unlock component" : "Lock component"}
                    >
                      {isLocked ? <Unlock size={16} /> : <Lock size={16} />}
                    </ActionBar.Action>
                  )}
                </ActionBar.Group>
              </ActionBar>
            );
          },
          components: () => <CustomDrawer />,
          puck: () => <CustomPuck dataKey={key} />,
        }}
      />
    );
  }

  if (data) {
    return <Render<UserConfig> config={config} data={resolvedData} />;
  }

  return (
    <div
      style={{
        display: "flex",
        height: "100vh",
        textAlign: "center",
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <div>
        <h1>404</h1>
        <p>Page does not exist in session storage</p>
      </div>
    </div>
  );
}

export default Client;



================================================
FILE: apps/demo/app/custom-ui/[...puckPath]/page.tsx
================================================
import resolvePuckPath from "../../../lib/resolve-puck-path";
import { Metadata } from "next";
import Client from "./client";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ framework: string; uuid: string; puckPath: string[] }>;
}): Promise<Metadata> {
  const { puckPath } = await params;
  const { isEdit, path } = resolvePuckPath(puckPath);

  if (isEdit) {
    return {
      title: "Editing: " + path,
    };
  }

  return {
    title: "",
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ framework: string; uuid: string; puckPath: string[] }>;
}) {
  const { puckPath } = await params;
  const { isEdit, path } = resolvePuckPath(puckPath);

  return <Client isEdit={isEdit} path={path} />;
}



================================================
FILE: apps/demo/app/rsc/page.tsx
================================================
import { Metadata } from "next";
import config from "../../config/server";
import { initialData } from "../../config/initial-data";
import { Props, RootProps } from "../../config/types";

import { Config } from "@/core";
import { Render, resolveAllData } from "@/core/rsc";

// NB This is only necessary for this demo app, as the `@/core/rsc` path does not resolve to dist but the type for Config does
// This will be resolved once the RSC package is merged with the regular package after DropZone support is dropped
const conf = config as unknown as Config;

export async function generateMetadata(): Promise<Metadata> {
  return {
    title: initialData["/"].root.title,
  };
}

export default async function Page() {
  const data = initialData["/"];
  const metadata = {
    example: "Hello, world",
  };

  const resolvedData = await resolveAllData<Props, RootProps>(
    data,
    conf,
    metadata
  );

  return <Render config={conf} data={resolvedData} metadata={metadata} />;
}



================================================
FILE: apps/demo/config/index.tsx
================================================
import { Button } from "./blocks/Button";
import { Card } from "./blocks/Card";
import { Grid } from "./blocks/Grid";
import { Hero } from "./blocks/Hero";
import { Heading } from "./blocks/Heading";
import { Flex } from "./blocks/Flex";
import { Logos } from "./blocks/Logos";
import { Stats } from "./blocks/Stats";
import { Template } from "./blocks/Template";
import { Text } from "./blocks/Text";
import { Space } from "./blocks/Space";

import Root from "./root";
import { UserConfig } from "./types";
import { initialData } from "./initial-data";

// We avoid the name config as next gets confused
export const conf: UserConfig = {
  root: Root,
  categories: {
    layout: {
      components: ["Grid", "Flex", "Space"],
    },
    typography: {
      components: ["Heading", "Text"],
    },
    interactive: {
      title: "Actions",
      components: ["Button"],
    },
    other: {
      title: "Other",
      components: ["Card", "Hero", "Logos", "Stats", "Template"],
    },
  },
  components: {
    Button,
    Card,
    Grid,
    Hero,
    Heading,
    Flex,
    Logos,
    Stats,
    Template,
    Text,
    Space,
  },
};

export const componentKey = Buffer.from(
  `${Object.keys(conf.components).join("-")}-${JSON.stringify(initialData)}`
).toString("base64");

export default conf;



================================================
FILE: apps/demo/config/initial-data.ts
================================================
import { UserData } from "./types";

export const initialData: Record<string, UserData> = {
  "/": {
    content: [
      {
        type: "Hero",
        props: {
          title: "This page was built with Puck",
          description:
            "Puck is the self-hosted visual editor for React. Bring your own components and make site changes instantly, without a deploy.",
          buttons: [
            {
              label: "Visit GitHub",
              href: "https://github.com/measuredco/puck",
            },
            { label: "Edit this page", href: "/edit", variant: "secondary" },
          ],
          id: "Hero-1687283596554",
          image: {
            url: "https://images.unsplash.com/photo-1687204209659-3bded6aecd79?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=2670&q=80",
            mode: "inline",
            content: [],
          },
          padding: "128px",
          align: "left",
        },
        readOnly: { title: false, description: false },
      },
      {
        type: "Space",
        props: {
          size: "96px",
          id: "Space-1687298109536",
          direction: "vertical",
        },
      },
      {
        type: "Heading",
        props: {
          align: "center",
          level: "2",
          text: "Drag-and-drop your own React components",
          layout: { padding: "0px" },
          size: "xxl",
          id: "Heading-1687297593514",
        },
      },
      {
        type: "Space",
        props: {
          size: "8px",
          id: "Space-1687284122744",
          direction: "vertical",
        },
      },
      {
        type: "Text",
        props: {
          align: "center",
          text: "Configure Puck with your own components to make change for your marketing pages without a developer.",
          layout: { padding: "0px" },
          size: "m",
          id: "Text-1687297621556",
          color: "muted",
        },
      },
      {
        type: "Space",
        props: {
          size: "40px",
          id: "Space-1687296179388",
          direction: "vertical",
        },
      },
      {
        type: "Grid",
        props: {
          id: "Grid-c4cd99ae-8c5e-4cdb-87d2-35a639f5163e",
          gap: 24,
          numColumns: 3,
          items: [
            {
              type: "Card",
              props: {
                title: "Built for content teams",
                description:
                  "Puck enables content teams to make changes to their content without a developer or breaking the UI.",
                icon: "pen-tool",
                mode: "flat",
                layout: { grow: true, spanCol: 1, spanRow: 1, padding: "0px" },
                id: "Card-66ab42c9-d1da-4c44-9dba-5d7d72f2178d",
              },
            },
            {
              type: "Card",
              props: {
                title: "Easy to integrate",
                description:
                  "Front-end developers can easily integrate their own components using a familiar React API.",
                icon: "git-merge",
                mode: "flat",
                layout: { grow: true, spanCol: 1, spanRow: 1, padding: "0px" },
                id: "Card-0012a293-8ef3-4e7c-9d7c-7da0a03d97ae",
              },
            },
            {
              type: "Card",
              props: {
                title: "No vendor lock-in",
                description:
                  "Completely open-source, Puck is designed to be integrated into your existing React application.",
                icon: "github",
                mode: "flat",
                layout: { grow: true, spanCol: 1, spanRow: 1, padding: "0px" },
                id: "Card-09efb3f3-f58d-4e07-a481-7238d7e57ad6",
              },
            },
          ],
        },
      },
      {
        type: "Space",
        props: {
          size: "96px",
          id: "Space-1687287070296",
          direction: "vertical",
        },
      },
      {
        type: "Space",
        props: {
          size: "96px",
          id: "Space-1687298110602",
          direction: "vertical",
        },
      },
      {
        type: "Heading",
        props: {
          align: "center",
          level: "2",
          text: "The numbers",
          layout: { padding: "0px" },
          size: "xxl",
          id: "Heading-1687296574110",
        },
      },
      {
        type: "Space",
        props: {
          size: "16px",
          id: "Space-1687284283005",
          direction: "vertical",
        },
      },
      {
        type: "Text",
        props: {
          align: "center",
          text: 'This page demonstrates Puck configured with a custom component library. This component is called "Stats", and contains some made-up numbers. You can configure any page by adding "/edit" onto the URL.',
          layout: { padding: "0px" },
          size: "m",
          id: "Text-1687284565722",
          color: "muted",
          maxWidth: "916px",
        },
      },
      {
        type: "Space",
        props: {
          size: "96px",
          id: "Space-1687297618253",
          direction: "vertical",
        },
      },
      {
        type: "Stats",
        props: {
          items: [
            { title: "Users reached", description: "20M+" },
            { title: "Cost savings", description: "$1.5M" },
            { title: "Another stat", description: "5M kg" },
            { title: "Final fake stat", description: "15K" },
          ],
          id: "Stats-1687297239724",
        },
      },
      {
        type: "Space",
        props: {
          size: "120px",
          id: "Space-1687297589663",
          direction: "vertical",
        },
      },
      {
        type: "Heading",
        props: {
          align: "center",
          level: "2",
          text: "Extending Puck",
          layout: { padding: "0px" },
          size: "xxl",
          id: "Heading-1687296184321",
        },
      },
      {
        type: "Space",
        props: {
          size: "8px",
          id: "Space-1687296602860",
          direction: "vertical",
        },
      },
      {
        type: "Text",
        props: {
          align: "center",
          text: "Puck can also be extended with plugins and headless CMS content fields, transforming Puck into the perfect tool for your Content Ops.",
          layout: { padding: "0px" },
          size: "m",
          id: "Text-1687296579834",
          color: "muted",
          maxWidth: "916px",
        },
      },
      {
        type: "Space",
        props: {
          size: "96px",
          id: "Space-1687299311382",
          direction: "vertical",
        },
      },
      {
        type: "Grid",
        props: {
          gap: 24,
          numColumns: 3,
          id: "Grid-2da28e88-7b7b-4152-9da0-9f93f41213b6",
          items: [
            {
              type: "Card",
              props: {
                title: "plugin-heading-analyzer",
                description:
                  "Analyze the document structure and identify WCAG 2.1 issues with your heading hierarchy.",
                icon: "align-left",
                mode: "card",
                layout: { grow: false, spanCol: 1, spanRow: 1, padding: "0px" },
                id: "Card-b0e8407d-9fbb-4e76-aa32-d32f655c11d3",
              },
            },
            {
              type: "Card",
              props: {
                title: "External data",
                description:
                  "Connect your components with an existing data source, like Strapi.js.",
                icon: "feather",
                mode: "card",
                layout: { grow: false, spanCol: 1, spanRow: 1, padding: "0px" },
                id: "Card-f8ebd568-3a30-4099-a068-22cabae4691b",
              },
            },
            {
              type: "Card",
              props: {
                title: "Custom plugins",
                description:
                  "Create your own plugin to extend Puck for your use case using React.",
                icon: "plug",
                mode: "card",
                layout: { grow: false, spanCol: 1, spanRow: 1, padding: "0px" },
                id: "Card-9c3b0acc-ee42-4a4a-8cc7-1b22d98493f1",
              },
            },
            {
              type: "Card",
              props: {
                title: "Title",
                description: "Description",
                icon: "Feather",
                mode: "card",
                layout: { grow: false, spanCol: 1, spanRow: 1, padding: "0px" },
                id: "Card-dbec4ae9-8208-49bf-8910-3347ff13d957",
              },
            },
            {
              type: "Card",
              props: {
                title: "Title",
                description: "Description",
                icon: "Feather",
                mode: "card",
                layout: { grow: false, spanCol: 1, spanRow: 1, padding: "0px" },
                id: "Card-e807464c-4974-4dbb-b1c9-989deabce58d",
              },
            },
            {
              type: "Card",
              props: {
                title: "Title",
                description: "Description",
                icon: "Feather",
                mode: "card",
                layout: { grow: false, spanCol: 1, spanRow: 1, padding: "0px" },
                id: "Card-3b4b7d53-2124-4d7a-a67e-36b24fd765b4",
              },
            },
          ],
        },
      },
      {
        type: "Space",
        props: {
          size: "96px",
          id: "Space-1687299315421",
          direction: "vertical",
        },
      },
      {
        type: "Heading",
        props: {
          align: "center",
          level: "2",
          text: "Get started",
          layout: { padding: "0px" },
          size: "xxl",
          id: "Heading-1687299303766",
        },
      },
      {
        type: "Space",
        props: {
          size: "16px",
          id: "Space-1687299318902",
          direction: "vertical",
        },
      },
      {
        type: "Text",
        props: {
          align: "center",
          text: "Browse the Puck GitHub to get started, or try editing this page",
          layout: { padding: "0px" },
          size: "m",
          id: "Text-1687299305686",
          color: "muted",
        },
      },
      {
        type: "Space",
        props: {
          size: "24px",
          id: "Space-1687299335149",
          direction: "vertical",
        },
      },
      {
        type: "Flex",
        props: {
          justifyContent: "center",
          direction: "row",
          gap: 24,
          wrap: "wrap",
          layout: { spanCol: 1, spanRow: 1, padding: "0px" },
          id: "Flex-7d63d5ff-bd42-4354-b05d-681b16436fd6",
          items: [
            {
              type: "Button",
              props: {
                label: "Visit GitHub",
                href: "https://github.com/measuredco/puck",
                variant: "primary",
                id: "Button-bd41007c-6627-414d-839a-e261d470d8f9",
              },
            },
            {
              type: "Button",
              props: {
                label: "Edit this page",
                href: "/edit",
                variant: "secondary",
                id: "Button-6a5fa26c-8a2d-4b08-a756-c46079877127",
              },
            },
          ],
        },
      },
      {
        type: "Space",
        props: {
          size: "96px",
          id: "Space-1687284290127",
          direction: "vertical",
        },
      },
    ],
    root: { props: { title: "Puck Example" } },
    zones: {},
  },
  "/pricing": {
    content: [],
    root: { props: { title: "Pricing" } },
  },
  "/about": {
    content: [],
    root: { props: { title: "About Us" } },
  },
};



================================================
FILE: apps/demo/config/options.ts
================================================
export const spacingOptions = [
  { label: "8px", value: "8px" },
  { label: "16px", value: "16px" },
  { label: "24px", value: "24px" },
  { label: "32px", value: "32px" },
  { label: "40px", value: "40px" },
  { label: "48px", value: "48px" },
  { label: "56px", value: "56px" },
  { label: "64px", value: "64px" },
  { label: "72px", value: "72px" },
  { label: "80px", value: "80px" },
  { label: "88px", value: "88px" },
  { label: "96px", value: "96px" },
  { label: "104px", value: "104px" },
  { label: "112px", value: "112px" },
  { label: "120px", value: "120px" },
  { label: "128px", value: "128px" },
  { label: "136px", value: "136px" },
  { label: "144px", value: "144px" },
  { label: "152px", value: "152px" },
  { label: "160px", value: "160px" },
];



================================================
FILE: apps/demo/config/root.tsx
================================================
import { DefaultRootProps, RootConfig } from "@/core";
import { Header } from "./components/Header";
import { Footer } from "./components/Footer";

export type RootProps = DefaultRootProps;

export const Root: RootConfig<RootProps> = {
  defaultProps: {
    title: "My Page",
  },
  render: ({ puck: { isEditing, renderDropZone: DropZone } }) => {
    return (
      <div
        style={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}
      >
        <Header editMode={isEditing} />
        <DropZone zone="default-zone" style={{ flexGrow: 1 }} />

        <Footer>
          <Footer.List title="Section">
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
          </Footer.List>
          <Footer.List title="Section">
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
          </Footer.List>
          <Footer.List title="Section">
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
          </Footer.List>
          <Footer.List title="Section">
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
            <Footer.Link href="#">Label</Footer.Link>
          </Footer.List>
        </Footer>
      </div>
    );
  },
};

export default Root;



================================================
FILE: apps/demo/config/server.tsx
================================================
import { Button } from "./blocks/Button";
import { Card } from "./blocks/Card";
import { Grid } from "./blocks/Grid";
import { Hero } from "./blocks/Hero/server";
import { Heading } from "./blocks/Heading";
import { Flex } from "./blocks/Flex";
import { Logos } from "./blocks/Logos";
import { Stats } from "./blocks/Stats";
import { Template } from "./blocks/Template/server";
import { Text } from "./blocks/Text";
import { Space } from "./blocks/Space";
import Root from "./root";
import { UserConfig } from "./types";

// We avoid the name config as next gets confused
const conf: UserConfig = {
  root: Root,
  categories: {
    layout: {
      components: ["Grid", "Flex", "Space"],
    },
    typography: {
      components: ["Heading", "Text"],
    },
    interactive: {
      title: "Actions",
      components: ["Button"],
    },
    other: {
      title: "Other",
      components: ["Card", "Hero", "Logos", "Stats", "Template"],
    },
  },
  components: {
    Button,
    Card,
    Grid,
    Hero,
    Heading,
    Flex,
    Logos,
    Stats,
    Template,
    Text,
    Space,
  },
};

export default conf;



================================================
FILE: apps/demo/config/types.ts
================================================
import { Config, Data } from "@/core";
import { ButtonProps } from "./blocks/Button";
import { CardProps } from "./blocks/Card";
import { GridProps } from "./blocks/Grid";
import { HeroProps } from "./blocks/Hero";
import { HeadingProps } from "./blocks/Heading";
import { FlexProps } from "./blocks/Flex";
import { LogosProps } from "./blocks/Logos";
import { StatsProps } from "./blocks/Stats";
import { TemplateProps } from "./blocks/Template";
import { TextProps } from "./blocks/Text";
import { SpaceProps } from "./blocks/Space";

import { RootProps } from "./root";

export type { RootProps } from "./root";

export type Props = {
  Button: ButtonProps;
  Card: CardProps;
  Grid: GridProps;
  Hero: HeroProps;
  Heading: HeadingProps;
  Flex: FlexProps;
  Logos: LogosProps;
  Stats: StatsProps;
  Template: TemplateProps;
  Text: TextProps;
  Space: SpaceProps;
};

export type UserConfig = Config<
  Props,
  RootProps,
  "layout" | "typography" | "interactive"
>;

export type UserData = Data<Props, RootProps>;



================================================
FILE: apps/demo/config/blocks/Blank/index.tsx
================================================
import React from "react";
import { ComponentConfig } from "@/core";
import styles from "./styles.module.css";
import { getClassNameFactory } from "@/core/lib";

const getClassName = getClassNameFactory("Blank", styles);

export type BlankProps = {};

export const Blank: ComponentConfig<BlankProps> = {
  fields: {},
  defaultProps: {},
  render: () => {
    return <div className={getClassName()}></div>;
  },
};



================================================
FILE: apps/demo/config/blocks/Blank/styles.module.css
================================================
.Blank {
  background: hotpink;
  padding: 16px;
}



================================================
FILE: apps/demo/config/blocks/Button/index.tsx
================================================
import React from "react";
import { ComponentConfig } from "@/core/types";
import { Button as _Button } from "@/core/components/Button";

export type ButtonProps = {
  label: string;
  href: string;
  variant: "primary" | "secondary";
};

export const Button: ComponentConfig<ButtonProps> = {
  label: "Button",
  fields: {
    label: { type: "text", placeholder: "Lorem ipsum..." },
    href: { type: "text" },
    variant: {
      type: "radio",
      options: [
        { label: "primary", value: "primary" },
        { label: "secondary", value: "secondary" },
      ],
    },
  },
  defaultProps: {
    label: "Button",
    href: "#",
    variant: "primary",
  },
  render: ({ href, variant, label, puck }) => {
    return (
      <div>
        <_Button
          href={puck.isEditing ? "#" : href}
          variant={variant}
          size="large"
          tabIndex={puck.isEditing ? -1 : undefined}
        >
          {label}
        </_Button>
      </div>
    );
  },
};



================================================
FILE: apps/demo/config/blocks/Card/index.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import React, { ReactElement } from "react";
import { ComponentConfig } from "@/core/types";
import styles from "./styles.module.css";
import { getClassNameFactory } from "@/core/lib";
import dynamic from "next/dynamic";
import dynamicIconImports from "lucide-react/dynamicIconImports";
import { withLayout, WithLayout } from "../../components/Layout";

const getClassName = getClassNameFactory("Card", styles);

const icons = Object.keys(dynamicIconImports).reduce<
  Record<string, ReactElement>
>((acc, iconName) => {
  const El = dynamic((dynamicIconImports as any)[iconName]);

  return {
    ...acc,
    [iconName]: <El />,
  };
}, {});

const iconOptions = Object.keys(dynamicIconImports).map((iconName) => ({
  label: iconName,
  value: iconName,
}));

export type CardProps = WithLayout<{
  title: string;
  description: string;
  icon?: string;
  mode: "flat" | "card";
}>;

const CardInner: ComponentConfig<CardProps> = {
  fields: {
    title: { type: "text" },
    description: { type: "textarea" },
    icon: {
      type: "select",
      options: iconOptions,
    },
    mode: {
      type: "radio",
      options: [
        { label: "card", value: "card" },
        { label: "flat", value: "flat" },
      ],
    },
  },
  defaultProps: {
    title: "Title",
    description: "Description",
    icon: "Feather",
    mode: "flat",
  },
  render: ({ title, icon, description, mode }) => {
    return (
      <div className={getClassName({ [mode]: mode })}>
        <div className={getClassName("inner")}>
          <div className={getClassName("icon")}>{icon && icons[icon]}</div>

          <div className={getClassName("title")}>{title}</div>
          <div className={getClassName("description")}>{description}</div>
        </div>
      </div>
    );
  },
};

export const Card = withLayout(CardInner);



================================================
FILE: apps/demo/config/blocks/Card/styles.module.css
================================================
.Card {
  height: 100%;
}

.Card--card {
  background: white;
  box-shadow: rgba(140, 152, 164, 0.25) 0px 3px 6px 0px;
  border-radius: 8px;
  max-width: 100%;
}

.Card-inner {
  align-items: center;
  display: flex;
  gap: 16px;
  flex-direction: column;
}

.Card--card .Card-inner {
  align-items: flex-start;
  padding: 24px;
}

.Card-icon {
  border-radius: 256px;
  background: var(--puck-color-azure-09);
  color: var(--puck-color-azure-06);
  display: flex;
  justify-content: center;
  align-items: center;
  width: 64px;
  height: 64px;
}

.Card-title {
  font-size: 22px;
  text-align: center;
}

.Card--card .Card-title {
  text-align: left;
}

.Card-description {
  font-size: 16px;
  line-height: 1.5;
  color: var(--puck-color-grey-05);
  text-align: center;
  font-weight: 300;
}

.Card--card .Card-description {
  text-align: left;
}



================================================
FILE: apps/demo/config/blocks/Flex/index.tsx
================================================
import React from "react";
import { ComponentConfig, Slot } from "@/core/types";
import styles from "./styles.module.css";
import { getClassNameFactory } from "@/core/lib";
import { Section } from "../../components/Section";
import { WithLayout, withLayout } from "../../components/Layout";

const getClassName = getClassNameFactory("Flex", styles);

export type FlexProps = WithLayout<{
  justifyContent: "start" | "center" | "end";
  direction: "row" | "column";
  gap: number;
  wrap: "wrap" | "nowrap";
  items: Slot;
}>;

const FlexInternal: ComponentConfig<FlexProps> = {
  fields: {
    direction: {
      label: "Direction",
      type: "radio",
      options: [
        { label: "Row", value: "row" },
        { label: "Column", value: "column" },
      ],
    },
    justifyContent: {
      label: "Justify Content",
      type: "radio",
      options: [
        { label: "Start", value: "start" },
        { label: "Center", value: "center" },
        { label: "End", value: "end" },
      ],
    },
    gap: {
      label: "Gap",
      type: "number",
      min: 0,
    },
    wrap: {
      label: "Wrap",
      type: "radio",
      options: [
        { label: "true", value: "wrap" },
        { label: "false", value: "nowrap" },
      ],
    },
    items: {
      type: "slot",
    },
  },
  defaultProps: {
    justifyContent: "start",
    direction: "row",
    gap: 24,
    wrap: "wrap",
    layout: {
      grow: true,
    },
    items: [],
  },
  render: ({ justifyContent, direction, gap, wrap, items: Items }) => {
    return (
      <Section style={{ height: "100%" }}>
        <Items
          className={getClassName()}
          style={{
            justifyContent,
            flexDirection: direction,
            gap,
            flexWrap: wrap,
          }}
          disallow={["Hero", "Stats"]}
        />
      </Section>
    );
  },
};

export const Flex = withLayout(FlexInternal);



================================================
FILE: apps/demo/config/blocks/Flex/styles.module.css
================================================
.Flex {
  display: flex;
  flex-wrap: wrap;
  height: 100%;
}

.Flex-item {
  flex: 1;
}



================================================
FILE: apps/demo/config/blocks/Grid/index.tsx
================================================
import React from "react";
import { ComponentConfig, Slot } from "@/core/types";
import styles from "./styles.module.css";
import { getClassNameFactory } from "@/core/lib";
import { Section } from "../../components/Section";
import { withLayout } from "../../components/Layout";

const getClassName = getClassNameFactory("Grid", styles);

export type GridProps = {
  numColumns: number;
  gap: number;
  items: Slot;
};

export const GridInternal: ComponentConfig<GridProps> = {
  fields: {
    numColumns: {
      type: "number",
      label: "Number of columns",
      min: 1,
      max: 12,
    },
    gap: {
      label: "Gap",
      type: "number",
      min: 0,
    },
    items: {
      type: "slot",
    },
  },
  defaultProps: {
    numColumns: 4,
    gap: 24,
    items: [],
  },
  render: ({ gap, numColumns, items: Items }) => {
    return (
      <Section>
        <Items
          disallow={["Hero", "Stats"]}
          className={getClassName()}
          style={{
            gap,
            gridTemplateColumns: `repeat(${numColumns}, 1fr)`,
          }}
        />
      </Section>
    );
  },
};

export const Grid = withLayout(GridInternal);



================================================
FILE: apps/demo/config/blocks/Grid/styles.module.css
================================================
.Grid {
  display: flex;
  flex-direction: column;
  width: auto;
}

@media (min-width: 768px) {
  .Grid {
    display: grid;
  }
}



================================================
FILE: apps/demo/config/blocks/Heading/index.tsx
================================================
import React from "react";

import { ComponentConfig } from "@/core";
import { Heading as _Heading } from "@/core/components/Heading";
import type { HeadingProps as _HeadingProps } from "@/core/components/Heading";
import { Section } from "../../components/Section";
import { WithLayout, withLayout } from "../../components/Layout";

export type HeadingProps = WithLayout<{
  align: "left" | "center" | "right";
  text?: string;
  level?: _HeadingProps["rank"];
  size: _HeadingProps["size"];
}>;

const sizeOptions = [
  { value: "xxxl", label: "XXXL" },
  { value: "xxl", label: "XXL" },
  { value: "xl", label: "XL" },
  { value: "l", label: "L" },
  { value: "m", label: "M" },
  { value: "s", label: "S" },
  { value: "xs", label: "XS" },
];

const levelOptions = [
  { label: "", value: "" },
  { label: "1", value: "1" },
  { label: "2", value: "2" },
  { label: "3", value: "3" },
  { label: "4", value: "4" },
  { label: "5", value: "5" },
  { label: "6", value: "6" },
];

const HeadingInternal: ComponentConfig<HeadingProps> = {
  fields: {
    text: {
      type: "textarea",
    },
    size: {
      type: "select",
      options: sizeOptions,
    },
    level: {
      type: "select",
      options: levelOptions,
    },
    align: {
      type: "radio",
      options: [
        { label: "Left", value: "left" },
        { label: "Center", value: "center" },
        { label: "Right", value: "right" },
      ],
    },
  },
  defaultProps: {
    align: "left",
    text: "Heading",
    size: "m",
    layout: {
      padding: "8px",
    },
  },
  render: ({ align, text, size, level }) => {
    return (
      <Section>
        <_Heading size={size} rank={level as any}>
          <span style={{ display: "block", textAlign: align, width: "100%" }}>
            {text}
          </span>
        </_Heading>
      </Section>
    );
  },
};

export const Heading = withLayout(HeadingInternal);



================================================
FILE: apps/demo/config/blocks/Heading/styles.module.css
================================================
.Heading {
  margin: 0;
}



================================================
FILE: apps/demo/config/blocks/Hero/client.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import React from "react";
import { ComponentConfig } from "@/core/types";
import { quotes } from "./quotes";
import { AutoField, FieldLabel } from "@/core";
import { Link2 } from "lucide-react";
import HeroComponent, { HeroProps } from "./Hero";

export const Hero: ComponentConfig<HeroProps> = {
  fields: {
    quote: {
      type: "external",
      placeholder: "Select a quote",
      showSearch: false,
      renderFooter: ({ items }) => {
        return (
          <div>
            {items.length} result{items.length === 1 ? "" : "s"}
          </div>
        );
      },
      filterFields: {
        author: {
          type: "select",
          options: [
            { value: "", label: "Select an author" },
            { value: "Mark Twain", label: "Mark Twain" },
            { value: "Henry Ford", label: "Henry Ford" },
            { value: "Kurt Vonnegut", label: "Kurt Vonnegut" },
            { value: "Andrew Carnegie", label: "Andrew Carnegie" },
            { value: "C. S. Lewis", label: "C. S. Lewis" },
            { value: "Confucius", label: "Confucius" },
            { value: "Eleanor Roosevelt", label: "Eleanor Roosevelt" },
            { value: "Samuel Ullman", label: "Samuel Ullman" },
          ],
        },
      },
      fetchList: async ({ query, filters }) => {
        // Simulate delay
        await new Promise((res) => setTimeout(res, 500));

        return quotes
          .map((quote, idx) => ({
            index: idx,
            title: quote.author,
            description: quote.content,
          }))
          .filter((item) => {
            if (filters?.author && item.title !== filters?.author) {
              return false;
            }

            if (!query) return true;

            const queryLowercase = query.toLowerCase();

            if (item.title.toLowerCase().indexOf(queryLowercase) > -1) {
              return true;
            }

            if (item.description.toLowerCase().indexOf(queryLowercase) > -1) {
              return true;
            }
          });
      },
      mapRow: (item) => ({
        title: item.title,
        description: <span>{item.description}</span>,
      }),
      mapProp: (result) => {
        return { index: result.index, label: result.description };
      },
      getItemSummary: (item) => item.label,
    },
    title: { type: "text" },
    description: { type: "textarea" },
    buttons: {
      type: "array",
      min: 1,
      max: 4,
      getItemSummary: (item) => item.label || "Button",
      arrayFields: {
        label: { type: "text" },
        href: { type: "text" },
        variant: {
          type: "select",
          options: [
            { label: "primary", value: "primary" },
            { label: "secondary", value: "secondary" },
          ],
        },
      },
      defaultItemProps: {
        label: "Button",
        href: "#",
      },
    },
    align: {
      type: "radio",
      options: [
        { label: "left", value: "left" },
        { label: "center", value: "center" },
      ],
    },
    image: {
      type: "object",
      objectFields: {
        content: { type: "slot" },
        url: {
          type: "custom",
          render: ({ value, field, name, onChange, readOnly }) => (
            <FieldLabel
              label={field.label || name}
              readOnly={readOnly}
              icon={<Link2 size="16" />}
            >
              <AutoField
                field={{ type: "text" }}
                value={value}
                onChange={onChange}
                readOnly={readOnly}
              />
            </FieldLabel>
          ),
        },
        mode: {
          type: "radio",
          options: [
            { label: "inline", value: "inline" },
            { label: "bg", value: "background" },
            { label: "custom", value: "custom" },
          ],
        },
      },
    },
    padding: { type: "text" },
  },
  defaultProps: {
    title: "Hero",
    align: "left",
    description: "Description",
    buttons: [{ label: "Learn more", href: "#" }],
    padding: "64px",
  },
  /**
   * The resolveData method allows us to modify component data after being
   * set by the user.
   *
   * It is called after the page data is changed, but before a component
   * is rendered. This allows us to make dynamic changes to the props
   * without storing the data in Puck.
   *
   * For example, requesting a third-party API for the latest content.
   */
  resolveData: async ({ props }, { changed }) => {
    if (!props.quote)
      return { props, readOnly: { title: false, description: false } };

    if (!changed.quote) {
      return { props };
    }

    // Simulate a delay
    await new Promise((resolve) => setTimeout(resolve, 500));

    return {
      props: {
        title: quotes[props.quote.index].author,
        description: quotes[props.quote.index].content,
      },
      readOnly: { title: true, description: true },
    };
  },
  resolveFields: async (data, { fields }) => {
    if (data.props.align === "center") {
      return {
        ...fields,
        image: undefined,
      };
    }

    return fields;
  },
  resolvePermissions: async (data, params) => {
    if (!params.changed.quote) return params.lastPermissions;

    // Simulate delay
    await new Promise((resolve) => setTimeout(resolve, 500));

    return {
      ...params.permissions,
      // Disable delete if quote 7 is selected
      delete: data.props.quote?.index !== 7,
    };
  },
  render: HeroComponent,
};



================================================
FILE: apps/demo/config/blocks/Hero/Hero.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import React from "react";
import styles from "./styles.module.css";
import { getClassNameFactory } from "@/core/lib";
import { Button } from "@/core/components/Button";
import { Section } from "../../components/Section";
import { PuckComponent, Slot } from "@/core/types";

const getClassName = getClassNameFactory("Hero", styles);

export type HeroProps = {
  quote?: { index: number; label: string };
  title: string;
  description: string;
  align?: string;
  padding: string;
  image?: {
    content?: Slot;
    mode?: "inline" | "background" | "custom";
    url?: string;
  };
  buttons: {
    label: string;
    href: string;
    variant?: "primary" | "secondary";
  }[];
};

export const Hero: PuckComponent<HeroProps> = ({
  align,
  title,
  description,
  buttons,
  padding,
  image,
  puck,
}) => {
  return (
    <Section
      className={getClassName({
        left: align === "left",
        center: align === "center",
        hasImageBackground: image?.mode === "background",
      })}
      style={{ paddingTop: padding, paddingBottom: padding }}
    >
      {image?.mode === "background" && (
        <>
          <div
            className={getClassName("image")}
            style={{
              backgroundImage: `url("${image?.url}")`,
            }}
          ></div>

          <div className={getClassName("imageOverlay")}></div>
        </>
      )}

      <div className={getClassName("inner")}>
        <div className={getClassName("content")}>
          <h1>{title}</h1>
          <p className={getClassName("subtitle")}>{description}</p>
          <div className={getClassName("actions")}>
            {buttons.map((button, i) => (
              <Button
                key={i}
                href={button.href}
                variant={button.variant}
                size="large"
                tabIndex={puck.isEditing ? -1 : undefined}
              >
                {button.label}
              </Button>
            ))}
          </div>
        </div>

        {align !== "center" && image?.mode === "inline" && image?.url && (
          <div
            style={{
              backgroundImage: `url('${image?.url}')`,
              backgroundSize: "cover",
              backgroundRepeat: "no-repeat",
              backgroundPosition: "center",
              borderRadius: 24,
              height: 356,
              marginLeft: "auto",
              width: "100%",
            }}
          />
        )}

        {align !== "center" && image?.mode === "custom" && image.content && (
          <image.content
            style={{
              height: 356,
              marginLeft: "auto",
              width: "100%",
            }}
          />
        )}
      </div>
    </Section>
  );
};

export default Hero;



================================================
FILE: apps/demo/config/blocks/Hero/index.tsx
================================================
export * from "./client";
export { type HeroProps } from "./Hero";



================================================
FILE: apps/demo/config/blocks/Hero/quotes.ts
================================================
export const quotes = [
  {
    content:
      "Age is an issue of mind over matter. If you don't mind, it doesn't matter.",
    author: "Mark Twain",
  },
  {
    content:
      "Anyone who stops learning is old, whether at twenty or eighty. Anyone who keeps learning stays young. The greatest thing in life is to keep your mind young.",
    author: "Henry Ford",
  },
  {
    content: "Wrinkles should merely indicate where smiles have been.",
    author: "Mark Twain",
  },
  {
    content:
      "True terror is to wake up one morning and discover that your high school class is running the country.",
    author: "Kurt Vonnegut",
  },
  {
    content:
      "As I grow older, I pay less attention to what men say. I just watch what they do.",
    author: "Andrew Carnegie",
  },
  {
    content:
      "How incessant and great are the ills with which a prolonged old age is replete.",
    author: "C. S. Lewis",
  },
  {
    content:
      "Old age, believe me, is a good and pleasant thing. It is true you are gently shouldered off the stage, but then you are given such a comfortable front stall as spectator.",
    author: "Confucius",
  },
  {
    content:
      "Old age has deformities enough of its own. It should never add to them the deformity of vice.",
    author: "Eleanor Roosevelt",
  },
  {
    content:
      "Nobody grows old merely by living a number of years. We grow old by deserting our ideals. Years may wrinkle the skin, but to give up enthusiasm wrinkles the soul.",
    author: "Samuel Ullman",
  },
];



================================================
FILE: apps/demo/config/blocks/Hero/server.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import { ComponentConfig } from "@/core/types";
import HeroComponent, { HeroProps } from "./Hero";

export const Hero: ComponentConfig<HeroProps> = {
  render: HeroComponent,
};



================================================
FILE: apps/demo/config/blocks/Hero/styles.module.css
================================================
.Hero {
  background-image: linear-gradient(
    rgba(255, 255, 255, 0),
    rgb(247, 250, 255) 100%
  );
  display: flex;
  align-items: center;
  position: relative;
}

.Hero-inner {
  display: flex;
  align-items: center;
  position: relative;
  gap: 48px;
  flex-wrap: wrap;
  z-index: 1;
}

@media (min-width: 1024px) {
  .Hero-inner {
    flex-wrap: nowrap;
  }
}

.Hero h1 {
  line-height: 1.1;
  font-size: 48px;
  margin: 0;
}

@media (min-width: 768px) {
  .Hero h1 {
    font-size: 64px;
  }
}

.Hero-subtitle {
  color: var(--puck-color-grey-05);
  font-size: var(--puck-font-size-m);
  line-height: 1.5;
  margin: 0;
  margin-bottom: 8px;
  font-weight: 300;
}

.Hero--hasImageBackground .Hero-subtitle {
  color: var(--puck-color-grey-03);
}

.Hero-image {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  left: 0;
}

.Hero-imageOverlay {
  background-image: linear-gradient(
    -90deg,
    rgb(247, 250, 255, 0.7) 0%,
    rgb(247, 250, 255, 0.7) 80%
  );
  position: absolute;
  right: 0;
  top: 0;
  bottom: 0;
  left: 0;
}

@media (min-width: 768px) {
  .Hero--left .Hero-imageOverlay {
    background-image: linear-gradient(
      -90deg,
      rgba(255, 255, 255, 0) 0%,
      rgb(247, 250, 255) 70%
    );
  }
}

.Hero-bg img {
  height: 100%;
}

.Hero-content {
  display: flex;
  flex-direction: column;
  gap: 16px;
  width: 100%;
}

@media (min-width: 768px) {
  .Hero--hasImageBackground .Hero-content {
    max-width: 50%;
  }
}

.Hero--center .Hero-inner {
  justify-content: center;
  text-align: center;
}

.Hero--center .Hero-content {
  align-items: center;
  justify-content: center;
  max-width: 100%;
}

.Hero-actions {
  display: flex;
  gap: 16px;
}



================================================
FILE: apps/demo/config/blocks/Logos/index.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import React from "react";
import { ComponentConfig } from "@/core";
import styles from "./styles.module.css";
import { getClassNameFactory } from "@/core/lib";
import { Section } from "../../components/Section";

const getClassName = getClassNameFactory("Logos", styles);

export type LogosProps = {
  logos: {
    alt: string;
    imageUrl: string;
  }[];
};

export const Logos: ComponentConfig<LogosProps> = {
  fields: {
    logos: {
      type: "array",
      getItemSummary: (item, i) => item.alt || `Feature #${i}`,
      defaultItemProps: {
        alt: "",
        imageUrl: "",
      },
      arrayFields: {
        alt: { type: "text" },
        imageUrl: { type: "text" },
      },
    },
  },
  defaultProps: {
    logos: [
      {
        alt: "google",
        imageUrl:
          "https://logolook.net/wp-content/uploads/2021/06/Google-Logo.png",
      },
      {
        alt: "google",
        imageUrl:
          "https://logolook.net/wp-content/uploads/2021/06/Google-Logo.png",
      },
      {
        alt: "google",
        imageUrl:
          "https://logolook.net/wp-content/uploads/2021/06/Google-Logo.png",
      },
      {
        alt: "google",
        imageUrl:
          "https://logolook.net/wp-content/uploads/2021/06/Google-Logo.png",
      },
      {
        alt: "google",
        imageUrl:
          "https://logolook.net/wp-content/uploads/2021/06/Google-Logo.png",
      },
    ],
  },
  render: ({ logos }) => {
    return (
      <Section className={getClassName()}>
        <div className={getClassName("items")}>
          {logos.map((item, i) => (
            <div key={i} className={getClassName("item")}>
              <img
                className={getClassName("image")}
                alt={item.alt}
                src={item.imageUrl}
                height={64}
              ></img>
            </div>
          ))}
        </div>
      </Section>
    );
  },
};



================================================
FILE: apps/demo/config/blocks/Logos/styles.module.css
================================================
.Logos {
  background-color: var(--puck-color-grey-02);
}

.Logos-items {
  display: flex;
  justify-content: space-between;
  padding-bottom: 64px;
  padding-top: 64px;
  gap: 24px;
  filter: grayscale(1) brightness(100);
  opacity: 0.8;
}



================================================
FILE: apps/demo/config/blocks/Space/index.tsx
================================================
import React from "react";

import { ComponentConfig } from "@/core";
import { spacingOptions } from "../../options";
import { getClassNameFactory } from "@/core/lib";

import styles from "./styles.module.css";

const getClassName = getClassNameFactory("Space", styles);

export type SpaceProps = {
  direction?: "" | "vertical" | "horizontal";
  size: string;
};

export const Space: ComponentConfig<SpaceProps> = {
  label: "Space",
  fields: {
    size: {
      type: "select",
      options: spacingOptions,
    },
    direction: {
      type: "radio",
      options: [
        { value: "vertical", label: "Vertical" },
        { value: "horizontal", label: "Horizontal" },
        { value: "", label: "Both" },
      ],
    },
  },
  defaultProps: {
    direction: "",
    size: "24px",
  },
  inline: true,
  render: ({ direction, size, puck }) => {
    return (
      <div
        ref={puck.dragRef}
        className={getClassName(direction ? { [direction]: direction } : {})}
        style={{ "--size": size } as any}
      />
    );
  },
};



================================================
FILE: apps/demo/config/blocks/Space/styles.module.css
================================================
.Space {
  display: block;
  height: var(--size);
  width: var(--size);
}

.Space--vertical {
  width: 100%;
}

.Space--horizontal {
  width: var(--size);
  height: 100%;
}



================================================
FILE: apps/demo/config/blocks/Stats/index.tsx
================================================
/* eslint-disable @next/next/no-img-element */
import React from "react";
import { ComponentConfig } from "@/core";
import styles from "./styles.module.css";
import { getClassNameFactory } from "@/core/lib";
import { Section } from "../../components/Section";

const getClassName = getClassNameFactory("Stats", styles);

export type StatsProps = {
  items: {
    title: string;
    description: string;
  }[];
};

export const Stats: ComponentConfig<StatsProps> = {
  fields: {
    items: {
      type: "array",
      getItemSummary: (item, i) => item.title || `Feature #${i}`,
      defaultItemProps: {
        title: "Stat",
        description: "1,000",
      },
      arrayFields: {
        title: { type: "text" },
        description: { type: "text" },
      },
    },
  },
  defaultProps: {
    items: [
      {
        title: "Stat",
        description: "1,000",
      },
    ],
  },
  render: ({ items }) => {
    return (
      <Section className={getClassName()} maxWidth={"916px"}>
        <div className={getClassName("items")}>
          {items.map((item, i) => (
            <div key={i} className={getClassName("item")}>
              <div className={getClassName("label")}>{item.title}</div>
              <div className={getClassName("value")}>{item.description}</div>
            </div>
          ))}
        </div>
      </Section>
    );
  },
};



================================================
FILE: apps/demo/config/blocks/Stats/styles.module.css
================================================
.Stats-items {
  background-image: linear-gradient(
    120deg,
    var(--puck-color-azure-03) 0%,
    var(--puck-color-azure-05) 100%
  );
  border-radius: 24px;
  display: grid;
  grid-template-columns: 1fr;
  grid-gap: 72px;
  align-items: center;
  justify-content: space-between;
  margin: 0 auto;
  max-width: 768px;
  padding: 64px 16px;
}

@media (min-width: 768px) {
  .Stats-items {
    padding: 64px 24px;
  }
}

@media (min-width: 1024px) {
  .Stats-items {
    grid-template-columns: 1fr 1fr;
    padding: 128px 24px;
    max-width: 100%;
  }
}

.Stats-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  color: white;
  gap: 8px;
  overflow: hidden;
  width: 100%;
}

.Stats-icon {
  border-radius: 256px;
  background: var(--puck-color-azure-09);
  color: var(--puck-color-azure-06);
  display: flex;
  justify-content: center;
  align-items: center;
  width: 64px;
  height: 64px;
}

.Stats-label {
  font-size: 22px;
  text-align: center;
  font-weight: 600;
  opacity: 0.8;
}

.Stats-value {
  font-size: 72px;
  line-height: 1;
  font-weight: 700;
}



================================================
FILE: apps/demo/config/blocks/Template/client.tsx
================================================
/* eslint-disable react-hooks/rules-of-hooks */
import React, { useState } from "react";
import { AutoField, Button, createUsePuck, FieldLabel, walkTree } from "@/core";
import { ComponentConfig, ComponentDataOptionalId, Slot } from "@/core/types";
import { withLayout } from "../../components/Layout";
import { generateId } from "@/core/lib/generate-id";
import { componentKey } from "../../index";
import { type Props } from "../../types";
import TemplateComponent, { TemplateProps } from "./Template";

const usePuck = createUsePuck();

async function createComponent<T extends keyof Props>(
  component: T,
  props?: Partial<Props[T]>
): Promise<ComponentDataOptionalId<Props[T]>> {
  const { conf: config } = await import("../../index");

  return {
    type: component,
    props: {
      ...config.components[component].defaultProps,
      ...props,
    },
  } as ComponentDataOptionalId<Props[T]>;
}

type TemplateData = Record<string, { label: string; data: Slot }>;

export const TemplateInternal: ComponentConfig<TemplateProps> = {
  fields: {
    template: {
      type: "custom",
      render: ({ name, value, onChange }) => {
        const templateKey = `puck-demo-templates:${componentKey}`;

        const props = usePuck((s) => s.selectedItem?.props) as
          | TemplateProps
          | undefined;

        const [templates, setTemplates] = useState<TemplateData>(
          JSON.parse(localStorage.getItem(templateKey) ?? "{}")
        );

        return (
          <FieldLabel label={name}>
            <AutoField
              value={value}
              onChange={onChange}
              field={{
                type: "select",
                options: [
                  { label: "Blank", value: "blank" },
                  { label: "Example 1", value: "example_1" },
                  { label: "Example 2", value: "example_2" },
                  ...Object.entries(templates).map(([key, template]) => ({
                    value: key,
                    label: template.label,
                  })),
                ],
              }}
            />
            <div style={{ marginLeft: "auto", marginTop: 16 }}>
              <Button
                variant="secondary"
                onClick={async () => {
                  if (!props?.children) {
                    return;
                  }

                  const templateId = generateId();

                  const { conf: config } = await import("../../index");

                  const data = props.children.map((child) =>
                    walkTree(
                      {
                        type: child.type,
                        props: { ...child.props, id: generateId(child.type) },
                      },
                      config,
                      (content) =>
                        content.map((item) => ({
                          ...item,
                          props: { ...item.props, id: generateId(item.type) },
                        }))
                    )
                  );

                  const templateData = {
                    ...templates,
                    [templateId]: {
                      label: new Date().toLocaleString(),
                      data,
                    },
                  };

                  localStorage.setItem(
                    templateKey,
                    JSON.stringify(templateData)
                  );

                  setTemplates(templateData);

                  onChange(templateId);
                }}
              >
                Save new template
              </Button>
            </div>
          </FieldLabel>
        );
      },
    },
    children: {
      type: "slot",
    },
  },
  defaultProps: {
    template: "example_1",
    children: [],
  },
  resolveData: async (data, { changed, trigger }) => {
    if (!changed.template || trigger === "load") return data;

    const templateKey = `puck-demo-templates:${componentKey}`;

    const templates: TemplateData = {
      ...JSON.parse(localStorage.getItem(templateKey) ?? "{}"),
      blank: {
        label: "Blank",
        data: [],
      },
      example_1: {
        label: "Example 1",
        data: [
          await createComponent("Heading", {
            text: "Template example.",
            size: "xl",
          }),
          await createComponent("Text", {
            text: "This component uses the slots API. Try changing template, or saving a new one via the template field.",
          }),
        ],
      },
      example_2: {
        label: "Example 2",
        data: [
          await createComponent("Grid", {
            numColumns: 2,
            items: [
              await createComponent("Card", { title: "A card", mode: "card" }),
              await createComponent("Flex", {
                direction: "column",
                gap: 0,
                items: [
                  await createComponent("Space", {
                    size: "32px",
                  }),
                  await createComponent("Heading", {
                    text: "Template example",
                    size: "xl",
                  }),
                  await createComponent("Text", {
                    text: "Dynamically create components using the new slots API.",
                  }),
                  await createComponent("Space", {
                    size: "16px",
                  }),
                  await createComponent("Button", {
                    variant: "secondary",
                    label: "Learn more",
                  }),
                  await createComponent("Space", {
                    size: "32px",
                  }),
                ],
              }),
            ],
          }),
        ],
      },
    };

    const children =
      templates[data.props.template]?.data || templates["example_1"].data;

    return {
      ...data,
      props: {
        ...data.props,
        children,
      },
    };
  },
  render: TemplateComponent,
};

export const Template = withLayout(TemplateInternal);



================================================
FILE: apps/demo/config/blocks/Template/index.tsx
================================================
export * from "./client";
export { type TemplateProps } from "./Template";



================================================
FILE: apps/demo/config/blocks/Template/server.tsx
================================================
import { ComponentConfig } from "@/core/types";
import { withLayout } from "../../components/Layout";
import TemplateComponent, { TemplateProps } from "./Template";

export const TemplateInternal: ComponentConfig<TemplateProps> = {
  render: TemplateComponent,
};

export const Template = withLayout(TemplateInternal);



================================================
FILE: apps/demo/config/blocks/Template/styles.module.css
================================================
.Template {
  display: flex;
  flex-direction: column;
  width: auto;
}

@media (min-width: 768px) {
  .Template {
    display: grid;
  }
}



================================================
FILE: apps/demo/config/blocks/Template/Template.tsx
================================================
import React from "react";
import { Slot } from "@/core/types";
import styles from "./styles.module.css";
import { getClassNameFactory } from "@/core/lib";
import { Section } from "../../components/Section";
import { PuckComponent } from "@/core/types";

const getClassName = getClassNameFactory("Template", styles);

export type TemplateProps = {
  template: string;
  children: Slot;
};

export const Template: PuckComponent<TemplateProps> = ({
  children: Children,
}) => {
  return (
    <Section>
      <Children className={getClassName()} />
    </Section>
  );
};

export default Template;



================================================
FILE: apps/demo/config/blocks/Text/index.tsx
================================================
import React from "react";
import { ALargeSmall, AlignLeft } from "lucide-react";

import { ComponentConfig } from "@/core";
import { Section } from "../../components/Section";
import { WithLayout, withLayout } from "../../components/Layout";

export type TextProps = WithLayout<{
  align: "left" | "center" | "right";
  text?: string;
  padding?: string;
  size?: "s" | "m";
  color: "default" | "muted";
  maxWidth?: string;
}>;

const TextInner: ComponentConfig<TextProps> = {
  fields: {
    text: { type: "textarea" },
    size: {
      type: "select",
      labelIcon: <ALargeSmall size={16} />,
      options: [
        { label: "S", value: "s" },
        { label: "M", value: "m" },
      ],
    },
    align: {
      type: "radio",
      labelIcon: <AlignLeft size={16} />,
      options: [
        { label: "Left", value: "left" },
        { label: "Center", value: "center" },
        { label: "Right", value: "right" },
      ],
    },
    color: {
      type: "radio",
      options: [
        { label: "Default", value: "default" },
        { label: "Muted", value: "muted" },
      ],
    },
    maxWidth: { type: "text" },
  },
  defaultProps: {
    align: "left",
    text: "Text",
    size: "m",
    color: "default",
  },
  render: ({ align, color, text, size, maxWidth }) => {
    return (
      <Section maxWidth={maxWidth}>
        <span
          style={{
            color:
              color === "default" ? "inherit" : "var(--puck-color-grey-05)",
            display: "flex",
            textAlign: align,
            width: "100%",
            fontSize: size === "m" ? "20px" : "16px",
            fontWeight: 300,
            maxWidth,
            justifyContent:
              align === "center"
                ? "center"
                : align === "right"
                ? "flex-end"
                : "flex-start",
          }}
        >
          {text}
        </span>
      </Section>
    );
  },
};

export const Text = withLayout(TextInner);



================================================
FILE: apps/demo/config/blocks/Text/styles.module.css
================================================
.Text {
  line-height: 1.5;
  padding: 0px;
}



================================================
FILE: apps/demo/config/components/Footer/index.tsx
================================================
import { ReactNode } from "react";
import { Section } from "../Section";

const FooterLink = ({ children, href }: { children: string; href: string }) => {
  const El = href ? "a" : "span";

  return (
    <li style={{ paddingBottom: 8 }}>
      <El
        href={href}
        style={{
          textDecoration: "none",
          fontSize: "14px",
          color: "var(--puck-color-grey-05)",
        }}
      >
        {children}
      </El>
    </li>
  );
};

const FooterList = ({
  children,
  title,
}: {
  children: ReactNode;
  title: string;
}) => {
  return (
    <div>
      <h3
        style={{
          margin: 0,
          padding: 0,
          fontSize: "inherit",
          fontWeight: "600",
          color: "var(--puck-color-grey-03)",
        }}
      >
        {title}
      </h3>
      <ul
        style={{
          listStyle: "none",
          margin: 0,
          padding: 0,
          paddingTop: 12,
        }}
      >
        {children}
      </ul>
    </div>
  );
};

const Footer = ({ children }: { children: ReactNode }) => {
  return (
    <footer style={{ background: "var(--puck-color-grey-12)" }}>
      <h2 style={{ visibility: "hidden", height: 0, margin: 0 }}>Footer</h2>
      <div style={{ padding: 32 }}>
        <Section>
          <div
            style={{
              display: "grid",
              gridGap: 24,
              gridTemplateColumns: "repeat(auto-fit, minmax(200px, 1fr))",
              paddingTop: 24,
              paddingBottom: 24,
            }}
          >
            {children}
          </div>
        </Section>
      </div>
      <div
        style={{
          padding: 64,
          textAlign: "center",
          color: "var(--puck-color-grey-03)",
          background: "var(--puck-color-grey-11)",
        }}
      >
        Made by{" "}
        <a
          href="https://github.com/chrisvxd"
          target="_blank"
          style={{ color: "inherit", textDecoration: "none", fontWeight: 600 }}
        >
          Chris Villa
        </a>
      </div>
    </footer>
  );
};

Footer.List = FooterList;
Footer.Link = FooterLink;

export { Footer };



================================================
FILE: apps/demo/config/components/Header/index.tsx
================================================
import { getClassNameFactory } from "@/core/lib";

import styles from "./styles.module.css";

const getClassName = getClassNameFactory("Header", styles);

const NavItem = ({ label, href }: { label: string; href: string }) => {
  const navPath =
    typeof window !== "undefined"
      ? window.location.pathname.replace("/edit", "") || "/"
      : "/";

  const isActive = navPath === (href.replace("/edit", "") || "/");

  const El = href ? "a" : "span";

  return (
    <El
      href={href || "/"}
      style={{
        textDecoration: "none",
        color: isActive
          ? "var(--puck-color-grey-02)"
          : "var(--puck-color-grey-06)",
        fontWeight: isActive ? "600" : "400",
      }}
    >
      {label}
    </El>
  );
};

const Header = ({ editMode }: { editMode: boolean }) => (
  <div className={getClassName()}>
    <header className={getClassName("inner")}>
      <div className={getClassName("logo")}>LOGO</div>
      <nav className={getClassName("items")}>
        <NavItem label="Home" href={`${editMode ? "" : "/"}`} />
        <NavItem label="Pricing" href={editMode ? "" : "/pricing"} />
        <NavItem label="About" href={editMode ? "" : "/about"} />
      </nav>
    </header>
  </div>
);

export { Header };



================================================
FILE: apps/demo/config/components/Header/styles.module.css
================================================
.Header {
  background-color: white;
  position: sticky;
  top: 0;
  z-index: 2;
}

.Header-inner {
  align-items: center;
  display: flex;
  margin-inline-start: auto;
  margin-inline-end: auto;
  max-width: 1280px;
  padding: 24px 16px;
}

@media (min-width: 768px) {
  .Header-inner {
    padding: 24px;
  }
}

.Header-logo {
  font-size: 24px;
  font-weight: 800;
  letter-spacing: 1.4;
  opacity: 0.8;
}

.Header-items {
  display: flex;
  gap: 24px;
  margin-inline-start: auto;
}

@media (min-width: 1024px) {
  .Header-items {
    gap: 32px;
  }
}



================================================
FILE: apps/demo/config/components/Layout/index.tsx
================================================
import { CSSProperties, forwardRef, ReactNode } from "react";
import {
  ComponentConfig,
  DefaultComponentProps,
  ObjectField,
} from "@/core/types";
import { spacingOptions } from "../../options";
import { getClassNameFactory } from "@/core/lib";
import styles from "./styles.module.css";

const getClassName = getClassNameFactory("Layout", styles);

type LayoutFieldProps = {
  padding?: string;
  spanCol?: number;
  spanRow?: number;
  grow?: boolean;
};

export type WithLayout<Props extends DefaultComponentProps> = Props & {
  layout?: LayoutFieldProps;
};

type LayoutProps = WithLayout<{
  children: ReactNode;
  className?: string;
  style?: CSSProperties;
}>;

export const layoutField: ObjectField<LayoutFieldProps> = {
  type: "object",
  objectFields: {
    spanCol: {
      label: "Grid Columns",
      type: "number",
      min: 1,
      max: 12,
    },
    spanRow: {
      label: "Grid Rows",
      type: "number",
      min: 1,
      max: 12,
    },
    grow: {
      label: "Flex Grow",
      type: "radio",
      options: [
        { label: "true", value: true },
        { label: "false", value: false },
      ],
    },
    padding: {
      type: "select",
      label: "Vertical Padding",
      options: [{ label: "0px", value: "0px" }, ...spacingOptions],
    },
  },
};

const Layout = forwardRef<HTMLDivElement, LayoutProps>(
  ({ children, className, layout, style }, ref) => {
    return (
      <div
        className={className}
        style={{
          gridColumn: layout?.spanCol
            ? `span ${Math.max(Math.min(layout.spanCol, 12), 1)}`
            : undefined,
          gridRow: layout?.spanRow
            ? `span ${Math.max(Math.min(layout.spanRow, 12), 1)}`
            : undefined,
          paddingTop: layout?.padding,
          paddingBottom: layout?.padding,
          flex: layout?.grow ? "1 1 0" : undefined,
          ...style,
        }}
        ref={ref}
      >
        {children}
      </div>
    );
  }
);

Layout.displayName = "Layout";

export { Layout };

export function withLayout<
  Props extends DefaultComponentProps = DefaultComponentProps
>(
  componentConfig: ComponentConfig<Props>
): ComponentConfig<Props & { layout?: LayoutFieldProps }> {
  return {
    ...(componentConfig as any),
    fields: {
      ...componentConfig.fields,
      layout: layoutField,
    },
    defaultProps: {
      ...componentConfig.defaultProps,
      layout: {
        spanCol: 1,
        spanRow: 1,
        padding: "0px",
        grow: false,
        ...componentConfig.defaultProps?.layout,
      },
    },
    resolveFields: (_, params) => {
      if (params.parent?.type === "Grid") {
        return {
          ...componentConfig.fields,
          layout: {
            ...layoutField,
            objectFields: {
              spanCol: layoutField.objectFields.spanCol,
              spanRow: layoutField.objectFields.spanRow,
              padding: layoutField.objectFields.padding,
            },
          },
        };
      }
      if (params.parent?.type === "Flex") {
        return {
          ...componentConfig.fields,
          layout: {
            ...layoutField,
            objectFields: {
              grow: layoutField.objectFields.grow,
              padding: layoutField.objectFields.padding,
            },
          },
        };
      }

      return {
        ...componentConfig.fields,
        layout: {
          ...layoutField,
          objectFields: {
            padding: layoutField.objectFields.padding,
          },
        },
      };
    },
    inline: true,
    render: (props) => (
      <Layout
        className={getClassName()}
        layout={props.layout as LayoutFieldProps}
        ref={props.puck.dragRef}
      >
        {componentConfig.render(props)}
      </Layout>
    ),
  };
}



================================================
FILE: apps/demo/config/components/Layout/styles.module.css
================================================
.Layout {
  display: block;
}



================================================
FILE: apps/demo/config/components/Section/index.tsx
================================================
import { CSSProperties, forwardRef, ReactNode } from "react";
import styles from "./styles.module.css";
import { getClassNameFactory } from "@/core/lib";

const getClassName = getClassNameFactory("Section", styles);

export type SectionProps = {
  className?: string;
  children: ReactNode;
  maxWidth?: string;
  style?: CSSProperties;
};

export const Section = forwardRef<HTMLDivElement, SectionProps>(
  ({ children, className, maxWidth = "1280px", style = {} }, ref) => {
    return (
      <div
        className={`${getClassName()}${className ? ` ${className}` : ""}`}
        style={{
          ...style,
        }}
        ref={ref}
      >
        <div className={getClassName("inner")} style={{ maxWidth }}>
          {children}
        </div>
      </div>
    );
  }
);



================================================
FILE: apps/demo/config/components/Section/styles.module.css
================================================
.Section:not(.Section .Section) {
  padding-inline-start: 16px;
  padding-inline-end: 16px;
}

@media (min-width: 768px) {
  .Section:not(.Section .Section) {
    padding-inline-start: 24px;
    padding-inline-end: 24px;
  }
}

.Section-inner {
  margin-inline-start: auto;
  margin-inline-end: auto;
  height: 100%;
  width: 100%;
}

.Section .Section .Section-inner {
  margin-inline-start: 0;
  margin-inline-end: 0;
}



================================================
FILE: apps/demo/lib/resolve-puck-path.ts
================================================
const resolvePuckPath = (puckPath: string[] = []) => {
  const hasPath = puckPath.length > 0;

  const isEdit = hasPath ? puckPath[puckPath.length - 1] === "edit" : false;

  return {
    isEdit,
    path: `/${(isEdit
      ? [...puckPath].slice(0, puckPath.length - 1)
      : [...puckPath]
    ).join("/")}`,
  };
};

export default resolvePuckPath;



================================================
FILE: apps/demo/lib/use-demo-data.ts
================================================
import { useEffect, useState } from "react";
import config, { componentKey } from "../config";
import { initialData } from "../config/initial-data";
import { Metadata, resolveAllData } from "@/core";
import { Props, UserData } from "../config/types";
import { RootProps } from "../config/root";

const isBrowser = typeof window !== "undefined";

export const useDemoData = ({
  path,
  isEdit,
  metadata = {},
}: {
  path: string;
  isEdit: boolean;
  metadata?: Metadata;
}) => {
  // unique b64 key that updates each time we add / remove components

  const key = `puck-demo:${componentKey}:${path}`;

  const [data] = useState<Partial<UserData>>(() => {
    if (isBrowser) {
      const dataStr = localStorage.getItem(key);

      if (dataStr) {
        return JSON.parse(dataStr);
      }

      return initialData[path] || {};
    }
  });

  // Normally this would happen on the server, but we can't
  // do that because we're using local storage as a database
  const [resolvedData, setResolvedData] = useState<Partial<UserData>>(data);

  useEffect(() => {
    if (data && !isEdit) {
      resolveAllData<Props, RootProps>(data, config, metadata).then(
        setResolvedData
      );
    }
  }, [data, isEdit]);

  useEffect(() => {
    if (!isEdit) {
      const title = data?.root?.props?.title || data?.root?.title;
      document.title = title || "";
    }
  }, [data, isEdit]);

  return { data, resolvedData, key };
};



================================================
FILE: apps/demo/tsconfig/base.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}



================================================
FILE: apps/demo/tsconfig/nextjs.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "allowJs": true,
    "declaration": false,
    "declarationMap": false,
    "incremental": true,
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "noEmit": true,
    "resolveJsonModule": true,
    "strict": false,
    "target": "es6"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: apps/docs/middleware.ts
================================================
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

import releases from "./releases.json";

const versionPattern = /\/v\/([\d+|\.]+|canary)/;

export function middleware(request: NextRequest) {
  const path = `${request.nextUrl.pathname}${request.nextUrl.search}`;

  const urlMatch = versionPattern.exec(request.url);

  if (urlMatch) {
    const version = urlMatch[1];
    const newUrl = `${releases[version]}${path}`;

    return NextResponse.rewrite(new URL(newUrl));
  }
}

// See "Matching Paths" below to learn more
export const config = {
  matcher: ["/v/:path*"],
};



================================================
FILE: apps/docs/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/building-your-application/configuring/typescript for more information.



================================================
FILE: apps/docs/next-sitemap.config.js
================================================
/** @type {import('next-sitemap').IConfig} */
module.exports = {
  siteUrl: "https://puckeditor.com",
  generateIndexSitemap: false,
};



================================================
FILE: apps/docs/next.config.mjs
================================================
import packageJson from "./package.json" assert { type: "json" };
import nextra from "nextra";

const withNextra = nextra({
  theme: "nextra-theme-docs",
  themeConfig: "./theme.config.tsx",
});

const BRANCH_NAME = process.env.VERCEL_GIT_COMMIT_REF || "";
const IS_RELEASE_BRANCH = BRANCH_NAME.startsWith("releases/");

export default withNextra({
  async redirects() {
    return [
      {
        source: "/docs/api-reference/configuration/fields/:path*",
        destination: "/docs/api-reference/fields/:path*",
        permanent: true,
      },
      {
        source: "/docs/api-reference/plugins",
        destination: "/docs/api-reference/plugin",
        permanent: true,
      },
      {
        source: "/docs/api-reference/overrides/component-list",
        destination: "/docs/api-reference/overrides/components",
        permanent: true,
      },
      {
        source: "/docs/api-reference/data",
        destination: "/docs/api-reference/data-model/data",
        permanent: true,
      },
      {
        source: "/docs/api-reference/app-state",
        destination: "/docs/api-reference/data-model/app-state",
        permanent: true,
      },
      {
        source: "/docs/extending-puck/custom-interfaces",
        destination: "/docs/extending-puck/composition",
        permanent: true,
      },
    ];
  },
  transpilePackages: ["@measured/puck"],
  basePath: IS_RELEASE_BRANCH
    ? `/v/${packageJson.version}`
    : process.env.NEXT_PUBLIC_IS_CANARY
    ? "/v/canary"
    : "",
});



================================================
FILE: apps/docs/package.json
================================================
{
  "name": "docs",
  "version": "0.19.1",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "postbuild": "next-sitemap",
    "start": "next start",
    "lint": "next lint"
  },
  "devDependencies": {
    "@types/node": "^17.0.12",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "eslint-config-custom": "*",
    "typescript": "^5.5.4"
  },
  "dependencies": {
    "next": "^14.2.11",
    "next-sitemap": "^4.2.3",
    "nextra": "^3.2.5",
    "nextra-theme-docs": "^3.2.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  }
}



================================================
FILE: apps/docs/releases.json
================================================
{
  "canary": "https://puck-docs-git-main-measured.vercel.app",
  "0.18.3": "https://puck-docs-git-releases-v0183-measured.vercel.app",
  "0.18.2": "https://puck-docs-git-releases-v0182-measured.vercel.app",
  "0.18.1": "https://puck-docs-git-releases-v0181-measured.vercel.app",
  "0.18.0": "https://puck-docs-git-releases-v0180-measured.vercel.app",
  "0.17.4": "https://puck-docs-git-releases-v0174-measured.vercel.app",
  "0.17.3": "https://puck-docs-git-releases-v0173-measured.vercel.app",
  "0.17.2": "https://puck-docs-git-releases-v0172-measured.vercel.app",
  "0.17.1": "https://puck-docs-git-releases-v0171-measured.vercel.app",
  "0.17.0": "https://puck-docs-git-releases-v0170-measured.vercel.app",
  "0.16.2": "https://puck-docs-git-releases-v0162-measured.vercel.app",
  "0.16.1": "https://puck-docs-git-releases-v0161-measured.vercel.app",
  "0.16.0": "https://puck-docs-git-releases-v0160-measured.vercel.app",
  "0.15.0": "https://puck-docs-git-releases-v0150-measured.vercel.app",
  "0.14.2": "https://puck-docs-git-releases-v0142-measured.vercel.app",
  "0.14.1": "https://puck-docs-git-releases-v0141-measured.vercel.app",
  "0.14.0": "https://puck-docs-git-releases-v0140-measured.vercel.app",
  "0.13.1": "https://puck-docs-git-releases-v0131-measured.vercel.app",
  "0.13.0": "https://puck-docs-git-releases-v0130-measured.vercel.app",
  "0.12.0": "https://puck-docs-git-releases-v0120-measured.vercel.app"
}



================================================
FILE: apps/docs/styles.css
================================================
@import "../../packages/core/styles.css";

article p a,
article li a,
article td a {
  color: var(--puck-color-azure-05) !important;
}

article p a:hover,
article li a:hover,
article td a:hover {
  color: var(--puck-color-azure-03) !important;
}

html.dark p a:hover,
html.dark li a:hover {
  color: var(--puck-color-azure-07) !important;
}

li > a {
  white-space: nowrap;
}



================================================
FILE: apps/docs/theme.config.tsx
================================================
/* eslint-disable react-hooks/rules-of-hooks */
import { useRouter } from "next/router";
import { DocsThemeConfig, useConfig } from "nextra-theme-docs";

import { ReleaseSwitcher } from "./components/ReleaseSwitcher";
import { FooterActions } from "./components/FooterActions";
import { Viewport } from "./components/Viewport";

const Head = () => {
  const { asPath, defaultLocale, locale } = useRouter();
  const { frontMatter, title } = useConfig();

  const siteUrl = "https://puckeditor.com";
  const url =
    siteUrl + (defaultLocale === locale ? asPath : `/${locale}${asPath}`);

  const defaultTitle = `Puck - The open-source visual editor for React`;
  const description =
    frontMatter.description ||
    `Puck empowers developers to build amazing visual editing experiences into their own React applications, powering the next generation of content tools.`;

  return (
    <>
      <link rel="canonical" href={`${siteUrl}${asPath}`} />
      <meta property="og:url" content={url} />
      <meta property="description" content={description} />
      <meta property="og:description" content={description} />
      <meta property="og:type" content="website" />
      <meta property="og:image" content={`${siteUrl}/social.png`} />
      <meta property="og:image:height" content="675" />
      <meta property="og:image:width" content="1200" />
      <meta property="og:image:alt" content="Puck" />
      <meta property="og:image:type" content="image/png" />
      <meta property="og:locale" content="en" />
      <meta property="og:site_name" content={defaultTitle} />
      <meta name="image" content={`${siteUrl}/social.png`} />
      <meta itemProp="image" content={`${siteUrl}/social.png`} />
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:image" content={`${siteUrl}/social.png`} />
      <meta name="twitter:description" content={description} />
      <meta name="twitter:image:alt" content="Puck" />
      <meta name="twitter:image:height" content="675" />
      <meta name="twitter:image:type" content="image/png" />
      <meta name="twitter:image:width" content="1200" />
      <meta name="twitter:site" content="@puckeditor" />
      <meta
        name="twitter:title"
        content={title !== defaultTitle ? `${title} - Puck` : defaultTitle}
      />
      <title>{title !== defaultTitle ? `${title} - Puck` : defaultTitle}</title>

      <link rel="icon" href="/favicon.ico" sizes="48x48" />
      <link rel="icon" href="/favicon.svg" type="image/svg+xml" />
      <link rel="apple-touch-icon" href="/apple-touch-icon.png" />
      <link rel="manifest" href="/manifest.webmanifest" />
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{
          __html: `{
      "@context" : "https://schema.org",
      "@type" : "WebSite",
      "name" : "Puck",
      "url" : "https://puckeditor.com/"
    }`,
        }}
      />
      {asPath == "/" && (
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: `${JSON.stringify({
              "@context": "https://schema.org",
              "@type": "WebSite",
              name: "Puck",
              url: siteUrl,
            })}`,
          }}
        />
      )}
    </>
  );
};

const theme: DocsThemeConfig = {
  head: Head,
  logo: (
    <div>
      <svg
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 1300 326"
        width="1300"
        height="326"
        style={{ width: 128, marginBottom: -5, height: 32 }}
        fill="currentColor"
      >
        <path d="M368.9 5.9H455c48.1 0 88.1 15.4 88.1 70.4 0 54.4-37 71.1-85.8 71.1H420v90.4h-51.1V5.9zm51.1 98.2h34c18 0 36-6.2 36-27.8 0-23.9-24.2-27.2-43.9-27.2H420v55zM786 148.3c0 54.7-33.4 95.3-97.6 95.3-64.5 0-97.9-40.6-97.9-95.3V5.9h51.1v140.5c0 28.5 19.6 50.1 46.8 50.1 26.8 0 46.5-21.6 46.5-50.1V5.9H786v142.4zM997.1 66.1c-10.1-12.1-24.9-19-43.9-19-38.6 0-67.1 31.4-67.1 74.7s28.5 74.7 65.5 74.7c20.6 0 37.3-9.2 47.8-24.9l42.6 31.8c-19.3 27.5-52.1 40.3-83.8 40.3-72.4 0-125.1-47.5-125.1-121.8C833.1 47.5 885.8 0 958.2 0c25.9 0 58.6 8.8 78.3 34.1l-39.4 32zM1083.2 5.9h51.1v96.3l90-96.3h66.8L1188 113.6l112 124.1h-71.4l-94.3-110v110h-51.1V5.9zM149.3 237.7H82.5v-24.4h66.9v24.4zm82.5-82.5h-24.4V88.4h24.4v66.8zm-207.4 0H0V88.4h24.4v66.8zM149.3 30.3H82.5V5.9h66.9v24.4zM45.6 237.7H0v-45.6h24.4v21.2h21.2v24.4zM231.8 51.5h-24.4V30.3h-21.2V5.9h45.6v45.6zm-207.4 0H0V5.9h45.6v24.4H24.4v21.2zM164.8 170.7l27.5 155.2L320 198.2l-155.2-27.5z" />
      </svg>
    </div>
  ),
  project: {
    link: "https://github.com/measuredco/puck",
  },
  footer: {
    content: (
      <div className="flex w-full flex-col items-center sm:items-start">
        <p className="mt-6 text-xs">
          MIT © {new Date().getFullYear()}{" "}
          <a
            style={{ textDecoration: "underline" }}
            href="https://github.com/measuredco/puck/graphs/contributors"
          >
            The Puck Contributors
          </a>
        </p>
      </div>
    ),
  },
  chat: {
    link: "https://discord.gg/D9e4E3MQVZ",
    icon: (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        preserveAspectRatio="xMidYMid"
        viewBox="0 -28.5 256 256"
        fill="currentColor"
      >
        <path d="M216.856 16.597A208.502 208.502 0 0 0 164.042 0c-2.275 4.113-4.933 9.645-6.766 14.046-19.692-2.961-39.203-2.961-58.533 0-1.832-4.4-4.55-9.933-6.846-14.046a207.809 207.809 0 0 0-52.855 16.638C5.618 67.147-3.443 116.4 1.087 164.956c22.169 16.555 43.653 26.612 64.775 33.193A161.094 161.094 0 0 0 79.735 175.3a136.413 136.413 0 0 1-21.846-10.632 108.636 108.636 0 0 0 5.356-4.237c42.122 19.702 87.89 19.702 129.51 0a131.66 131.66 0 0 0 5.355 4.237 136.07 136.07 0 0 1-21.886 10.653c4.006 8.02 8.638 15.67 13.873 22.848 21.142-6.58 42.646-16.637 64.815-33.213 5.316-56.288-9.08-105.09-38.056-148.36ZM85.474 135.095c-12.645 0-23.015-11.805-23.015-26.18s10.149-26.2 23.015-26.2c12.867 0 23.236 11.804 23.015 26.2.02 14.375-10.148 26.18-23.015 26.18Zm85.051 0c-12.645 0-23.014-11.805-23.014-26.18s10.148-26.2 23.014-26.2c12.867 0 23.236 11.804 23.015 26.2 0 14.375-10.148 26.18-23.015 26.18Z" />
      </svg>
    ),
  },
  toc: {
    backToTop: true,
  },
  banner:
    process.env.NEXT_PUBLIC_IS_LATEST === "true"
      ? {
          dismissible: true,
          key: "v0.18.0",
          content: (
            <a
              href="https://github.com/measuredco/puck/releases"
              target="_blank"
            >
              <b>🎈 Puck 0.18</b>: The new drag-and-drop engine is here, with
              CSS grid & flexbox support →
            </a>
          ),
        }
      : {},
  docsRepositoryBase: "https://github.com/measuredco/puck/tree/main/apps/docs",
  navbar: {
    extraContent: () => (
      <Viewport desktop>
        <ReleaseSwitcher />
      </Viewport>
    ),
  },
  themeSwitch: {
    component: FooterActions,
  },
};

export default theme;



================================================
FILE: apps/docs/tsconfig.json
================================================
{
  "extends": "./tsconfig/nextjs.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "paths": {
      "@/puck": ["../../packages/core"],
      "@/core": ["../../packages/core"],
      "@/core/*": ["../../packages/core/*"],
      "@/plugin-heading-analyzer": ["../../packages/plugin-heading-analyzer"],
      "@/plugin-heading-analyzer/*": [
        "../../packages/plugin-heading-analyzer/*"
      ],
      "@/docs/*": ["./*"]
    }
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts",
    "pages/index.mdx"
  ],
  "exclude": ["node_modules"]
}



================================================
FILE: apps/docs/.eslintrc.js
================================================
module.exports = {
  root: true,
  extends: ["custom"],
};



================================================
FILE: apps/docs/.gitignore
================================================
/public/sitemap.xml



================================================
FILE: apps/docs/components/CtaCard/index.tsx
================================================
import styles from "./styles.module.css";
import getClassNameFactory from "@/core/lib/get-class-name-factory";
import { Button } from "@/core/components/Button";
import { DiscoveryButton } from "../DiscoveryButton";

const getClassName = getClassNameFactory("CtaCard", styles);

export const CtaCard = () => (
  <div className={getClassName()}>
    <h2 className={getClassName("heading")} id="support">
      Stuck with Puck?
    </h2>
    <p>We provide Puck support, design system builds, and consultancy.</p>
    <div className={getClassName("actions")}>
      <DiscoveryButton />
      <Button href="https://discord.gg/D9e4E3MQVZ" variant="secondary" newTab>
        Join Discord — Free
      </Button>
    </div>
  </div>
);



================================================
FILE: apps/docs/components/CtaCard/styles.module.css
================================================
.CtaCard {
  background-color: var(--puck-color-azure-01);
  background-image: url(https://res.cloudinary.com/measuredco/image/upload/v1732634892/site/site-background-top_v8ll2o.png),
    url(https://res.cloudinary.com/measuredco/image/upload/v1732635074/site/site-background-repeat_kjbjx5.png);
  background-position: center -1rem, top;
  background-repeat: no-repeat, repeat-y;
  background-size: auto;
  color: white;
  display: flex;
  flex-direction: column;
  gap: 16px;
  max-width: 544px;
  padding: 32px;
  text-align: left;
  border: 1px solid var(--puck-color-grey-03);
  border-radius: 8px;
  margin-top: 32px;
}

.CtaCard p a {
  color: #6db5f8 !important;
}

.CtaCard p a:hover {
  color: #93c5fa !important;
  opacity: 0.8;
}

.CtaCard-heading {
  font-size: 24px;
  font-weight: 700;
  line-height: 1.2;
}

.CtaCard-actions {
  display: flex;
  gap: 12px;
  flex-wrap: wrap;
}



================================================
FILE: apps/docs/components/DiscoveryButton/index.tsx
================================================
import { Button } from "@/core/components/Button";

export function DiscoveryButton() {
  return (
    <>
      <script
        type="text/javascript"
        dangerouslySetInnerHTML={{
          __html: `
    (function (C, A, L) { let p = function (a, ar) { a.q.push(ar); }; let d = C.document; C.Cal = C.Cal || function () { let cal = C.Cal; let ar = arguments; if (!cal.loaded) { cal.ns = {}; cal.q = cal.q || []; d.head.appendChild(d.createElement("script")).src = A; cal.loaded = true; } if (ar[0] === L) { const api = function () { p(api, arguments); }; const namespace = ar[1]; api.q = api.q || []; if(typeof namespace === "string"){cal.ns[namespace] = cal.ns[namespace] || api;p(cal.ns[namespace], ar);p(cal, ["initNamespace", namespace]);} else p(cal, ar); return;} p(cal, ar); }; })(window, "https://app.cal.com/embed/embed.js", "init");
Cal("init", "puck-enquiry", {origin:"https://cal.com"});
  Cal.ns["puck-enquiry"]("ui", {"hideEventTypeDetails":false,"layout":"month_view"});
  `,
        }}
      />

      <Button
        data-cal-link="chrisvxd/puck-enquiry"
        data-cal-namespace="puck-enquiry"
        data-cal-config='{"layout":"month_view"}'
        variant="primary"
      >
        Book discovery call
      </Button>
    </>
  );
}



================================================
FILE: apps/docs/components/FooterActions/index.tsx
================================================
import { getClassNameFactory } from "@/core/lib";

import styles from "./styles.module.css";
import { ThemeSwitch } from "nextra-theme-docs";
import { ReleaseSwitcher } from "../ReleaseSwitcher";

const getClassName = getClassNameFactory("FooterActions", styles);

export const FooterActions = () => {
  return (
    <div className={getClassName()}>
      <div className={getClassName("themeSwitch")}>
        <ThemeSwitch />
      </div>
      <div className={getClassName("releaseSwitcher")}>
        <ReleaseSwitcher variant="light" />
      </div>
    </div>
  );
};



================================================
FILE: apps/docs/components/FooterActions/styles.module.css
================================================
.FooterActions {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  width: 100%;
}

.FooterActions-releaseSwitcher {
  display: block;
  margin-inline-start: auto;
}

@media (min-width: 768px) {
  .FooterActions-releaseSwitcher {
    display: none;
  }
}



================================================
FILE: apps/docs/components/Home/index.tsx
================================================
import React from "react";

import styles from "./styles.module.css";
import getClassNameFactory from "@/core/lib/get-class-name-factory";
import { Button } from "@/core/components/Button";
import Link from "next/link";
import { CtaCard } from "../CtaCard";

const getClassName = getClassNameFactory("Home", styles);

export const Home = () => {
  return (
    <div className={getClassName()}>
      <div className={getClassName("title")}>
        <h1 style={{ visibility: "hidden" }}>Puck</h1>

        <span>Open-source under MIT</span>
        <h2 className={getClassName("heading")}>The visual editor for React</h2>
      </div>
      <div style={{ paddingTop: 24 }} />
      <div className={getClassName("description")}>
        <p style={{ fontSize: 18, lineHeight: 1.5, opacity: 0.7 }}>
          Puck empowers developers to build amazing visual editing experiences
          into their own React applications, powering the next generation of
          content tools, no-code builders and WYSIWYG editors.
        </p>
      </div>
      <div style={{ paddingTop: 32 }} />
      <div className={getClassName("ctas")}>
        <div className={getClassName("actions")}>
          <Link href="/docs" style={{ display: "flex" }}>
            <Button>Read docs</Button>
          </Link>
          <Button href="https://demo.puckeditor.com/edit" variant="secondary">
            View demo
          </Button>
        </div>
        <div style={{ paddingTop: 32 }} />
        <pre style={{ padding: 0, margin: 0 }}>
          <span style={{ userSelect: "none" }}>~ </span>npm i @measured/puck
          --save
        </pre>
      </div>
      <div className={getClassName("peakWrapper")}>
        <div>
          <div className={getClassName("dot")} />
          <div className={getClassName("dot")} />
          <div className={getClassName("dot")} />
        </div>

        <div className={getClassName("peak")}>
          <CtaCard />
        </div>
      </div>
    </div>
  );
};



================================================
FILE: apps/docs/components/Home/styles.module.css
================================================
.Home {
  display: flex;
  padding-bottom: 48px;
  padding-top: 48px;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  margin-inline-start: auto;
  margin-inline-end: auto;
  height: 100%;
  max-height: 1280px;
}

@media (min-width: 768px) {
  .Home {
    padding-bottom: 96px;
    padding-top: 96px;
  }
}

.Home-title {
  max-width: 1156px;
}

.Home-description {
  max-width: 896px;
}

.Home-heading {
  font-size: 40px;
  font-weight: 700;
  line-height: 1.2;
}

@media (min-width: 768px) {
  .Home-heading {
    font-size: 64px;
  }
}

.Home-actions {
  display: flex;
  justify-content: center;
  gap: 16px;
}

.Home-builtBy {
  color: currentColor;
  display: flex;
  gap: 16px;
  flex-direction: column;
}

.Home-builtBy a {
  color: #0158ad;
}

:global(html.dark) .Home-builtBy a {
  color: currentColor;
}

.Home-builtBy a:hover {
  opacity: 0.8;
}

.Home-dot {
  border-radius: 8px;
  background-color: currentColor;
  padding: 2px;
  margin: 28px;
  opacity: 0.5;
}

.Home-peakWrapper {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 32px;
  text-align: center;
  width: 100%;
}



================================================
FILE: apps/docs/components/Preview/index.tsx
================================================
import React, {
  createContext,
  CSSProperties,
  useContext,
  useEffect,
  useState,
} from "react";

export { AutoField } from "@/core/components/AutoField";

import { ReactNode } from "react";
import "@/core/styles.css";
import { Puck } from "@/core/components/Puck";

import { AppState, ComponentConfig } from "@/core/types";
import { getClassNameFactory } from "@/core/lib";

import styles from "./styles.module.css";
import { createUsePuck } from "@/core/lib/use-puck";

import { ChevronUp, ChevronDown } from "lucide-react";

import { codeToHtml } from "shiki";

import { createStore } from "zustand";
import { useContextStore } from "@/core/lib/use-context-store";

export const PreviewStoreContext = createContext(
  createStore(() => ({ drawerVisible: false }))
);

const getClassNamePreview = getClassNameFactory("PreviewFrame", styles);

const DrawerButton = () => {
  const drawerVisible = useContextStore(
    PreviewStoreContext,
    (s) => s.drawerVisible
  );

  const previewStore = useContext(PreviewStoreContext);

  return (
    <button
      className={getClassNamePreview("drawerButton")}
      onClick={(e) => {
        e.preventDefault();
        e.stopPropagation();
        previewStore.setState((s) => ({ drawerVisible: !s.drawerVisible }));
      }}
    >
      {drawerVisible ? "Hide" : "Show"} output{" "}
      <div className={getClassNamePreview("drawerButtonIcon")}>
        {drawerVisible ? (
          <ChevronUp size="14px" />
        ) : (
          <ChevronDown size="14px" />
        )}
      </div>
    </button>
  );
};

const Drawer = ({ renderDrawer }: { renderDrawer: () => ReactNode }) => {
  const drawerVisible = useContextStore(
    PreviewStoreContext,
    (s) => s.drawerVisible
  );

  return drawerVisible ? (
    <div className={getClassNamePreview("drawer")}>{renderDrawer()}</div>
  ) : (
    <div />
  );
};

const usePuck = createUsePuck();

export const PreviewFrame = ({
  children,
  label,
  style = {},
  disableOnClick = false,
  renderInfo,
  renderDrawer,
}: {
  children?: ReactNode;
  label?: string;
  style?: CSSProperties;
  disableOnClick?: boolean;
  renderInfo?: () => ReactNode;
  renderDrawer?: () => ReactNode;
}) => {
  const dispatch = usePuck((s) => s.dispatch);

  return (
    <div
      className={getClassNamePreview()}
      onClick={() => {
        if (disableOnClick) return;

        dispatch({ type: "setUi", ui: { itemSelector: null } });
      }}
    >
      <div className={getClassNamePreview("header")}>
        <div className={getClassNamePreview("annotation")}>
          Interactive Demo
        </div>
        {label && <div className={getClassNamePreview("label")}>{label}</div>}
      </div>
      <div className={getClassNamePreview("contents")}>
        {renderInfo && (
          <div className={getClassNamePreview("info")} style={style}>
            {renderInfo()}
          </div>
        )}
        <div className={getClassNamePreview("body")} style={style}>
          {children}
        </div>
        {renderDrawer && <DrawerButton />}
      </div>
      {renderDrawer && <Drawer renderDrawer={renderDrawer} />}
    </div>
  );
};

export const CodeBlock = ({ code }: { code: string | object }) => {
  const [html, setHtml] = useState("<span />");

  useEffect(() => {
    (async () => {
      const html = await codeToHtml(JSON.stringify(code, null, 2), {
        lang: "javascript",
        theme: "github-dark",
      });

      setHtml(html);
    })();
  }, [code]);

  return (
    <div
      className={getClassNamePreview("codeblock")}
      dangerouslySetInnerHTML={{ __html: html }}
    />
  );
};

export const PuckPreview = ({
  label,
  children = <Puck.Preview />,
  style = {},
  disableOnClick,
  renderInfo,
  renderDrawer,
  ...puckProps
}: React.ComponentProps<typeof Puck> & {
  label: string;
  disableOnClick: boolean;
  children?: ReactNode;
  style?: CSSProperties;
  renderInfo?: () => ReactNode;
  renderDrawer?: () => ReactNode;
}) => {
  const [store] = useState(createStore(() => ({ drawerVisible: false })));

  return (
    <Puck config={{}} data={{}} {...puckProps} iframe={{ enabled: false }}>
      <PreviewStoreContext value={store}>
        <PreviewFrame
          label={label}
          style={style}
          renderInfo={renderInfo}
          renderDrawer={renderDrawer}
          disableOnClick={disableOnClick}
        >
          {children}
        </PreviewFrame>
      </PreviewStoreContext>
    </Puck>
  );
};

const ConfigPreviewInner = ({
  componentConfig,
}: {
  componentConfig: ComponentConfig;
}) => {
  const appState = usePuck((s) => s.appState);

  return (
    <div>
      {componentConfig.render && (
        <div className={getClassNamePreview("preview")}>
          {componentConfig.render({
            ...appState.data["content"][0]?.props,
            puck: {
              renderDropZone: () => <div />,
              isEditing: false,
              metadata: {},
              dragRef: null,
            },
          })}
        </div>
      )}
    </div>
  );
};

export const CodeBlockDrawer = ({
  getCode,
}: {
  getCode?: (appState: AppState) => object | string;
}) => {
  const appState = usePuck((s) => s.appState);
  const code = getCode?.(appState) ?? "";

  return <CodeBlock code={code} />;
};

export const ConfigPreview = ({
  componentConfig,
  label,
}: {
  componentConfig: ComponentConfig;
  label: string;
}) => {
  return (
    <PuckPreview
      label={label}
      config={{ components: { Example: componentConfig } }}
      data={{
        content: [
          {
            type: "Example",
            props: { ...componentConfig.defaultProps, id: "example" },
          },
        ],
        root: { props: {} },
      }}
      onPublish={() => {}}
      ui={{ itemSelector: { index: 0 } }}
      disableOnClick
      renderInfo={() => (
        <div onClick={(e) => e.stopPropagation()}>
          <Puck.Fields />
        </div>
      )}
      renderDrawer={() => (
        <CodeBlockDrawer
          getCode={(appState) => {
            const { id, ...otherProps } = appState.data.content[0].props;

            return otherProps;
          }}
        />
      )}
      style={{ padding: 0 }}
    >
      <ConfigPreviewInner componentConfig={componentConfig} />
    </PuckPreview>
  );
};



================================================
FILE: apps/docs/components/Preview/styles.module.css
================================================
.PreviewFrame {
  background: white;
  border: 1px solid var(--puck-color-grey-09);
  color: black;
  border-radius: 16px;
  margin-top: 32px;
  overflow: hidden;
}

.PreviewFrame-header {
  background: var(--puck-color-azure-11);
  gap: 8px;
  color: var(--puck-color-azure-05);
  font-weight: 0;
  padding: 12px 16px;
  border-top-left-radius: 15px;
  border-top-right-radius: 15px;
  border-bottom: 1px solid var(--puck-color-grey-09);
  align-items: center;
}

.PreviewFrame-annotation {
  text-transform: uppercase;
  font-size: 12px;
  font-weight: 700;
}

.PreviewFrame-label {
  margin-inline-start: auto;
}

.PreviewFrame-contents {
  align-items: stretch;
  background-color: var(--puck-color-grey-09);
  display: flex;
  gap: 1px;
  flex-wrap: wrap;
  position: relative;
}

.PreviewFrame-body {
  background-color: white;
  flex-grow: 1;
  padding: 32px;
  flex-basis: 49%;
}

.PreviewFrame-info {
  background-color: white;
  flex-grow: 1;
  flex-basis: 49%;
}

.PreviewFrame-codeblock {
  height: 100%;
  overflow: auto;
}

.PreviewFrame-codeblock pre {
  height: 100%;
  padding: 24px;
}

.PreviewFrame-drawerButton {
  align-items: center;
  border-left: 1px solid var(--puck-color-grey-10);
  border-top: 1px solid var(--puck-color-grey-10);
  display: flex;
  gap: 4px;
  border-top-left-radius: 4px;
  font-size: var(--puck-font-size-xxxs);
  font-weight: 500;
  position: absolute;
  padding: 4px 12px;
  padding-right: 4px;
  bottom: 0px;
  right: 0px;
}

.PreviewFrame-drawerButton:hover {
  background: var(--puck-color-azure-11);
  color: var(--puck-color-azure-02);
}

.PreviewFrame-drawerButtonIcon {
  color: var(--puck-color-grey-07);
}

.PreviewFrame-drawer {
  background: var(--puck-color-grey-12);
  border-top: 1px solid var(--puck-color-grey-09);
}

.PreviewFrame-preview {
  color: var(--puck-color-grey-03);
  padding: 16px;
}

.PreviewFrame-preview > * {
  color: var(
    --puck-color-grey-03
  ) !important; /* Override any injected Nextra/Tailwind styles */
}



================================================
FILE: apps/docs/components/ReleaseSwitcher/index.tsx
================================================
import { useEffect, useState } from "react";

import packageJson from "../../package.json";
import { getClassNameFactory } from "@/core/lib";

import styles from "./styles.module.css";

const BASE_URL = process.env.NEXT_PUBLIC_BASE_URL || "https://puckeditor.com";

const { version } = packageJson;

const getClassName = getClassNameFactory("ReleaseSwitcher", styles);

export const ReleaseSwitcher = ({
  variant = "default",
}: {
  variant?: "light" | "default";
}) => {
  const isCanary = process.env.NEXT_PUBLIC_IS_CANARY === "true" || false;
  const isLatest = process.env.NEXT_PUBLIC_IS_LATEST === "true" || false;

  const currentValue = isCanary ? "canary" : isLatest ? "" : version;

  const [options, setOptions] = useState<{ value: string; label: string }[]>([
    {
      label: "canary",
      value: "canary",
    },
    ...(isCanary
      ? []
      : [
          {
            label: isLatest ? `${version} (latest)` : version,
            value: isLatest ? "" : version,
          },
        ]),
  ]);

  useEffect(() => {
    fetch(`${BASE_URL}/api/releases`)
      .then(async (res) => {
        const { releases } = await res.json();
        const releaseOptions = Object.keys(releases).map((key) => ({
          label: key,
          value: key,
        }));

        releaseOptions[1].label = `${releaseOptions[1].label} (latest)`;
        releaseOptions[1].value = ""; // Okay to set to "" because isLatest will be true for this release option

        setOptions(releaseOptions);
      })
      .catch((e) => {
        console.error(`Could not load releases: ${e}`);
      });
  }, []);

  return (
    <select
      className={getClassName({ [variant]: true })}
      value={currentValue}
      onChange={(e) => {
        const newHref = e.currentTarget.value
          ? `/v/${e.currentTarget.value}`
          : "https://puckeditor.com";

        if (window.parent) {
          window.parent.location.href = newHref;
        } else {
          window.location.href = newHref;
        }
      }}
    >
      {options.map((option) => (
        <option key={option.value} value={option.value}>
          {option.label}
        </option>
      ))}
    </select>
  );
};



================================================
FILE: apps/docs/components/ReleaseSwitcher/styles.module.css
================================================
.ReleaseSwitcher {
  appearance: none; /* Safari */
  background: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100' height='100' fill='%23c3c3c3'><polygon points='0,0 100,0 50,50'/></svg>")
    no-repeat;
  background-size: 12px;
  background-position: calc(100% - 12px) calc(50% + 3px);
  background-repeat: no-repeat;
  background-color: var(--puck-color-grey-11);
  border-radius: 100px;
  color: black;
  padding-inline-start: 16px;
  padding-inline-end: 16px;
  height: 33px; /* Magic number to align with Nextra search */
  width: 156px;
}

.ReleaseSwitcher--light {
  background-color: white;
  border: 1px solid var(--puck-color-grey-10);
}



================================================
FILE: apps/docs/components/Viewport/index.tsx
================================================
import { getClassNameFactory } from "@/core/lib";

import styles from "./styles.module.css";
import { ReactNode } from "react";

const getClassName = getClassNameFactory("Viewport", styles);

export const Viewport = ({
  children,
  mobile,
  desktop,
}: {
  children: ReactNode;
  mobile?: boolean;
  desktop?: boolean;
}) => {
  return <div className={getClassName({ mobile, desktop })}>{children}</div>;
};



================================================
FILE: apps/docs/components/Viewport/styles.module.css
================================================
.Viewport {
  display: none;
}

.Viewport--mobile {
  display: block;
}

@media (min-width: 768px) {
  .Viewport--desktop {
    display: block;
  }

  .Viewport--mobile:not(.Viewport--desktop) {
    display: none;
  }
}



================================================
FILE: apps/docs/pages/_app.tsx
================================================
import type { AppProps } from "next/app";
import "../styles.css";

export default function DocsApp({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />;
}



================================================
FILE: apps/docs/pages/_document.tsx
================================================
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head>
        {process.env.NEXT_PUBLIC_PLAUSIBLE_DATA_DOMAIN && (
          <script
            defer
            data-domain={process.env.NEXT_PUBLIC_PLAUSIBLE_DATA_DOMAIN}
            src="https://plausible.io/js/plausible.js"
          ></script>
        )}
      </Head>
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}



================================================
FILE: apps/docs/pages/_meta.js
================================================
const menu = {
  index: {
    type: "page",
    title: "Puck",
    display: "hidden",
    theme: {
      layout: "full",
    },
  },
  docs: {
    type: "page",
    title: "Docs",
  },
  measured: {
    type: "page",
    href: "/#support",
    title: "Support",
    newWindow: false,
  },
};

export default menu;



================================================
FILE: apps/docs/pages/index.mdx
================================================
---
title: Puck - The open-source visual editor for React
---

import { Home } from "../components/Home";

<Home />



================================================
FILE: apps/docs/pages/api/releases.ts
================================================
import type { NextApiRequest, NextApiResponse } from "next";

import releases from "../../releases.json";

/**
 * Proxy GitHub and rely on Next.js cache to prevent rate limiting
 */
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  res.setHeader("Access-Control-Allow-Credentials", "true");
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET");
  res.setHeader(
    "Access-Control-Allow-Headers",
    "X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version"
  );

  res.status(200).json({ releases });
}



================================================
FILE: apps/docs/pages/docs/_meta.js
================================================
const menu = {
  index: {
    title: "Introduction",
  },
  "getting-started": {
    title: "Getting Started",
  },
  "integrating-puck": {
    title: "Integrating Puck",
  },
  "extending-puck": {
    title: "Extending Puck",
  },
  "api-reference": {
    title: "API Reference",
  },
  guides: {
    title: "Guides",
  },
};

export default menu;



================================================
FILE: apps/docs/pages/docs/getting-started.mdx
================================================
# Getting Started

## Installation

Install the package

```sh npm2yarn copy
npm i @measured/puck --save
```

Or generate a Puck application using a [recipe](https://github.com/measuredco/puck#recipes)

```sh copy
npx create-puck-app my-app
```

## Render the editor

```jsx copy filename="Editor.jsx"
import { Puck } from "@measured/puck";
import "@measured/puck/puck.css";

// Create Puck component config
const config = {
  components: {
    HeadingBlock: {
      fields: {
        children: {
          type: "text",
        },
      },
      render: ({ children }) => {
        return <h1>{children}</h1>;
      },
    },
  },
};

// Describe the initial data
const initialData = {};

// Save the data to your database
const save = (data) => {};

// Render Puck editor
export function Editor() {
  return <Puck config={config} data={initialData} onPublish={save} />;
}
```

## Render the page

```jsx copy filename="Page.jsx"
import { Render } from "@measured/puck";

export function Page() {
  return <Render config={config} data={data} />;
}
```



================================================
FILE: apps/docs/pages/docs/index.mdx
================================================
# Introduction

Welcome to the Puck documentation!

## What is Puck?

Puck is a modular, open-source visual editor for React.js. You can use Puck to build custom drag-and-drop experiences with your own application and React components.

Because Puck is just a React component, it plays well with all React.js environments, including Next.js. You own your data and there's no vendor lock-in.

Puck is also licensed under MIT, making it suitable for both internal systems and commercial applications.

## Main Features

| Feature                                                                   | Description                                                                                                          |
| ------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------- |
| [Component Configuration](/docs/integrating-puck/component-configuration) | Integrate your own components with Puck by providing render functions and configuring fields that map to your props. |
| [Root Configuration](/docs/integrating-puck/root-configuration)           | Customize the root component that wraps all other Puck components.                                                   |
| [Multi-column Layouts](/docs/integrating-puck/multi-column-layouts)       | Create multi-column layouts using nested components. Now supports advanced CSS layouts.                              |
| [Categories](/docs/integrating-puck/categories)                           | Group your components in the side bar.                                                                               |
| [Dynamic Props](/docs/integrating-puck/dynamic-props)                     | Dynamically set props after user input and mark fields as read-only                                                  |
| [Dynamic Fields](/docs/integrating-puck/dynamic-fields)                   | Dynamically set fields based on user input                                                                           |
| [External Data Sources](/docs/integrating-puck/external-data-sources)     | Load content from a third-party CMS or other data source                                                             |
| [Server Components](/docs/integrating-puck/server-components)             | Opt-in support for React Server Components                                                                           |
| [Data Migration](/docs/integrating-puck/data-migration)                   | Migrate between breaking Puck releases and your own breaking prop changes                                            |
| [Viewports](/docs/integrating-puck/viewports)                             | Preview and edit your content in a same-origin iframe to simulate different viewports                                |
| [Feature Toggling](/docs/integrating-puck/feature-toggling)               | Toggle Puck features, like duplication or deletion, via the permissions API.                                         |

## Get Support

If you have any questions about Puck, please open a [GitHub issue](https://github.com/measuredco/puck/issues) or join us on [Discord](https://discord.gg/D9e4E3MQVZ).

Or [book a discovery call](https://app.cal.com/chrisvxd/puck-enquiry/) for hands-on support and consultancy.

## License

Puck is licensed under MIT.



================================================
FILE: apps/docs/pages/docs/api-reference/_meta.js
================================================
const menu = {
  components: {},
  configuration: {},
  "data-model": {},
  fields: {},
  functions: {},
  overrides: {},
};

export default menu;



================================================
FILE: apps/docs/pages/docs/api-reference/actions.mdx
================================================
# Actions

Actions enable you to make changes to the internal [AppState](/docs/api-reference/data-model/app-state) via the [dispatcher](/docs/api-reference/puck-api#dispatch).

This is a partial reference of the most useful actions. A full reference is available in [the codebase](https://github.com/measuredco/puck/blob/main/packages/core/reducer/actions.tsx).

## Types

### `setData`

Modify the [data payload](/docs/api-reference/data-model/data) currently managed by Puck.

| Param  | Example           | Type                                        | Status   |
| ------ | ----------------- | ------------------------------------------- | -------- |
| `type` | `type: "setData"` | "setData"                                   | Required |
| `data` | `data: {}`        | [Data](/docs/api-reference/data-model/data) | Required |

#### Example

```tsx
dispatch({
  type: "setData",
  data: {},
});
```

### `setUi`

Change a value on Puck's [UI state](/docs/api-reference/data-model/app-state#ui).

| Param  | Example                             | Type                                         | Status   |
| ------ | ----------------------------------- | -------------------------------------------- | -------- |
| `type` | `type: "setUi"`                     | "setUi"                                      | Required |
| `ui`   | `ui: { leftSideBarVisible: false }` | [UiState](/docs/api-reference/app-state/#ui) | Required |

#### Example

```tsx
dispatch({
  type: "setUi",
  ui: {
    leftSideBarVisible: false,
  },
});
```

### `set`

Change the entire [AppState](/docs/api-reference/data-model/app-state) in a single action.

| Param   | Example                       | Type                                                 | Status   |
| ------- | ----------------------------- | ---------------------------------------------------- | -------- |
| `type`  | `type: "set"`                 | "set"                                                | Required |
| `state` | `state: { data: {}, ui: {} }` | [AppState](/docs/api-reference/data-model/app-state) | Required |

#### Example

```tsx
dispatch({
  type: "set",
  state: { data: {}, ui: {} },
});
```



================================================
FILE: apps/docs/pages/docs/api-reference/components.mdx
================================================
# Components

Puck provides several components to support different integration approaches.

## Core

- [\<DropZone\>](components/drop-zone) - Place droppable regions (zones) inside other components to enable nested components.
- [\<Puck\>](components/puck) - Render the Puck editor.
- [\<Render\>](components/render) - Render a [`Data`](/docs/api-reference/data-model/data) object for a given [`Config`](/docs/api-reference/configuration/config).

## Compositional

- [\<Puck.Components\>](components/puck-components) - A draggable list of components when composing a custom Puck UI.
- [\<Puck.Fields\>](components/puck-fields) - The fields for the currently selected item when composing a custom Puck UI.
- [\<Puck.Outline\>](components/puck-outline) - An interactive outline when composing a custom Puck UI.
- [\<Puck.Preview\>](components/puck-preview) - A drag-and-drop preview when composing a custom Puck UI.

## Helper

- [\<ActionBar\>](components/action-bar) - An action bar containing a series of actions, normally used with the [actionBar override](/docs/api-reference/overrides/action-bar).
- [\<ActionBar.Action\>](components/action-bar-action) - An action for use within the ActionBar component.
- [\<ActionBar.Group\>](components/action-bar-group) - A group of actions for use within the ActionBar component.
- [\<ActionBar.Label\>](components/action-bar-label) - A label for use within the ActionBar component.
- [\<Drawer\>](components/drawer) - A reference list of items that can be dragged into a droppable area, normally [`<Puck.Preview>`](components/puck-preview).
- [\<Drawer.Item\>](components/drawer-item) - An item that can be dragged from a [`<Drawer>`](components/drawer).
- [\<FieldLabel\>](components/field-label) - Render a styled `label` when creating [`custom` fields](/docs/api-reference/fields/custom).



================================================
FILE: apps/docs/pages/docs/api-reference/configuration.mdx
================================================
# Configuration

- [Config](configuration/config) - The main configuration object describing what Puck can render.
- [ComponentConfig](configuration/component-config) - The configuration of each component defined in the main config.



================================================
FILE: apps/docs/pages/docs/api-reference/data-model.mdx
================================================
# Data Model

The Puck data model

- [AppState](data-model/app-state) - Puck's internal state.
- [ComponentData](data-model/component-data) - The data model for each component instance.
- [Data](data-model/data) - The data model produced by Puck for a page.
- [RootData](data-model/root-data) - The data model for the root data.



================================================
FILE: apps/docs/pages/docs/api-reference/fields.mdx
================================================
# Fields

A field represents a user input shown in the Puck interface.

- [Base](fields/base) - The base type shared by all fields.
- [Array](fields/array) - Render a list of items with a subset of fields.
- [Custom](fields/custom) - Implement a field with a custom UI.
- [External](fields/external) - Select data from a list, typically populated via a third-party API.
- [Number](fields/number) - Render a `number` input.
- [Object](fields/object) - Render a subset of fields.
- [Radio](fields/radio) - Render a `radio` input with a list of options.
- [Select](fields/select) - Render a `select` input with a list of options.
- [Slot](fields/slot) - Define an area containing nested components.
- [Text](fields/text) - Render a `text` input.
- [Textarea](fields/textarea) - Render a `textarea` input.



================================================
FILE: apps/docs/pages/docs/api-reference/functions.mdx
================================================
# Functions

- [migrate](functions/migrate) - Migrate a legacy [data payload](/docs/api-reference/data-model/data) to the latest shape.
- [resolveAllData](functions/resolve-all-data) - Utility function to execute all [`resolveData` methods](/docs/api-reference/configuration/component-config#resolvedatadata-params) on a data payload.
- [transformProps](functions/transform-props) - Transform component props stored in the [data payload](/docs/api-reference/data-model/data). Use this for migrations, like prop renames.
- [useGetPuck](functions/use-get-puck) - A hook for accessing the latest [PuckApi](/docs/api-reference/puck-api) outside of the React render lifecycle.
- [usePuck](functions/use-puck) - A hook for accessing the [PuckApi](/docs/api-reference/puck-api) inside your components.
- [walkTree](functions/walk-tree) - Walk the tree recursively, modifying it if necessary.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides.mdx
================================================
import { Callout } from "nextra/components";

# Overrides

<Callout>
  The overrides API is highly experimental and is likely to experience breaking
  changes.
</Callout>

An object describing render functions to override the default Puck interface.

```tsx copy
const overrides = {
  header: () => <header>My header</header>,
};
```

## Available overrides

- [`actionBar`](overrides/action-bar): Override the action bar.
- [`components`](overrides/components): Override the component list.
- [`componentItem`](overrides/component-item): Override an individual item within the component list.
- [`fields`](overrides/fields): Override the fields wrapper.
- [`fieldLabel`](overrides/field-label): Override the [field labels](/docs/api-reference/configuration/field-label).
- [`fieldTypes`](overrides/field-types): Override each [field type](/docs/api-reference/fields).
- [`header`](overrides/header): Override the header.
- [`headerActions`](overrides/header-actions): Override the header actions. Return a fragment so your items appear inline.
- [`iframe`](overrides/iframe): Override the root of the iframe. Useful for injecting styles.
- [`outline`](overrides/outline): Override the outline.
- [`preview`](overrides/preview): Override the drag-and-drop preview.
- [`puck`](overrides/puck): Override the Puck children. This is the equivalent of passing in [`children`](/docs/api-reference/components/puck#children) to the [`<Puck>`](/docs/api-reference/components/puck) component.



================================================
FILE: apps/docs/pages/docs/api-reference/permissions.mdx
================================================
# Permissions

Permissions enable the [toggling of Puck features](/docs/integrating-puck/feature-toggling). There are three types of permissions:

1. **Global permissions** are shared across the entire Puck application. Controlled via the `permissions` prop on the `<Puck>` component.
2. **Component permissions** allow feature control across for all instances of a given component type. Controlled by the `permissions` component config API.
3. **Dynamic permissions** enable control after each data change, and are ideal for per-instance component permissions. Controlled by the `resolvePermissions` component config API.

## APIs

### Setting permissions

1. Global [`permissions` prop](/docs/api-reference/components/puck#permissions)
2. Component [`permissions` parameter](/docs/api-reference/configuration/component-config#permissions)
3. Component [`resolvePermissions` parameter](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params)

### Extending permissions

1. `getPermissions`
2. `refreshPermissions`

## Supported permissions

| Param                  | Example        | Type    | Default     | Status |
| ---------------------- | -------------- | ------- | ----------- | ------ |
| [`delete`](#delete)    | `delete: true` | Boolean | `true`      | -      |
| [`drag`](#drag)        | `drag: true`   | Boolean | `true`      | -      |
| [`edit`](#edit)        | `edit: true`   | Boolean | `true`      | -      |
| [`insert`](#insert)    | `insert: true` | Boolean | `true`      | -      |
| [`...custom`](#custom) | `myPerm: true` | Boolean | `undefined` | -      |

### `delete`

Enable deletion of components.

### `drag`

Enable component dragging. Disabling this will lock the component in place, but other components can still be dragged around it.

### `duplicate`

Enable duplication of components.

### `edit`

Enable field editing. This is the same as setting `readOnly` to `true` for all fields.

### `insert`

Enable insertion of new components. Disabling this will disable the component list items.

### `...custom`

Custom permissions enable you to control your own functionality when [extending Puck](/docs/extending-puck/composition).



================================================
FILE: apps/docs/pages/docs/api-reference/plugin.mdx
================================================
import { Callout } from "nextra/components";

# Plugin

<Callout>
  The plugin API is highly experimental and is likely to experience breaking
  changes.
</Callout>

A plugins is an extensions that enhances the capabilities of Puck.

```tsx showLineNumbers copy {3-9, 15}
import { Puck } from "@measured/puck";

const MyPlugin = {
  overrides: {
    componentItem: ({ name }) => (
      <div style={{ backgroundColor: "hotpink" }}>{name}</div>
    ),
  },
};

export function Editor() {
  return (
    <Puck
      // ...
      plugins={[MyPlugin]}
    />
  );
}
```

## Params

| Prop                      | Example                                | Type                                       | Status |
| ------------------------- | -------------------------------------- | ------------------------------------------ | ------ |
| [`overrides`](#overrides) | `overrides: { fields: () => <div /> }` | [Overrides](/docs/api-reference/overrides) | -      |

### `overrides`

Override the render functions for specific portions of the Puck UI. Implements the [`overrides` API](/docs/api-reference/overrides).



================================================
FILE: apps/docs/pages/docs/api-reference/puck-api.mdx
================================================
---
title: PuckApi
---

import { Callout } from "nextra/components";

# PuckApi

`PuckApi` exposes Puck's internals to enable extension and modification to Puck's core behavior. It can be accessed by the [`usePuck`](/docs/api-reference/functions/use-puck) and [`useGetPuck`](/docs/api-reference/functions/use-get-puck) hooks.

<Callout type="info">
  `PuckApi` can currently only be accessed through
  [composition](/docs/extending-puck/composition), [UI
  overrides](/docs/extending-puck/ui-overrides) or [custom
  fields](/docs/extending-puck/custom-fields).
</Callout>

## Params

| Param                                             | Example                                            | Type                                                           |
| ------------------------------------------------- | -------------------------------------------------- | -------------------------------------------------------------- |
| [`appState`](#appstate)                           | `{ data: {}, ui: {} }`                             | [AppState](/docs/api-reference/data-model/app-state)           |
| [`dispatch`](#dispatchaction)                     | `(action: PuckAction) => void`                     | Function                                                       |
| [`getItemBySelector`](#getitembyselectorselector) | `() => ({ type: "Heading", props: {} })`           | Function                                                       |
| [`getItemById`](#getitembyidid)                   | `() => ({ type: "Heading", props: {} })`           | Function                                                       |
| [`getSelectorForId`](#getselectorforidid)         | `() => ({ index: 0, zone: 'Flex-123:children'  })` | Function                                                       |
| [`getPermissions`](#getpermissionsparams)         | `() => ({ delete: true  })`                        | Function                                                       |
| [`history`](#history)                             | `{}`                                               | Object                                                         |
| [`refreshPermissions`](#refreshpermissionsparams) | `() => void`                                       | Function                                                       |
| [`selectedItem`](#selecteditem)                   | `{ type: "Heading", props: {id: "my-heading"} }`   | [ComponentData](/docs/api-reference/data-model/data#content-1) |

### `appState`

The current [application state](/docs/api-reference/data-model/app-state) for this Puck instance.

```tsx
console.log(appState.data);
// { content: [], root: {}, zones: {} }
```

### `dispatch(action)`

Execute an [action](/docs/api-reference/actions) to mutate the Puck [application state](/docs/api-reference/data-model/app-state).

```tsx
dispatch({
  type: "setUi",
  ui: {
    leftSideBarVisible: false,
  },
});
```

### `getItemBySelector(selector)`

Get an item's [`ComponentData`](/docs/api-reference/data-model/component-data) by its [selector](/docs/api-reference/data-model/item-selector).

```tsx
getItemBySelector({
  index: 0,
  zone: "Flex-123:children", // The "children" slot field in the component with id "Flex-123"
});
// { type: "HeadingBlock", props: {} }
```

### `getItemById(id)`

Get an item's [`ComponentData`](/docs/api-reference/data-model/component-data) by its component id.

```tsx
getItemById("HeadingBlock-123");
// { type: "HeadingBlock", props: {} }
```

### `getSelectorForId(id)`

Get an item's [selector](/docs/api-reference/data-model/app-state#uiitemselector) by its component id.

```tsx
getSelectorForId("HeadingBlock-123");
// { index: 0, zone: "Flex-123:children" }
```

### `getPermissions(params)`

Get global, component or resolved dynamic [permissions](/docs/api-reference/permissions).

```tsx
getPermissions();
// { delete: true, edit: true }
```

#### Params

| Param  | Example                                           | Type    |
| ------ | ------------------------------------------------- | ------- |
| `item` | `{ type: "HeadingBlock", props: { id: "1234" } }` | Object  |
| `root` | `false`                                           | Boolean |
| `type` | `"HeadingBlock"`                                  | String  |

##### `item`

Specify `item` to retrieve the permissions for a given component instance, resolving any dynamic permissions for that component, as set by the [`resolvePermissions` parameter](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params).

```tsx
getPermissions({
  item: { type: "HeadingBlock", props: { id: "Heading-1234" } }, // Get resolved permissions for Heading-1234
});
// { delete: false }
```

The `getPermissions` function will be redefined when after resolving dynamic permissions, so it's generally required to wrap it in a `useEffect` hook:

```tsx
const [myPermissions, setMyPermissions] = useState(getPermissions());

useEffect(() => {
  setMyPermissions(getPermissions());
}, [getPermissions]);
```

##### `root`

Specify `root` to retrieve the permissions for the `root`, as set by the [`permissions` parameter](/docs/api-reference/configuration/component-config#permissions).

```tsx
getPermissions({ root: true });
// { delete: false }
```

##### `type`

Specify `type` to retrieve the permissions for a given component type, as set by the [`permissions` parameter](/docs/api-reference/configuration/component-config#permissions).

```tsx
getPermissions({ type: "HeadingBlock" });
// { delete: false }
```

### `history`

The `history` API provides programmatic access to the undo/redo [AppState](/docs/api-reference/data-model/app-state) history.

| Param                                 | Example                             | Type                           |
| ------------------------------------- | ----------------------------------- | ------------------------------ |
| [`back`](#historyback)                | `() => void`                        | Function                       |
| [`forward`](#historyforward)          | `() => void`                        | Function                       |
| [`hasPast`](#historyhaspast)          | `true`                              | Boolean                        |
| [`hasFuture`](#historyhasfuture)      | `false`                             | Boolean                        |
| [`histories`](#historyhistories)      | `[{ id: 'abc123', data: {} }]`      | [History](#history-params)\[\] |
| [`index`](#historyindex)              | `5`                                 | Number                         |
| [`setHistories`](#sethistories)       | `setHistories: (histories) => void` | Function                       |
| [`setHistoryIndex`](#sethistoryindex) | `setHistoryIndex: (index) => void`  | Function                       |

#### `history.back()`

A function to move the app state back through the [histories](#historyhistories).

#### `history.forward()`

A function to move the app state forward through the [histories](#historyhistories).

#### `history.hasPast`

A boolean describing whether or not the present app state has past history items.

#### `history.hasFuture`

A boolean describing whether or not the present app state has future history items.

#### `history.histories`

An array describing the recorded history as `History` objects.

##### `History` params

| Param   | Example  | Type                                                 |
| ------- | -------- | ---------------------------------------------------- |
| `state` | `{}`     | [AppState](/docs/api-reference/data-model/app-state) |
| `id`    | `abc123` | String                                               |

###### `state`

The [app state](/docs/api-reference/data-model/app-state) payload for this history entry.

###### `id`

An optional ID for this history entry.

#### `history.index`

The index of the currently selected history in [`history.histories`](#historyhistories)

#### `setHistories`

A function to set the history state.

```tsx
setHistories([]); // clears all history
```

#### `setHistoryIndex`

A function to set current history index.

```tsx
setHistoryIndex(2);
```

### `refreshPermissions(params)`

Force the permissions to refresh, running all [`resolvePermissions` functions](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params) and skipping the cache.

```tsx
resolvePermissions(); // Refresh all permissions
```

#### Params

| Param  | Example                                           | Type    |
| ------ | ------------------------------------------------- | ------- |
| `item` | `{ type: "HeadingBlock", props: { id: "1234" } }` | Object  |
| `root` | `false`                                           | Boolean |
| `type` | `"HeadingBlock"`                                  | String  |

##### `item`

Specify `item` to refresh the permissions for a given component instance only.

```tsx
refreshPermissions({
  item: { type: "HeadingBlock", props: { id: "Heading-1234" } }, // Force refresh the resolved permissions for Heading-1234
});
```

##### `root`

Specify `root` to refresh the permissions for the `root` only.

```tsx
refreshPermissions({ root: true });
```

##### `type`

Specify `type` to refresh the permissions for all components of a given component type.

```tsx
refreshPermissions({ type: "HeadingBlock" });
```

### `selectedItem`

The currently selected item, as defined by `appState.ui.itemSelector`.

```tsx
console.log(selectedItem);
// { type: "Heading", props: {id: "my-heading"} }
```



================================================
FILE: apps/docs/pages/docs/api-reference/components/_meta.js
================================================
const menu = {
  "action-bar": {},
  "action-bar-action": {},
  "action-bar-group": {},
  "action-bar-label": {},
  "auto-field": {},
  drawer: {},
  "drawer-item": {},
  "drop-zone": {},
  "field-label": {},
  puck: {},
  "puck-components": {},
  "puck-fields": {},
  "puck-outline": {},
  "puck-preview": {},
  render: {},
};

export default menu;



================================================
FILE: apps/docs/pages/docs/api-reference/components/action-bar-action.mdx
================================================
---
title: <ActionBar.Action>
---

import { PuckPreview } from "@/docs/components/Preview";
import { ActionBar } from "@/puck";

# \<ActionBar.Action\>

Render an action button in the [`<ActionBar>`](action-bar). Often used inside an [`<ActionBar.Group>`](action-bar-group).

```tsx showLineNumbers {2} copy
<ActionBar>
  <ActionBar.Action onClick={() => console.log("Clicked!")}>★</ActionBar.Action>
</ActionBar>
```

<PuckPreview>
  <div style={{ display: "flex" }}>
    <ActionBar>
        <ActionBar.Action onClick={() => console.log("Clicked!")}>★</ActionBar.Action>
    </ActionBar>

  </div>
</PuckPreview>

## Props

| Prop                    | Example      | Type      | Status   |
| ----------------------- | ------------ | --------- | -------- |
| [`children`](#children) | `<svg />`    | ReactNode | Required |
| [`onClick`](#on-clicke) | `() => void` | Function  | -        |
| [`label`](#label)       | `"Label"`    | String    | -        |

## Required Props

### `children`

A node to render as the children of the action. Should be a string or an icon.

Puck uses [Lucide icons](https://lucide.dev/icons/). You can use [lucide-react](https://lucide.dev/guide/packages/lucide-react) to choose a similar icon, if desired.

### `onClick(e)`

An [onClick callback](https://react.dev/learn/responding-to-events) triggered when the user clicks the action.

## Optional Props

### `label`

A label to provide an accessible label when using icon.



================================================
FILE: apps/docs/pages/docs/api-reference/components/action-bar-group.mdx
================================================
---
title: <ActionBar.Group>
---

import { PuckPreview } from "@/docs/components/Preview";
import { ActionBar } from "@/puck";

# \<ActionBar.Group\>

Render an action group in the [`<ActionBar>`](action-bar).

```tsx showLineNumbers {2-3} copy
<ActionBar label="Actions">
  <ActionBar.Group>Group 1</ActionBar.Group>
  <ActionBar.Group>Group 2</ActionBar.Group>
</ActionBar>
```

<PuckPreview>
  <div style={{ display: "flex" }}>
    <ActionBar label="Actions">
      <ActionBar.Group>Group 1</ActionBar.Group>
      <ActionBar.Group>Group 2</ActionBar.Group>
    </ActionBar>
  </div>
</PuckPreview>

## Props

| Prop                    | Example   | Type      | Status   |
| ----------------------- | --------- | --------- | -------- |
| [`children`](#children) | `<div />` | ReactNode | Required |

## Required Props

### `children`

A node to render as the children of the action. If a fragment, the items will be rendered in a flex row.

Normally contains [`<ActionBar.Action>`](action-bar-action)



================================================
FILE: apps/docs/pages/docs/api-reference/components/action-bar-label.mdx
================================================
---
title: <ActionBar.Label>
---

import { PuckPreview } from "@/docs/components/Preview";
import { ActionBar } from "@/puck";

# \<ActionBar.Label\>

Render a label in the [`<ActionBar>`](action-bar) or an [`<ActionBar.Group>`](action-bar-group).

```tsx showLineNumbers {2,4} copy
<ActionBar>
  <ActionBar.Label label="Label 1" />
  <ActionBar.Group>
    <ActionBar.Label label="Label 2" />
    <ActionBar.Action>★</ActionBar.Action>
  </ActionBar.Group>
</ActionBar>
```

<PuckPreview>
  <div style={{ display: "flex" }}>
    <ActionBar>
      <ActionBar.Label label="Label 1" />
      <ActionBar.Group>
        <ActionBar.Label label="Label 2" />
        <ActionBar.Action>★</ActionBar.Action>
      </ActionBar.Group>
    </ActionBar>
  </div>
</PuckPreview>

## Props

| Prop              | Example   | Type   | Status   |
| ----------------- | --------- | ------ | -------- |
| [`label`](#label) | `"Label"` | String | Required |

## Required Props

### `label`

The label text.



================================================
FILE: apps/docs/pages/docs/api-reference/components/action-bar.mdx
================================================
---
title: <ActionBar>
---

import { PuckPreview } from "@/docs/components/Preview";
import { ActionBar } from "@/puck";

# \<ActionBar\>

Render the Puck ActionBar. Use this when overriding the [actionBar](/docs/api-reference/overrides/action-bar).

```tsx showLineNumbers copy
<ActionBar label="Actions">
  <ActionBar.Group>
    <ActionBar.Action onClick={() => console.log("Clicked!")}>
      ★
    </ActionBar.Action>
  </ActionBar.Group>
</ActionBar>
```

<PuckPreview>
  <div style={{ display: "flex" }}>
    <ActionBar label="Actions">
      <ActionBar.Group>
        <ActionBar.Action>★</ActionBar.Action>
      </ActionBar.Group>
    </ActionBar>
  </div>
</PuckPreview>

## Props

| Prop                    | Example   | Type      | Status   |
| ----------------------- | --------- | --------- | -------- |
| [`children`](#children) | `<div />` | ReactNode | Required |
| [`label`](#label)       | `"Label"` | String    | Required |

## Required Props

### `children`

The children for the ActionBar. Normally a fragment of [`<ActionBar.Action>` components](/docs/api-reference/components/action-bar-action).

If this is a fragment, it will be rendered in a flex row.

### `label`

The label for the ActionBar.



================================================
FILE: apps/docs/pages/docs/api-reference/components/auto-field.mdx
================================================
---
title: <AutoField>
---

import { ConfigPreview } from "@/docs/components/Preview";
import { AutoField } from "@/puck";

# \<AutoField\>

Render a Puck field based on a [Field](/docs/api-reference/fields) object. Use this when building [custom fields](/docs/extending-puck/custom-fields) that need to use Puck-style fields internally.

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: ({ onChange, value }) => {
          return (
            <AutoField
              field={{ type: "text" }}
              onChange={onChange}
              value={value}
            />
          );
        },
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
    },
  }}
/>

```tsx {1,4} copy
import { Autofield } from "@measured/puck";

const CustomField = ({ onChange, value }) => (
  <AutoField field={{ type: "text" }} onChange={onChange} value={value} />
);

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: MyCustomField,
        },
      },
    },
  },
};
```

## Props

| Prop                    | Example                      | Type                                | Status   |
| ----------------------- | ---------------------------- | ----------------------------------- | -------- |
| [`field`](#field)       | `{ type: "text" }`           | [Field](/docs/api-reference/fields) | Required |
| [`onChange`](#onchange) | `onChange("Goodbye, world")` | Function                            | Required |
| [`value`](#value)       | `"Hello, world"`             | Any                                 | Required |
| [`id`](#id)             | `"my-input"`                 | String                              | -        |
| [`readOnly`](#readonly) | `true`                       | Boolean                             | -        |

## Required Props

### `field`

An object containing the user defined [Field](/docs/api-reference/fields) configuration.

### `onChange`

A callback that triggers when the value changes.

### `value`

The current value for the field.

## Optional Props

### `id`

An optional ID for this field. Will be generated if not specified.

### `readOnly`

A boolean describing whether or not this field is `readOnly`.

## Further reading

- [Custom fields](/docs/extending-puck/custom-fields)
- [The `<FieldLabel>` API reference](/docs/api-reference/components/field-label)



================================================
FILE: apps/docs/pages/docs/api-reference/components/drawer-item.mdx
================================================
---
title: <Drawer.Item>
---

import { PuckPreview } from "@/docs/components/Preview";
import { Drawer } from "@/puck";

# \<Drawer.Item\>

An item that can be dragged from a [`<Drawer>`](drawer).

```tsx {7} copy
import { Puck, Drawer } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Drawer>
        <Drawer.Item name="Orange" />
      </Drawer>
    </Puck>
  );
}
```

## Props

| Prop                                | Example                   | Type     | Status   |
| ----------------------------------- | ------------------------- | -------- | -------- |
| [`name`](#name)                     | `name: "Orange"`          | String   | Required |
| [`children`](#children)             | `children: () => <div />` | Function | -        |
| [`id`](#id)                         | `id: "OrangeComponent"`   | String   | -        |
| [`isDragDisabled`](#isdragdisabled) | `isDragDisabled: false`   | Boolean  | -        |

## Required props

### `name`

The name of this drawer item.

- This will be rendered on the item by default.
- Will be used as the `id`, unless otherwise specified

## Optional props

### `children`

A custom render function to render inside the component.

```tsx {8} copy
import { Puck, Drawer } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Drawer>
        <Drawer.Item name="Orange">{() => <div>Orange 🍊</div>}</Drawer.Item>
      </Drawer>
    </Puck>
  );
}
```

<PuckPreview config={{}} data={{ root: { props: {} }, content: [] }}>
  <Drawer>
    <Drawer.Item name="Orange">{() => <div>Orange 🍊</div>}</Drawer.Item>
  </Drawer>
</PuckPreview>

#### Render Props

| Prop                      | Example             | Type   |
| ------------------------- | ------------------- | ------ |
| [`children`](#children-1) | `children: <div />` | String |

##### `children`

The original node for the drawer item.

### `id`

A unique id for this drawer item. Defaults to the value of [`name`](#name).

If using the `<Drawer>` as a component list to be dragged into `<Puck.Preview>`, this should be the key of a component defined in the [Config](/docs/api-reference/configuration/config).

### `isDragDisabled`

Whether or not this item is disabled.



================================================
FILE: apps/docs/pages/docs/api-reference/components/drawer.mdx
================================================
---
title: <Drawer>
---

import { PuckPreview } from "@/docs/components/Preview";
import { Puck, Drawer } from "@/puck";

# \<Drawer\>

A list of items that can be dragged into a [`<Puck.Preview>`](puck-preview). Used for composing custom Puck UIs.

<PuckPreview
  config={{ components: { Orange: { render: () => <div>Orange</div> } } }}
  data={{ root: { props: {} }, content: [] }}
>
  <Drawer>
    <Drawer.Item name="Orange" />
  </Drawer>
</PuckPreview>

```tsx {6-8} /Drawer/1 copy
import { Puck, Drawer } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Drawer>
        <Drawer.Item name="Orange" />
      </Drawer>
    </Puck>
  );
}
```

## Props

| Param                   | Example                     | Type      | Status   |
| ----------------------- | --------------------------- | --------- | -------- |
| [`children`](#children) | `children: <Drawer.Item />` | ReactNode | Required |

## Required props

### `children`

A React node representing the contents of the `<Drawer>`. Will likely contain [`<Drawer.Item>`](drawer-item) nodes.



================================================
FILE: apps/docs/pages/docs/api-reference/components/drop-zone.mdx
================================================
---
title: <DropZone>
---

import { Callout } from "nextra/components";

# \<DropZone\>

<Callout>
The [`<DropZone>` component](/docs/api-reference/components/drop-zone) component is being replaced by the [`slot` field](/docs/api-reference/fields/slot), and will soon be deprecated and removed. For migration notes, see [these docs](/docs/guides/migrations/dropzones-to-slots).
</Callout>

Place droppable regions (zones) inside other components to enable nested components.

```tsx {1,9} copy
import { DropZone } from "@measured/puck";

const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" />
          </div>
        );
      },
    },
  },
};
```

## Props

| Param                               | Example                      | Type          | Status   |
| ----------------------------------- | ---------------------------- | ------------- | -------- |
| [`zone`](#zone)                     | `zone: "my-zone"`            | String        | Required |
| [`allow`](#allow)                   | `allow: ["HeadingBlock"]`    | Array         | -        |
| [`className`](#classname)           | `className: "MyClass"`       | String        | -        |
| [`collisionAxis`](#collisionaxis)   | `collisionAxis: "x"`         | String        | -        |
| [`disallow`](#disallow)             | `disallow: ["HeadingBlock"]` | Array         | -        |
| [`minEmptyHeight`](#minemptyheight) | `minEmptyHeight: 256`        | Number        | -        |
| [`ref`](#ref)                       | `ref: ref`                   | Ref           | -        |
| [`style`](#style)                   | `style: {display: "flex"}`   | CSSProperties | -        |

## Required props

### `zone`

Set the zone identifier for the given DropZone.

Must be unique within this component, but two different components can both define DropZones with the same `zone` value.

```tsx /zone="my-content"/ copy
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" />
          </div>
        );
      },
    },
  },
};
```

## Optional props

### `allow`

Only allow specific components to be dragged into the DropZone:

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" allow={["HeadingBlock"]} />
          </div>
        );
      },
    },
  },
};
```

### `className`

Provide a className to the DropZone component. The default DropZone styles will still be applied.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" className="MyComponent" />
          </div>
        );
      },
    },
  },
};
```

### `collisionAxis`

Configure which axis Puck will use for overlap collision detection.

Options:

- `x` - detect collisions based their x-axis overlap
- `y` - detect collisions based their y-axis overlap
- `dynamic` - automatically choose an axis based on the direction of travel

The defaults are set based on the CSS layout of the parent:

- grid: `dynamic`
- flex (row): `x`
- inline/inline-block: `x`
- Everything else: `y`

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" collisionAxis="dynamic" />
          </div>
        );
      },
    },
  },
};
```

### `disallow`

Allow all but specific components to be dragged into the DropZone. Any items in `allow` will override `disallow`.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" disallow={["HeadingBlock"]} />
          </div>
        );
      },
    },
  },
};
```

### `minEmptyHeight`

The minimum height of the DropZone when empty, in pixels. Defaults to `128`.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" minEmptyHeight={256} />
          </div>
        );
      },
    },
  },
};
```

### `ref`

A [React ref](https://react.dev/learn/manipulating-the-dom-with-refs), assigned to the root node of the DropZone.

```tsx copy {9}
const config = {
  components: {
    Example: {
      render: () => {
        const ref = useRef();

        return (
          <div>
            <DropZone zone="my-content" ref={ref} />
          </div>
        );
      },
    },
  },
};
```

### `style`

Provide a style attribute to the DropZone. The default DropZone styles will still be applied.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: () => {
        return (
          <div>
            <DropZone zone="my-content" style={{ display: "flex" }} />
          </div>
        );
      },
    },
  },
};
```

## React server components

By default, DropZones don't work with React server components as they rely on context.

Instead, you can use the [`renderDropZone` method](/docs/api-reference/configuration/component-config#propspuckrenderdropzone) passed to your component render function.



================================================
FILE: apps/docs/pages/docs/api-reference/components/field-label.mdx
================================================
---
title: <FieldLabel>
---

import { ConfigPreview } from "../../../../components/Preview";
import { FieldLabel } from "@/puck";
import { Globe } from "lucide-react";

# \<FieldLabel\>

Render a styled `label` when creating [`custom` fields](/docs/api-reference/fields/custom).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: () => {
          return (
            <FieldLabel label="Title">
              <input
                style={{ background: "white", border: "1px solid black" }}
              />
            </FieldLabel>
          );
        },
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
  }}
/>

```tsx {1,4-6} copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel label="Title">
    <input />
  </FieldLabel>
);

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: MyCustomField,
        },
      },
    },
  },
};
```

## Props

| Param                     | Example                | Type             | Status   |
| ------------------------- | ---------------------- | ---------------- | -------- |
| [`label`](#label)         | `label: "Title"`       | String           | Required |
| [`children`](#children)   | `children: <div />`    | ReactNode        | -        |
| [`className`](#classname) | `className: "MyLabel"` | String           | -        |
| [`el`](#el)               | `el: false`            | "label" \| "div" | -        |
| [`icon`](#icon)           | `icon: <svg />`        | ReactNode        | -        |
| [`readOnly`](#readonly)   | `readOnly: false`      | Boolean          | -        |

## Required props

### `label`

The label string for the fields.

```tsx /label="Title"/ copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel label="Title">
    <input />
  </FieldLabel>
);

// ...
```

## Optional props

### `children`

A node to render inside the FieldLabel's internal `<label>` element. You can also define your input element as a sibling.

```tsx {5} copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel label="Title">
    <input />
  </FieldLabel>
);

// ...
```

### `className`

Define a custom class for the field label.

```tsx /className="MyClass"/ copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel className="MyClass" label="Title">
    <input />
  </FieldLabel>
);

// ...
```

### `el`

Specify whether to render a `label` or `div`. **Defaults to `"label"`**.

```tsx /el="div"/ copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel el="div" label="Title">
    <input />
  </FieldLabel>
);

// ...
```

### `icon`

Render an icon before the label text. Puck uses [lucide-react](https://lucide.dev/guide/packages/lucide-react) internally.

```tsx /icon={<Globe size="16" />}/ copy
import { FieldLabel } from "@measured/puck";
import { Globe } from "lucide-react";

const CustomField = () => (
  <FieldLabel icon={<Globe size="16" />} label="Title">
    <input />
  </FieldLabel>
);

// ...
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: () => {
          return (
            <FieldLabel label="Title" icon={<Globe size="16" />}>
              <input style={{ border: "1px solid black" }} />
            </FieldLabel>
          );
        },
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
  }}
/>

### `readOnly`

Indicate to the user that this field is in a read-only state by showing a padlock icon to the right of the text.

```tsx /readOnly/1 copy
import { FieldLabel } from "@measured/puck";

const CustomField = () => (
  <FieldLabel label="Title" readOnly>
    <input readOnly />
  </FieldLabel>
);

// ...
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: () => {
          return (
            <div style={{ maxWidth: "max-content" }}>
              <FieldLabel label="Title" readOnly>
                <input style={{ border: "1px solid black" }} readOnly />
              </FieldLabel>
            </div>
          );
        },
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
  }}
/>



================================================
FILE: apps/docs/pages/docs/api-reference/components/puck-components.mdx
================================================
---
title: <Puck.Components>
---

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# \<Puck.Components\>

Render a draggable list of components based on the [user-defined components](/docs/api-reference/configuration/config#components) when composing a custom Puck UI. Respects the [`categories` API](/docs/api-reference/configuration/config#categories).

<PuckPreview
  config={{
    components: {
      HeadingBlock: {},
      ParagraphBlock: {},
    },
  }}
  data={{ root: { props: {} }, content: [] }}
>
  <Puck.Components />
</PuckPreview>

```tsx {} showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Components />
    </Puck>
  );
}
```

## Props

This component doesn't accept any props.



================================================
FILE: apps/docs/pages/docs/api-reference/components/puck-fields.mdx
================================================
---
title: <Puck.Fields>
---

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# \<Puck.Fields\>

Render the fields for the currently selected item in [`<Puck.Preview>`](/docs/api-reference/components/puck-preview) when composing a custom Puck UI.

<PuckPreview
  config={{
    components: {
      HeadingBlock: {},
    },
  }}
  data={{ root: { props: {} }, content: [] }}
  style={{ padding: 4 }}
>
  <Puck.Fields />
</PuckPreview>

```tsx {14} showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Fields />
    </Puck>
  );
}
```

## Props

| Param                       | Example             | Type    | Status |
| --------------------------- | ------------------- | ------- | ------ |
| [`wrapFields`](#wrapfields) | `wrapFields: false` | boolean | -      |

## Optional props

### `wrapFields`

Whether or not the top-level fields should be padded and separated by a a border. Defaults to `true`.

```tsx {6} copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Fields wrapFields={false} />
    </Puck>
  );
}
```



================================================
FILE: apps/docs/pages/docs/api-reference/components/puck-outline.mdx
================================================
---
title: <Puck.Outline>
---

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# \<Puck.Outline\>

Render an interactive outline of the current data payload when composing a custom Puck UI.

<PuckPreview
  config={{
    components: {
      HeadingBlock: { render: () => <div>Hello world</div> },
      ParagraphBlock: {},
    },
  }}
  data={{
    root: { props: {} },
    content: [{ type: "HeadingBlock", props: { id: "HeadingBlock-123" } }],
  }}
>
  <Puck.Outline />
  {/* Outline doesn't render unless Preview is rendered due to zone flushing */}
  <div style={{ display: "none" }}>
    <Puck.Preview />
  </div>
</PuckPreview>

```tsx {12} showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Outline />
    </Puck>
  );
}
```

## Props

This component doesn't accept any props.



================================================
FILE: apps/docs/pages/docs/api-reference/components/puck-preview.mdx
================================================
---
title: <Puck.Preview>
---

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# \<Puck.Preview\>

Render a drag-and-drop preview for the current data when composing a custom Puck UI.

<PuckPreview
  config={{
    components: {
      HeadingBlock: {
        fields: {title: {type: 'text'}},
        render: ({title}) => <div>{title}</div>
      }
    }
  }}
  data={{
    root: { props: {} },
    content: [{ type: "HeadingBlock", props: { id: "HeadingBlock-123", title: 'Hello, world' } }],
  }}
>

  <Puck.Preview />
</PuckPreview>

```tsx {17} showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Preview />
    </Puck>
  );
}
```

## Props

| Param       | Example                    | Type   | Status |
| ----------- | -------------------------- | ------ | ------ |
| [`id`](#id) | `id: "my-preview-content"` | String | -      |

## Optional props

### `id`

A unique identifier for the preview frame. Default: `puck-preview`.

```tsx {6} copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <Puck.Preview id="my-frame" />
    </Puck>
  );
}
```



================================================
FILE: apps/docs/pages/docs/api-reference/components/puck.mdx
================================================
---
title: <Puck>
---

# \<Puck\>

Render the Puck editor.

```tsx copy
import { Puck } from "@measured/puck";

const config = {
  components: {},
};

const initialData = {
  content: [],
  root: {},
};

export function Editor() {
  return <Puck config={config} data={initialData} />;
}
```

## Props

| Param                                                 | Example                                            | Type                                                       | Status       |
| ----------------------------------------------------- | -------------------------------------------------- | ---------------------------------------------------------- | ------------ |
| [`config`](#config)                                   | `config: { components: {} }`                       | [Config](/docs/api-reference/configuration/config)         | Required     |
| [`data`](#data)                                       | `data: {}`                                         | [Data](/docs/api-reference/data-model/data)                | Required     |
| [`dnd`](#dnd)                                         | `dnd: {}`                                          | [DndConfig](#dnd-params)                                   | -            |
| [`children`](#children)                               | `children: <Puck.Preview />`                       | ReactNode                                                  | -            |
| [`headerPath`](#headerpath)                           | `headerPath: "/my-page"`                           | String                                                     | -            |
| [`headerTitle`](#headertitle)                         | `headerTitle: "My Page"`                           | String                                                     | -            |
| [`iframe`](#iframe)                                   | `iframe: {}`                                       | [IframeConfig](#iframe-params)                             | -            |
| [`initialHistory`](#initialhistory)                   | `initialHistory: {}`                               | [InitialHistory](#initialhistory-params)                   | -            |
| [`metadata`](#metadata)                               | `metadata: {}`                                     | Object                                                     | -            |
| [`onAction()`](#onactionaction-appstate-prevappstate) | `onAction: (action, appState, prevAppState) => {}` | Function                                                   | -            |
| [`onChange()`](#onchangedata)                         | `onChange: (data) => {}`                           | Function                                                   | -            |
| [`onPublish()`](#onpublishdata)                       | `onPublish: async (data) => {}`                    | Function                                                   | -            |
| [`overrides`](#overrides)                             | `overrides: { header: () => <div /> }`             | [Overrides](/docs/api-reference/overrides)                 | Experimental |
| [`permissions`](#permissions)                         | `permissions: {}`                                  | [Plugin\[\]](/docs/api-reference/plugin)                   | Experimental |
| [`plugins`](#plugins)                                 | `plugins: [myPlugin]`                              | [Plugin\[\]](/docs/api-reference/plugin)                   | Experimental |
| [`ui`](#ui)                                           | `ui: {leftSideBarVisible: false}`                  | [AppState.ui](/docs/api-reference/data-model/app-state#ui) | -            |
| [`viewports`](#viewports)                             | `viewports: [{ width: 1440 }]`                     | [Viewport\[\]](#viewport-params)                           | -            |

## Required props

### `config`

An object describing the available components, fields and more. See the [`Config` docs](/docs/api-reference/configuration/config) for a full reference.

```tsx {4-17} copy
export function Editor() {
  return (
    <Puck
      config={{
        components: {
          HeadingBlock: {
            fields: {
              children: {
                type: "text",
              },
            },
            render: ({ children }) => {
              return <h1>{children}</h1>;
            },
          },
        },
      }}
      // ...
    />
  );
}
```

### `data`

The initial data to render. Cannot be changed once `<Puck>` has been mounted. See the [`Data` docs](/docs/api-reference/data-model/data) for a full reference.

```tsx {4-12} copy
export function Editor() {
  return (
    <Puck
      data={{
        content: [
          {
            props: { children: "Hello, world", id: "id" },
            type: "HeadingBlock",
          },
        ],
        root: {},
      }}
      // ...
    />
  );
}
```

## Optional props

### `children`

Render custom nodes to create [compositional interfaces](/docs/extending-puck/composition).

```tsx {4} copy
export function Editor() {
  return (
    <Puck /*...*/>
      <Puck.Preview />
    </Puck>
  );
}
```

### `dnd`

Configure drag-and-drop behavior.

#### dnd params

| Param                                     | Example                   | Type    | Status |
| ----------------------------------------- | ------------------------- | ------- | ------ |
| [`disableAutoScroll`](#disableautoscroll) | `disableAutoScroll: true` | boolean | -      |

##### `disableAutoScroll`

Disable auto-scroll when the user drags an item near the edge of the preview area.

### `headerPath`

Set a path to show after the header title

```tsx {4} copy
export function Editor() {
  return (
    <Puck
      headerPath="/my-page"
      // ...
    />
  );
}
```

### `headerTitle`

Set the title shown in the header

```tsx {4} copy
export function Editor() {
  return (
    <Puck
      headerTitle="My page"
      // ...
    />
  );
}
```

### `iframe`

Configure the iframe behaviour.

```tsx {4} copy
export function Editor() {
  return (
    <Puck
      iframe={{ enabled: false }}
      // ...
    />
  );
}
```

#### iframe params

| Param                           | Example                | Type    | Status |
| ------------------------------- | ---------------------- | ------- | ------ |
| [`enabled`](#enabled)           | `enabled: false`       | boolean | -      |
| [`waitForStyles`](#deferrender) | `waitForStyles: false` | boolean | -      |

##### `enabled`

Render the Puck preview within iframe. Defaults to `true`.

Disabling iframes will also disable [viewports](#viewports).

##### `waitForStyles`

Defer rendering of the Puck preview until the iframe styles have loaded, showing a spinner. Defaults to `true`.

### `initialHistory`

Sets the undo/redo Puck history state when using the `usePuck` [history API](/docs/api-reference/puck-api#history).

```tsx showLineNumbers copy {12-15}
const historyState = {
  data: {
    root: {
      props: { title: "My History" },
    },
  },
};

export function Editor() {
  return (
    <Puck
      initialHistory={{
        histories: [{ state: historyState }],
        index: 0,
      }}
      // ...
    />
  );
}
```

#### `initialHistory` params

| Param                       | Example             | Type                                                       | Status   |
| --------------------------- | ------------------- | ---------------------------------------------------------- | -------- |
| [`histories`](#histories)   | `histories: []`     | [History](/docs/api-reference/puck-api#history-params)\[\] | Required |
| [`index`](#index)           | `index: 2`          | Number                                                     | Required |
| [`appendData`](#appenddata) | `appendData: false` | Boolean                                                    | -        |

##### `histories`

An array of histories to reset the Puck state history state to.

##### `index`

The index of the histories to set the user to.

##### `appendData`

Append the Puck [`data`](#data) prop onto the end of [`histories`](#histories). Defaults to `true`.

When `false`, the Puck `data` prop will be ignored but you must specify at least one item in the `histories` array.

### `onAction(action, appState, prevAppState)`

Callback that triggers when Puck dispatches an [action](https://puckeditor.com/docs/api-reference/actions), like `insert` or `set`. Use this to track changes, perform side effects, or sync with external systems.

Receives three arguments:

1. `action`: The action that was dispatched
2. `appState`: The new [`AppState`](/docs/api-reference/data-model/app-state) after the action was applied
3. `prevAppState`: The previous [`AppState`](/docs/api-reference/data-model/app-state) before the action was applied

```tsx {4-8} copy
export function Editor() {
  return (
    <Puck
      onAction={(action, appState, prevAppState) => {
        if (action.type === "insert") {
          console.log("New component was inserted", appState);
        }
      }}
      // ...
    />
  );
}
```

### `metadata`

An object containing additional data provided to each component's [`render`](/docs/api-reference/configuration/component-config#renderprops) and [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) functions.

```tsx {4,8} copy
export function Editor() {
  return (
    <Puck
      metadata={{ title: "Hello, world" }}
      config={{
        HeadingBlock: {
          render: ({ puck }) => {
            return <h1>{puck.metadata.title}</h1>; // "Hello, world"
          },
        },
      }}
      // ...
    />
  );
}
```

### `onChange(data)`

Callback that triggers when the user makes a change.

Receives a single [`Data`](/docs/api-reference/data-model/data) arg.

```tsx {4-6} copy
export function Editor() {
  return (
    <Puck
      onChange={(data) => {
        console.log("Puck data was updated", data);
      }}
      // ...
    />
  );
}
```

### `onPublish(data)`

Callback that triggers when the user hits the "Publish" button. Use this to save the Puck data to your database.

Receives a single [`Data`](/docs/api-reference/data-model/data) arg.

```tsx {4-9} copy
export function Editor() {
  return (
    <Puck
      onPublish={async (data) => {
        await fetch("/my-api", {
          method: "post",
          body: JSON.stringify({ data }),
        });
      }}
      // ...
    />
  );
}
```

### `overrides`

An [`Overrides`](/docs/api-reference/overrides) object defining custom render methods for various parts of the Puck UI.

```tsx {4-6} copy
export function Editor() {
  return (
    <Puck
      overrides={{
        header: () => <div />,
      }}
      // ...
    />
  );
}
```

### `permissions`

Set the global [permissions](/docs/api-reference/permissions) for the Puck instance to toggle Puck functionality.

```tsx {4-6} copy
export function Editor() {
  return (
    <Puck
      permissions={{
        delete: false, // Prevent deletion of all components
      }}
      // ...
    />
  );
}
```

### `plugins`

An array of plugins to enhance Puck's behaviour. See the [Plugin API reference](/docs/api-reference/plugin).

```tsx {6} copy
import headingAnalyzer from "@measured/puck-plugin-heading-analyzer";

export function Editor() {
  return (
    <Puck
      plugins={[headingAnalyzer]}
      // ...
    />
  );
}
```

### `ui`

Set the initial application UI state. See [`AppState.ui`](/docs/api-reference/data-model/app-state#ui).

```tsx {5} copy
export function Editor() {
  return (
    <Puck
      // Hide the left side bar by default
      ui={{ leftSideBarVisible: false }}
      // ...
    />
  );
}
```

### `viewports`

Configure the viewports available to the user, rendered as an iframe. Puck will select the most appropriate initial viewport based on the user's window size, unless otherwise specified via the [`ui`](#ui) prop.

```tsx {4-8} copy
export function Editor() {
  return (
    <Puck
      viewports={[
        {
          width: 1440,
        },
      ]}
      // ...
    />
  );
}
```

#### Viewport params

| Param               | Example           | Type                                                     | Status   |
| ------------------- | ----------------- | -------------------------------------------------------- | -------- |
| [`width`](#width)   | `width: 1440`     | number                                                   | Required |
| [`height`](#height) | `height: 968`     | number \| `"auto"`                                       | -        |
| [`icon`](#icon)     | `icon: "Monitor"` | `"Smartphone"` \| `"Tablet"` \| `"Monitor"` \| ReactNode | -        |
| [`label`](#label)   | `label: "iPhone"` | string                                                   | -        |

##### `width`

The width of the viewport.

##### `height`

An optional height for the viewport. Defaults to `auto`, which will fit to the window.

##### `label`

An optional label for the viewport. This is used for browser tooltip.

##### `icon`

The icon to show in the viewport switcher. Can be:

- `"Smartphone"`
- `"Tablet"`
- `"Monitor"`
- ReactNode

Puck uses [Lucide icons](https://lucide.dev/icons/). You can use [lucide-react](https://lucide.dev/guide/packages/lucide-react) to choose a similar icon, if desired.

#### Default viewports

By default, Puck exposes small, medium and large viewports based on common viewport sizes.

```json
[
  {
    "width": 360,
    "height": "auto",
    "icon": "Smartphone",
    "label": "Small"
  },
  {
    "width": 768,
    "height": "auto",
    "icon": "Tablet",
    "label": "Medium"
  },
  {
    "width": 1280,
    "height": "auto",
    "icon": "Monitor",
    "label": "Large"
  }
]
```



================================================
FILE: apps/docs/pages/docs/api-reference/components/render.mdx
================================================
---
title: <Render>
---

# \<Render\>

Render a [`Data`](/docs/api-reference/data-model/data) object for a given [`Config`](/docs/api-reference/configuration/config).

```tsx copy showLineNumbers
import { Render } from "@measured/puck";

export function Example() {
  return <Render config={config} data={data} />;
}
```

## Props

| Param                   | Example                      | Type                                        | Status   |
| ----------------------- | ---------------------------- | ------------------------------------------- | -------- |
| [`config`](#config)     | `config: { components: {} }` | [Config](/docs/api-reference/config)        | Required |
| [`data`](#data)         | `data: {}`                   | [Data](/docs/api-reference/data-model/data) | Required |
| [`metadata`](#metadata) | `metadata: {}`               | [Metadata](/docs/api-reference/metadata)    | -        |

## Required props

### `config`

An object describing the available components, fields and more. See the [`Config` docs](/docs/api-reference/configuration/config) for a full reference.

```tsx {4-17} copy
export function Example() {
  return (
    <Render
      config={{
        components: {
          HeadingBlock: {
            fields: {
              children: {
                type: "text",
              },
            },
            render: ({ children }) => {
              return <h1>{children}</h1>;
            },
          },
        },
      }}
      // ...
    />
  );
}
```

### `data`

The data to render against the provided config. See the [`Data` docs](/docs/api-reference/data-model/data) for a full reference.

```tsx {4-12} copy
export function Example() {
  return (
    <Render
      data={{
        content: [
          {
            props: { children: "Hello, world", id: "id" },
            type: "HeadingBlock",
          },
        ],
        root: {},
      }}
      // ...
    />
  );
}
```

### `metadata`

An object containing additional data provided to each component's [`render`](/docs/api-reference/configuration/component-config#renderprops) and [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) functions.

```tsx {4,8} copy
export function Example() {
  return (
    <Render
      metadata={{ title: "Hello, world" }}
      config={{
        HeadingBlock: {
          render: ({ puck }) => {
            return <h1>{puck.metadata.title}</h1>; // "Hello, world"
          },
        },
      }}
      // ...
    />
  );
}
```



================================================
FILE: apps/docs/pages/docs/api-reference/configuration/_meta.js
================================================
const menu = {
  config: {},
};

export default menu;



================================================
FILE: apps/docs/pages/docs/api-reference/configuration/component-config.mdx
================================================
---
title: ComponentConfig
---

import { ConfigPreview, PuckPreview } from "@/docs/components/Preview";
import { Drawer } from "@/puck";

# ComponentConfig

The configuration for each component defined in [`Config`](/docs/api-reference/configuration/config).

```tsx {3-10} copy
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      render: ({ title }) => <h1>{title}</h1>,
    },
  },
};
```

## Params

| Param                                                    | Example                                         | Type     | Status   |
| -------------------------------------------------------- | ----------------------------------------------- | -------- | -------- |
| [`render()`](#renderprops)                               | `render: () => <div />`                         | Function | Required |
| [`fields`](#fields)                                      | `fields: { title: { type: "text"} }`            | Object   | -        |
| [`defaultProps`](#defaultprops)                          | `defaultProps: { title: "Hello, world" }`       | Object   | -        |
| [`inline`](#inline)                                      | `inline: true`                                  | Boolean  | -        |
| [`label`](#label)                                        | `label: "Heading Block"`                        | String   | -        |
| [`metadata`](#metadata)                                  | `metadata: {}`                                  | Object   | -        |
| [`permissions()`](#permissions)                          | `permissions: { delete: false }`                | Object   | -        |
| [`resolveData()`](#resolvedatadata-params)               | `resolveData: async ({ props }) => ({ props })` | Object   | -        |
| [`resolveFields()`](#resolvefieldsdata-params)           | `resolveFields: async ({ props }) => ({})`      | Object   | -        |
| [`resolvePermissions()`](#resolvepermissionsdata-params) | `resolvePermissions: async ({ props }) => ({})` | Object   | -        |

## Required params

### `render(props)`

A render function to render your component. Receives props as defined in `fields`, and some internal Puck props.

```tsx {4} copy
const config = {
  components: {
    HeadingBlock: {
      render: () => <h1>Hello, world</h1>,
    },
  },
};
```

#### Render props

| Arg                                             | Example       | Type     |
| ----------------------------------------------- | ------------- | -------- |
| [`id`](#id)                                     | `button-1234` | String   |
| [`puck.dragRef`](#puckdragref)                  | `null`        | Function |
| [`puck.isEditing`](#puckisediting)              | `false`       | Boolean  |
| [`puck.metadata`](/docs/api-reference/metadata) | `{}`          | Object   |
| [`puck.renderDropZone`](#puckrenderdropzone)    | `() => {}`    | Function |
| [`...props`](#props)                            | `{}`          | Object   |

##### `id`

A unique identifier for the component. Auto-generated by default.

##### `puck.dragRef`

A `ref` that tells Puck which element is draggable. Apply this to your components when using the [`inline` parameter](#inline) for advanced CSS layouts.

```tsx {5} /renderDropZone/1 copy
const config = {
  components: {
    Example: {
      inline: true,
      render: ({ puck: { dragRef } }) => {
        return <div ref={dragRef}>Hello, world</div>;
      },
    },
  },
};
```

##### `puck.isEditing`

A boolean describing whether or not this component is being rendered in the `<Puck>` component.

##### `puck.metadata`

An object containing the global metadata provided to the [`<Puck>`](/docs/api-reference/components/puck#metadata) or [`<Render>`](/docs/api-reference/components/render#metadata) component, merged with any metadata defined in this [component's config](#metadata).

```tsx {5} /renderDropZone/1 copy
const config = {
  components: {
    Example: {
      inline: true,
      render: ({ text, puck: { metadata } }) => {
        return <div>Hello, {metadata.text || text}</div>;
      },
    },
  },
};
```

##### `puck.renderDropZone`

A render method that creates a [`<DropZone>`](/docs/api-reference/components/drop-zone) for creating nested components. Use this method instead of the `<DropZone>` when implementing React server components.

```tsx {5} /renderDropZone/1 copy
const config = {
  components: {
    Example: {
      render: ({ puck: { renderDropZone } }) => {
        return <div>{renderDropZone({ zone: "my-content" })}</div>;
      },
    },
  },
};
```

##### `...props`

The remaining props are provided by the user-defined [fields](#fields).

## Optional params

### `fields`

An object describing which [`Field`](/docs/api-reference/fields) to show for each prop passed to the component.

```tsx {4-8} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      render: ({ title }) => <h1>{title}</h1>,
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
    },
  }}
/>

### `defaultProps`

Default props to apply to a new instance of the component.

```tsx {9} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      defaultProps: { title: "Hello, world" },
      render: ({ title }) => <h1>{title}</h1>,
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
    },
  }}
/>

### `inline`

Render your component without a wrapping element. Use this to [create advanced CSS layouts](/docs/integrating-puck/multi-column-layouts#advanced-css-layouts). Defaults to `false`.

When `true`, you must to specify which item is draggable via the [`puck.dragRef` prop](#puckdragref).

```tsx {4-5} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      inline: true,
      render: ({ puck }) => <h1 ref={puck.dragRef}>Hello, World</h1>,
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    inline: true,
    render: ({ title, puck }) => {
      return (
        <p style={{ margin: 0 }} ref={puck.dragRef}>
          {title}
        </p>
      );
    },
  }}
/>

### `label`

A label to show when referring to your component within the Puck editor. Defaults to the key of your component.

```tsx {4} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      label: "Heading Block",
      render: () => <h1>Hello, World</h1>,
    },
  },
};
```

<PuckPreview config={{}} data={{ root: { props: {} }, content: [] }}>
  <Drawer>
    <Drawer.Item name="Heading Block" />
  </Drawer>
</PuckPreview>

### `metadata`

An object containing any additional values. Provided to their [`render`](#renderprops) and [`resolveData`](#resolvedatadata-params) functions.

Will be merged with the global `metadata` prop provided to the [`<Puck>`](/docs/api-reference/components/puck#metadata) or [`<Render>`](/docs/api-reference/components/render#metadata) component, overriding any keys with the same name.

```tsx {4-7}
const config = {
  components: {
    HeadingBlock: {
      metadata: {
        title: "Hello, world",
      },
      render: ({ puck }) => <h1>{puck.metadata.title}</h1>,
    },
  },
};
```

### `permissions`

Set the [permissions](/docs/api-reference/permissions) for all instances of a component to toggle functionality. Inherits [global permissions](/docs/api-reference/components/puck/#permissions).

```tsx {4-6} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      permissions: {
        delete: false, // Disable deletion of all HeadingBlock instances
      },
      render: () => <h1>Hello, World</h1>,
    },
  },
};
```

### `resolveData(data, params)`

Dynamically change the props and set fields as read-only. Supports asynchronous calls.

This function is triggered when [`<Puck>`](/docs/api-reference/components/puck) renders, when a field is changed, or when the [`resolveAllData` function](/docs/api-reference/functions/resolve-all-data) is called.

```tsx {9-14} copy filename="Example mapping 'title' to 'resolvedTitle'"
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      resolveData: async ({ props }) => {
        return {
          props: { resolvedTitle: props.title },
          readOnly: { resolvedTitle: true },
        };
      },
      render: ({ resolvedTitle }) => <h1>{resolvedTitle}</h1>,
    },
  },
};
```

<ConfigPreview
  label='Try changing the "title" field'
  componentConfig={{
    fields: {
      title: {
        type: "text",
      },
      resolvedTitle: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    resolveData: ({ props }) => {
      return {
        props: { resolvedTitle: props.title },
        readOnly: { resolvedTitle: true },
      };
    },
    render: ({ resolvedTitle }) => {
      return <p style={{ margin: 0 }}>{resolvedTitle}</p>;
    },

}}
/>

#### Args

| Prop     | Example                                                  | Type   |
| -------- | -------------------------------------------------------- | ------ |
| `data`   | `{ props: { title: "Hello, world" }, readOnly: {} }`     | Object |
| `params` | `{ changed: { title: true }, metadata: { foo: "bar" } }` | Object |

##### `data.props`

The current props for the component.

```tsx copy /props/1,3
const resolveData = async ({ props }) => {
  return {
    props: { resolvedTitle: props.title },
  };
};
```

##### `data.readOnly`

The fields currently set to read-only for this component.

##### `params.changed`

An object describing which props have changed on this component since the last time `resolveData` was called.

```tsx copy {2-4} /changed/1 filename="Example only updating 'resolvedTitle' when 'title' changes"
const resolveData = async ({ props }, { changed }) => {
  if (!changed.title) {
    return { props };
  }

  return {
    props: { resolvedTitle: props.title },
  };
};
```

##### `params.lastData`

The data object from the previous run of this function.

##### `params.metadata`

An object containing the global metadata provided to the [`<Puck>`](/docs/api-reference/components/puck#metadata) or [`<Render>`](/docs/api-reference/components/render#metadata) component, merged with any metadata defined in this [component's config](#metadata).

```tsx copy {2-4} /changed/1 filename="Example only updating 'resolvedTitle' when 'title' changes"
const resolveData = async ({ props }, { metadata }) => {
  return {
    props: { title: metadata.title || props.title },
  };
};
```

##### `params.trigger`

The event that triggered this resolveData call. One of:

- `insert` - the component was inserted
- `replace` - the component was replaced, such as when a field value is changed
- `load` - the Puck editor was loaded
- `force` - an execution was forced via the [`resolveAllData` function](/docs/api-reference/functions/resolve-all-data)

#### Returns

| Prop   | Example                                              | Type   |
| ------ | ---------------------------------------------------- | ------ |
| `data` | `{ props: { title: "Hello, world" }, readOnly: {} }` | Object |

##### `data.props`

A partial props object containing modified props. Will be spread into the other props.

```tsx copy {3} filename="Example only updating resolvedTitle when title changes"
const resolveData = async ({ props }) => {
  return {
    props: { resolvedTitle: props.title },
  };
};
```

##### `data.readOnly`

A partial object describing fields to set as readonly. Will be spread into the existing readOnly state.

```tsx copy {4} filename="Example only updating resolvedTitle when title changes"
const resolveData = async ({ props }) => {
  return {
    props: { resolvedTitle: props.title },
    readOnly: { resolvedTitle: true }, // Make the `resolvedTitle` field read-only
  };
};
```

### `resolveFields(data, params)`

Dynamically set the fields for this component. Supports asynchronous calls.

This function is triggered when the component data changes.

```tsx {4-25} copy filename="Example changing one field based on another"
const config = {
  components: {
    MyComponent: {
      resolveFields: (data) => {
        const fields = {
          drink: {
            type: "radio",
            options: [
              { label: "Water", value: "water" },
              { label: "Orange juice", value: "orange-juice" },
            ],
          },
        };

        if (data.props.drink === "water") {
          return {
            ...fields,
            waterType: {
              // ... Define field
            },
          };
        }

        return fields;
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label='Try changing the "drink" field'
  componentConfig={{
    resolveFields: (data) => {
      const fields = {
        drink: {
          type: "radio",
          options: [
            { label: "Water", value: "water" },
            { label: "Orange juice", value: "orange-juice" },
          ],
        },
      };

      if (data.props.drink === "water") {
        return {
          ...fields,
          waterType: {
            type: "radio",
            options: [
              { label: "Still", value: "still" },
              { label: "Sparkling", value: "sparkling" },
            ],
          },
        };
      }

      return fields;
    },
    defaultProps: {
      drink: "water",
      waterType: "still",
    },
    render: ({ drink, waterType }) => (
      <p>
        {drink}
        {drink === "water" ? ` (${waterType})` : ""}
      </p>
    ),

}}
/>

#### Args

| Prop     | Example                                                                               | Type   |
| -------- | ------------------------------------------------------------------------------------- | ------ |
| `data`   | `{ props: { title: "Hello, world" }, readOnly: {} }`                                  | Object |
| `params` | `{ appState: {}, changed: {}, fields: {}, lastData: {}, lastFields: {}, parent: {} }` | Object |

##### `data.props`

The current props for the selected component.

##### `data.readOnly`

The fields currently set to read-only for this component.

##### `params.appState`

An object describing the [AppState](/docs/api-reference/data-model/app-state).

##### `params.changed`

An object describing which props have changed on this component since the last time this function was called.

```tsx copy {2-4} /changed/1 filename="Example only updating the fields when 'fieldType' changes"
const resolveFields = async ({ props }, { changed, lastFields }) => {
  if (!changed.fieldType) {
    return lastFields;
  }

  return {
    title: {
      type: fieldType,
    },
  };
};
```

##### `params.fields`

The static fields for this component as defined by [`fields`](#fields).

##### `params.lastData`

The data object from the previous run of this function.

##### `params.lastFields`

The last fields object created by the previous run of this function.

##### `params.parent`

The parent data object if this item is within a [DropZone](/docs/api-reference/components/drop-zone).

### `resolvePermissions(data, params)`

Dynamically set the [permissions](/docs/api-reference/permissions) for this component to toggle functionality. Can be used to control the permissions on a specific component instance. Inherits [`permissions`](#permissions). Supports asynchronous calls.

This function is triggered when the component data changes.

```tsx {4-12} copy filename="Setting permissions for a specific instance" showLineNumbers
const config = {
  components: {
    MyComponent: {
      resolvePermissions: (data, { permissions }) => {
        if (data.props.id === "MyComponent-1234") {
          return {
            delete: false, // Disable deletion on component with id MyComponent-1234
          };
        }

        return { permissions }; // Fallback to inherited permissions
      },
      // ...
    },
  },
};
```

#### Args

| Prop     | Example                                                                             | Type   |
| -------- | ----------------------------------------------------------------------------------- | ------ |
| `data`   | `{ props: { title: "Hello, world" }, readOnly: {} }`                                | Object |
| `params` | `{ appState: {}, changed: {}, permissions: {}, lastData: {}, lastPermissions: {} }` | Object |

##### `data.props`

The current props for the selected component.

##### `data.readOnly`

The fields currently set to read-only for this component.

##### `params.appState`

An object describing the [AppState](/docs/api-reference/data-model/app-state).

##### `params.changed`

An object describing which props have changed on this component since the last time this function was called. This helps prevent duplicate calls when making async operations.

```tsx copy {2-4} /changed/1 filename="Example only updating the permissions when 'example' prop changes"
const resolvePermissions = async ({ props }, { changed, lastPermissions }) => {
  if (!changed.example) {
    return lastPermissions; // Return the last permissions unless the `example` prop has changed
  }

  return await expensiveAsyncOperation();
};
```

##### `params.permissions`

The static fields for this component as defined by [`permissions`](#permissions).

##### `params.lastData`

The data object from the previous run of this function.

##### `params.lastPermissions`

The last permissions object created by the previous run of this function.

#### Returns

A [`fields`](#fields) object.



================================================
FILE: apps/docs/pages/docs/api-reference/configuration/config.mdx
================================================
# Config

The main configuration object describing what Puck can render.

```tsx copy
const config = {
  components: {
    HeadingBlock: {
      fields: {
        children: {
          type: "text",
        },
      },
      render: ({ children }) => {
        return <h1>{children}</h1>;
      },
    },
  },
};
```

## Params

| Param                       | Example                                                        | Type                                                                    | Status   |
| --------------------------- | -------------------------------------------------------------- | ----------------------------------------------------------------------- | -------- |
| [`components`](#components) | `components: { HeadingBlock: {{ render: () => <h1 /> } }`      | Object                                                                  | Required |
| [`root`](#root)             | `root: { render: () => <div /> }`                              | [`ComponentConfig`](/docs/api-reference/configuration/component-config) | -        |
| [`categories`](#categories) | `categories: { typography: { components: ["HeadingBlock"] } }` | Object                                                                  | -        |

## Required params

### `components`

An object describing the components available to Puck. Each component definition implements the [`ComponentConfig` API](/docs/api-reference/configuration/component-config).

```tsx {2-13} copy showLineNumbers
const config = {
  components: {
    HeadingBlock: {
      fields: {
        children: {
          type: "text",
        },
      },
      render: ({ children }) => {
        return <h1>{children}</h1>;
      },
    },
  },
};
```

## Optional params

### `root`

An object describing the root of your component tree. This component wraps the rest of your components. Implements the [`ComponentConfig` API](/docs/api-reference/configuration/component-config).

- You must return children to render the default content.

```tsx {2-6} copy showLineNumbers
const config = {
  root: {
    render: ({ children }) => {
      return <div>{children}</div>;
    },
  },
  // ...
};
```

### `categories`

An object describing categories for your components. Will be used to group the components in the left side-bar.

```tsx {2-6} copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock"],
    },
  },
  // ...
};
```

#### `categories[key].components`

An array of components in this category.

- Must use names of [`components`](#components).
- A component can appear in more than one category.

#### `categories[key].title`

The user-facing title for the category. Will use the `category` key if not provided.

#### `categories[key].visible`

A boolean describing whether or not the category should be visible in the side bar. **Defaults to `true`**.

#### `categories[key].defaultExpanded`

A boolean describing whether or not the category should be expanded by default in the side bar. **Defaults to `true`**.

#### `categories["other"]`

The default category for all uncategorized components. Receives all other categories params.



================================================
FILE: apps/docs/pages/docs/api-reference/data-model/app-state.mdx
================================================
---
title: AppState
---

import { Callout } from "nextra/components";

# `AppState`

<Callout>
  The application state is unstable and is likely to experience breaking
  changes.
</Callout>

The internal state of the [`<Puck>`](/docs/api-reference/components/puck) component.

## `data`

The current [`Data`](/docs/api-reference/data-model/data) payload being managed by Puck.

## `ui`

The current state of the Puck editor interface.

| Param                                           | Example                                               | Type                          |
| ----------------------------------------------- | ----------------------------------------------------- | ----------------------------- |
| [`arrayState`](#uiarraystate)                   | `{}`                                                  | Object                        |
| [`componentList`](#uicomponentlist)             | `{ typography: { components: [ "HeadingBlock" ] } }`  | Object                        |
| [`field.focus`](#fieldfocus)                    | `"title"`                                             | String                        |
| [`isDragging`](#isdragging)                     | `false`                                               | Boolean                       |
| [`itemSelector`](#uiitemselector)               | `{ index: 0, zone: "my-content" }`                    | [ItemSelector](item-selector) |
| [`leftSideBarVisible`](#uileftsidebarvisible)   | `false`                                               | Boolean                       |
| [`previewMode`](#uipreviewmode)                 | `"edit"`                                              | String                        |
| [`rightSideBarVisible`](#uirightsidebarvisible) | `false`                                               | Boolean                       |
| [`viewports`](#uiviewports)                     | `{ controlsVisible: true, current: {}, options: [] }` | Object                        |

---

### `ui.arrayState`

An object describing the internal state of array items

---

### `ui.componentList`

An object describing the component list. Similar shape to the [categories API](/docs/api-reference/configuration/config#categories)

#### `ui.componentList[key].components`

Array containing the names of components in this category

#### `ui.componentList[key].title`

Title of the category

#### `ui.componentList[key].visible`

Whether or not the category is visible in the side bar

#### `ui.componentList[key].expanded`

Whether or not the category is expanded in the side bar

---

### `ui.field.focus`

The name of the currently focused field.

---

### `ui.isDragging`

A boolean stating whether or not the user is currently dragging a component.

---

### `ui.itemSelector`

An [`ItemSelector`](item-selector) for the currently selected item.

---

### `ui.leftSideBarVisible`

Whether or not the left side bar is visible.

---

### `ui.previewMode`

The mode for the preview area, controlling whether or not the user can interact with the underlying component. Accepts the following values:

- **`"edit"` (default)**: Components can be dragged and modified. An overlay prevents interaction with the underlying component.
- **`"interactive"`**: Editing functionality is disabled. The user can interact with the underlying component.

Puck does not currently provide the UI to control this value, but it can be toggled via the `cmd+i` or `ctrl+i` hotkeys.

---

### `ui.rightSideBarVisible`

Whether or not the right side bar is visible.

---

### `ui.viewports`

| Param                                            | Example                           | Type                                                                 |
| ------------------------------------------------ | --------------------------------- | -------------------------------------------------------------------- |
| [`controlsVisible`](#uiviewportscontrolsvisible) | `false`                           | Boolean                                                              |
| [`current`](#uiviewportscurrent)                 | `{ width: 1440, height: "auto" }` | Object                                                               |
| [`options`](#uiviewportsoptions)                 | `[]`                              | [Viewports\[\]](/docs/api-reference/components/puck#viewport-params) |

#### `ui.viewports.controlsVisible`

Whether or not the viewport controls are visible.

#### `ui.viewports.current`

The currently selected viewport.

| Param                                 | Example  | Type               |
| ------------------------------------- | -------- | ------------------ |
| [`width`](#uiviewportscurrentwidth)   | `1440`   | Number             |
| [`height`](#uiviewportscurrentheight) | `"auto"` | Number \| `"auto"` |

##### `ui.viewports.current.width`

The width of the current viewport.

##### `ui.viewports.current.height`

The height of the current viewport.

#### `ui.viewports.options`

The available viewport options, as provided via the [`viewports` API](/docs/api-reference/components/puck#viewports).



================================================
FILE: apps/docs/pages/docs/api-reference/data-model/component-data.mdx
================================================
---
title: ComponentData
---

# `ComponentData`

An object representing an instance of a component.

```json
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234",
    "title": "Hello, world"
  }
}
```

## Params

| Param                   | Example                                         | Type   | Status   |
| ----------------------- | ----------------------------------------------- | ------ | -------- |
| [`type`](#type)         | `type: "HeadingBlock"`                          | String | Required |
| [`props`](#props)       | `props: { id: "12345", title: "Hello, world" }` | Object | Required |
| [`readOnly`](#readonly) | `readOnly: { title: true }`                     | Object | -        |

### Required params

#### `type`

The type of the component, which tells Puck to run the [`render()`](/docs/api-reference/configuration/component-config#renderprops) method for the component of the [same key](/docs/api-reference/configuration/config#components).

#### `props`

The props stored based on the [`component config`](/docs/api-reference/configuration/component-config) that Puck will pass to the [`render()`](/docs/api-reference/configuration/component-config#renderprops) method for the component.

```json {3-6} copy
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234", // Auto-generated
    "title": "Hello, world"
  }
}
```

Requires a unique `id` prop to be defined.

### Optional params

#### `readOnly`

An object describing which fields are set to [read-only](/docs/api-reference/configuration/component-config#datareadonly-1).

```json {7-9} copy
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234",
    "title": "Hello, world"
  },
  "readOnly": {
    "title": true
  }
}
```



================================================
FILE: apps/docs/pages/docs/api-reference/data-model/data.mdx
================================================
import { Callout } from "nextra/components";

# `Data`

An object produced by Puck describing the shape of content.

```json copy
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234",
        "title": "Hello, world"
      }
    }
  ],
  "root": { "props": { "title": "Puck Example" } },
  "zones": {}
}
```

## Params

| Param                 | Example                                  | Type                                                             | Status   |
| --------------------- | ---------------------------------------- | ---------------------------------------------------------------- | -------- |
| [`content`](#content) | `content: []`                            | [ComponentData](/docs/api-reference/data-model/component-data)[] | Required |
| [`root`](#root)       | `root: { props: { title: "My page" } }`  | [RootData](/docs/api-reference/root-data)                        | Required |
| [`zones`](#zones)     | `zones: { "HeadingBlock-123:zone": [] }` | Object                                                           | -        |

### `content`

An array of [ComponentData](/docs/api-reference/data-model/component-data) objects representing the component instances in the default content region.

```json {2-9} copy
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234",
        "title": "Hello, world"
      }
    }
  ],
  "root": {},
  "zones": {}
}
```

### `root`

An object describing data for the [`root` config](/docs/api-reference/configuration/config#root). An instance of [`RootData`](/docs/api-reference/root-data).

```json {3-7} copy
{
  "content": [],
  "root": {
    "props": {
      "title": "My page"
    }
  },
  "zones": {}
}
```

### `zones`

<Callout>
  This parameter will soon be deprecated, as DropZones have been replaced by
  [`slot` fields](/docs/api-reference/fields/slots). For migration notes, see
  [these docs](/docs/guides/migrations/dropzones-to-slots).
</Callout>

An object describing nested content regions for each [DropZone](/docs/api-reference/components/drop-zone).

#### `zones[zoneKey]`

An array of [ComponentData](/docs/api-reference/data-model/component-data) objects representing the components instances in a particular DropZone.

`zoneKey` is a compound of the component `id` and [DropZone `zone`](/docs/api-reference/components/drop-zone#zone).

```json {5-13} copy showLineNumbers
{
  "content": [],
  "root": {},
  "zones": {
    "HeadingBlock-1234:my-content": [
      {
        "type": "HeadingBlock",
        "props": {
          "id": "HeadingBlock-1234",
          "title": "Hello, world"
        }
      }
    ]
  }
}
```



================================================
FILE: apps/docs/pages/docs/api-reference/data-model/item-selector.mdx
================================================
---
title: ItemSelector
---

import { Callout } from "nextra/components";

# `ItemSelector`

An object describing the location of an item in the Puck [data](data).

```json copy
{
  "index": 0,
  "zone": "Flex-123:children" // The "children" slot field in the component with id "Flex-123"
}
```

## Params

| Param             | Example                       | Type   | Status   |
| ----------------- | ----------------------------- | ------ | -------- |
| [`index`](#index) | `index: 0`                    | Number | Required |
| [`zone`](#zone)   | `zone: "Flex-123:children" }` | String | -        |

### `index`

The index of the item.

### `zone`

An optional string representing the location of the item. It is a concatenation of two values, joined with a colon (`:`):

1. The id of the parent component
2. The name of the [slot field](/docs/api-reference/fields/slot) or [DropZone `zone`](/docs/api-reference/components/drop-zone#zone) value

The root of the payload is represented by the `root` id. The default content is represented by `default-zone`. When not provided, `zone` will contain the value `root:default-zone`, injecting data into [`content`](/docs/api-reference/data-model/data#content)

<Callout>
  DropZones have been replaced by [`slot`
  fields](/docs/api-reference/fields/slots). For migration notes, see [these
  docs](/docs/guides/migrations/dropzones-to-slots).
</Callout>



================================================
FILE: apps/docs/pages/docs/api-reference/data-model/root-data.mdx
================================================
---
title: RootData
---

# `RootData`

An object representing the root data. Similar to [`ComponentData`](/docs/api-reference/data-model/component-data).

```json
{
  "props": {
    "title": "Hello, world"
  }
}
```

## Params

| Param                          | Example                            | Type   | Status   |
| ------------------------------ | ---------------------------------- | ------ | -------- |
| [`props`](#contentprops)       | `props: { title: "Hello, world" }` | Object | Required |
| [`readOnly`](#contentreadonly) | `readOnly: { title: true }`        | Object | -        |

### Required params

#### `type`

The type of the component, which tells Puck to run the [`render()`](/docs/api-reference/configuration/component-config#renderprops) method for the component of the [same key](/docs/api-reference/config#components).

#### `props`

The props stored based on the [`component config`](/docs/api-reference/configuration/component-config) that Puck will pass to the [`render()`](/docs/api-reference/configuration/component-config#renderprops) method for the component of the [same key](/docs/api-reference/config#components).

```json {3-6} copy
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234",
    "title": "Hello, world"
  }
}
```

Requires `id` unless used for [`root`](/docs/api-reference/data-model/data#root).

### Optional params

#### `readOnly`

An object describing which fields are set to [read-only](/docs/api-reference/configuration/component-config#datareadonly-1).

```json {7-9} copy
{
  "type": "HeadingBlock",
  "props": {
    "id": "HeadingBlock-1234",
    "title": "Hello, world"
  },
  "readOnly": {
    "title": true
  }
}
```



================================================
FILE: apps/docs/pages/docs/api-reference/fields/_meta.js
================================================
const menu = {
  base: {
    title: "Base",
  },
};

export default menu;



================================================
FILE: apps/docs/pages/docs/api-reference/fields/array.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Array

Render a list of items with a subset of fields. Extends [Base](base).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      items: {
        type: "array",
        arrayFields: {
          title: { type: "text" },
        },
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>

```tsx {5-10} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
        },
      },
      render: ({ items }) => {
        return (
          <ul>
            {items.map((item, i) => (
              <li key={i}>{item.title}</li>
            ))}
          </ul>
        );
      },
    },
  },
};
```

## Params

| Param                                           | Example                                       | Type     | Status   |
| ----------------------------------------------- | --------------------------------------------- | -------- | -------- |
| [`type`](#type)                                 | `type: "array"`                               | "array"  | Required |
| [`arrayFields`](#arrayfields)                   | `arrayFields: { title: { type: "text" } }`    | Object   | Required |
| [`defaultItemProps`](#defaultitemprops)         | `defaultItemProps: { title: "Hello, world" }` | String   | -        |
| [`getItemSummary()`](#getitemsummaryitem-index) | `getItemSummary: (item) => item.title`        | Function | -        |
| [`max`](#max)                                   | `max: 3`                                      | Number   | -        |
| [`min`](#min)                                   | `min: 1`                                      | Number   | -        |

## Required params

### `type`

The type of the field. Must be `"array"` for Array fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
        },
      },
      // ...
    },
  },
};
```

### `arrayFields`

Describe the fields for each item in the array. Shares an API with `fields`.

Can include any field type, including nested array fields.

```tsx {7-9} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
        },
      },
      // ...
    },
  },
};
```

## Optional params

### `defaultItemProps`

Set the default values when a new item is added to the array.

```tsx {10-12} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
          defaultItemProps: {
            title: "Hello, world",
          },
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      items: {
        type: "array",
        arrayFields: {
          title: { type: "text" },
        },
        defaultItemProps: {
          title: "Hello, world",
        },
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>

### `getItemSummary(item, index)`

Get a label of each item in the array.

```tsx {10} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
          getItemSummary: (item) => item.title || "Item",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      items: {
        type: "array",
        arrayFields: {
          title: { type: "text" },
        },
        getItemSummary: (item) => item.title || "Item",
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>

### `max`

The maximum amount of items allowed in the array.

```tsx {10-10} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
          max: 3,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      items: {
        type: "array",
        max: 3,
        arrayFields: {
          title: { type: "text" },
        },
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>

### `min`

The minimum amount of items allowed in the array.

```tsx {10-10} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "array",
          arrayFields: {
            title: { type: "text" },
          },
          min: 1,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      items: {
        type: "array",
        min: 1,
        arrayFields: {
          title: { type: "text" },
        },
      },
    },
    defaultProps: { items: [{ title: "Apple" }, { title: "Banana" }] },
    render: ({ items }) => {
      return (
        <ul>
          {items.map((item, i) => (
            <li key={i}>{item.title}</li>
          ))}
        </ul>
      );
    },
  }}
/>



================================================
FILE: apps/docs/pages/docs/api-reference/fields/base.mdx
================================================
# Base

The base type shared by all fields.

## Params

| Param                     | Example               | Type      | Status |
| ------------------------- | --------------------- | --------- | ------ |
| [`label`](#label)         | `label: "Title"`      | String    | -      |
| [`labelIcon`](#labelicon) | `labelIcon: <Icon />` | ReactNode | -      |
| [`metadata`](#metadata)   | `metadata: {}`        | Object    | -      |
| [`visible`](#visible)     | `visible: false`      | Boolean   | -      |

## Optional params

### `label`

Set the label for the input. Puck will use the key if not provided.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          label: "My Field",
          // ...
        },
      },
      // ...
    },
  },
};
```

### `labelIcon`

Set an icon to display next to the label.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          labelIcon: <Icon />,
          // ...
        },
      },
      // ...
    },
  },
};
```

### `metadata`

An object containing additional information for the field.

```tsx {6-8} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          metadata: {
            title: "Hello, world",
          },
          // ...
        },
      },
      // ...
    },
  },
};
```

### `visible`

Show or hide the field. Defaults to `true`.

```tsx {6-8} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          visible: false,
          // ...
        },
      },
      // ...
    },
  },
};
```



================================================
FILE: apps/docs/pages/docs/api-reference/fields/custom.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Custom

Implement a field with a custom UI. Extends [Base](base).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: ({ name, onChange, value }) => {
          return (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
              style={{
                background: "white",
                border: "1px solid black",
                padding: 4,
              }}
            />
          );
        },
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
    },
  }}
/>

```tsx {7-16} copy showLineNumbers
import { FieldLabel } from "@measured/puck";

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
            />
          ),
        },
      },
      render: ({ title }) => {
        return <p>{title}</p>;
      },
    },
  },
};
```

## Params

| Param                       | Example                   | Type     | Status   |
| --------------------------- | ------------------------- | -------- | -------- |
| [`type`](#type)             | `type: "custom"`          | "custom" | Required |
| [`render()`](#renderparams) | `render: () => <input />` | Function | Required |

## Required params

### `type`

The type of the field. Must be `"custom"` for Custom fields.

```tsx {6} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
            />
          ),
        },
      },
      // ...
    },
  },
};
```

### `render(params)`

Render the custom field.

```tsx {9-14} showLineNumbers copy
import { FieldLabel } from "@measured/puck";

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
            />
          ),
        },
      },
      // ...
    },
  },
};
```

#### `params`

| Param                 | Example                    | Type     |
| --------------------- | -------------------------- | -------- |
| `field`               | `{ type: "custom" }`       | Object   |
| `id`                  | `id`                       | String   |
| `name`                | `"title"`                  | String   |
| `onChange(value, ui)` | `onChange("Hello, world")` | Function |
| `value`               | `"Hello, world"`           | Any      |

##### onChange(value, [ui])

Set the value of the field and optionally update the [Puck UI state](/docs/api-reference/data-model/app-state#ui).

| Param   | Example                       | Type                                                   | Status   |
| ------- | ----------------------------- | ------------------------------------------------------ | -------- |
| `value` | `"Hello, world"`              | Any                                                    | Required |
| `ui`    | `{leftSideBarVisible: false}` | [UiState](/docs/api-reference/data-model/app-state#ui) |          |

## Further reading

- [Custom Fields guide](/docs/extending-puck/custom-fields)
- [The `<FieldLabel>` API reference](/docs/api-reference/components/field-label)



================================================
FILE: apps/docs/pages/docs/api-reference/fields/external.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# External

Select data from a list, typically populated via a third-party API. Extends [Base](base).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
      },
    },
    render: ({ data }) => {
      return <p style={{ margin: 0 }}>{data?.title || "No data selected"}</p>;
    },
  }}
/>

```tsx {5-15} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            // ... fetch data from a third party API, or other async source

            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
        },
      },
      render: ({ data }) => {
        return <p>{data?.title || "No data selected"}</p>;
      },
    },
  },
};
```

## Params

| Param                                     | Example                                      | Type       | Status   |
| ----------------------------------------- | -------------------------------------------- | ---------- | -------- |
| [`type`](#type)                           | `type: "external"`                           | "external" | Required |
| [`fetchList()`](#fetchlistqueryparams)    | `fetchList: async () => []`                  | Function   | Required |
| [`filterFields`](#filterfields)           | `{ "rating": { type: "number" } }`           | Object     | -        |
| [`getItemSummary()`](#getitemsummaryitem) | `getItemSummary: async ({ title }) => title` | Function   | -        |
| [`initialFilters`](#initialfilters)       | `{ "rating": 1 }`                            | Object     | -        |
| [`initialQuery`](#initialquery)           | `initialQuery: "Hello, world"`               | String     | -        |
| [`mapProp()`](#mappropitem)               | `mapProp: async ({ title }) => title`        | Function   | -        |
| [`mapRow()`](#maprowitem)                 | `mapRow: async ({ title }) => title`         | Function   | -        |
| [`placeholder`](#placeholder)             | `placeholder: "Select content"`              | String     | -        |
| [`renderFooter()`](#renderfooterprops)    | `renderFooter: (props) => <p>Hello</p>`      | Function   | -        |
| [`showSearch`](#showsearch)               | `showSearch: true`                           | Boolean    | -        |

## Required params

### `type`

The type of the field. Must be `"external"` for Array fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
        },
      },
      // ...
    },
  },
};
```

### `fetchList(queryParams)`

Return a promise with a list of objects to be rendered in a tabular format via the external input modal.

The table will only render strings and numbers.

```tsx {7-14} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            // ... fetch data from a third party API, or other async source

            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
        },
      },
      // ...
    },
  },
};
```

#### `queryParams`

The parameters passed to the `fetchList` method based on your field configuration.

| Param                 | Example             | Type   |
| --------------------- | ------------------- | ------ |
| [`query`](#query)     | `"My Query"`        | String |
| [`filters`](#filters) | `"{ "rating": 1 }"` | Object |

##### `query`

The search query when using [`showSearch`](#showsearch).

##### `filters`

An object describing the filters configured by [`filterFields`](#filterfields).

## Optional params

### `filterFields`

An object describing filters for your query using the [Fields API](/docs/api-reference/fields)

```tsx {13-17} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async ({ filters }) => {
            return [
              { title: "Apple", description: "Lorem ipsum 1", rating: 5 },
              { title: "Orange", description: "Lorem ipsum 2", rating: 3 },
            ].filter((item) => item.rating >= (filters.rating || 0));
          },
          filterFields: {
            rating: {
              type: "number",
            },
          },
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async ({ filters }) => {
          return [
            { title: "Apple", description: "Lorem ipsum 1", rating: 5 },
            { title: "Orange", description: "Lorem ipsum 2", rating: 3 },
          ].filter((item) =>
            item.rating >= (filters.rating || 0)
          )
        },
        filterFields: {
          rating: {
            type: "number",
          },
        },
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },

}}
/>

### `getItemSummary(item)`

Get the label to show once the item is selected.

```tsx {13} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
          getItemSummary: (item) => item.title,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
        getItemSummary: (item) => item.title,
      },
    },
    defaultProps: {
      data: {
        title: "Hello, world",
        description: "Lorem ipsum 1",
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },
  }}
/>

### `initialFilters`

The initial filter values when using [`filterFields`](#filterfields).

```tsx {18-20} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async ({ filters }) => {
            return [
              { title: "Apple", description: "Lorem ipsum 1", rating: 5 },
              { title: "Orange", description: "Lorem ipsum 2", rating: 3 },
            ].filter((item) => item.rating >= (filters.rating || 0));
          },
          filterFields: {
            rating: {
              type: "number",
            },
          },
          initialFilters: {
            rating: 1,
          },
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async ({ filters }) => {
          return [
            { title: "Apple", description: "Lorem ipsum 1", rating: 5 },
            { title: "Orange", description: "Lorem ipsum 2", rating: 3 },
          ].filter((item) =>
            item.rating >= (filters.rating || 0)
          )
        },
        filterFields: {
          rating: {
            type: "number",
          },
        },
        initialFilters: {
          rating: 1,
        },
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },

}}
/>

### `initialQuery`

Set an initial query when using showing a search input with [`showSearch`](#showsearch).

```tsx {16} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async ({ query }) => {
            return [
              { title: "Apple", description: "Lorem ipsum 1" },
              { title: "Orange", description: "Lorem ipsum 2" },
            ].filter((item) => {
              // ...
            });
          },
          showSearch: true,
          initialQuery: "Apple",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async ({ query }) => {
          return [
            {
              title: "Apple",
              description:
                "An apple is a round, edible fruit produced by an apple tree.",
            },
            {
              title: "Orange",
              description:
                "An orange is a fruit of various citrus species in the family Rutaceae.",
            },
          ].filter((item) => {
            if (!query) return item;

            const queryLowercase = query.toLowerCase();

            if (item.title.toLowerCase().indexOf(queryLowercase) > -1) {
              return item;
            }

            if (item.description.toLowerCase().indexOf(queryLowercase) > -1) {
              return item;
            }
          })
        },
        showSearch: true,
        initialQuery: 'apple'
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },

}}
/>

### `mapProp(item)`

Modify the shape of the item selected by the user in the table before writing to the page data.

```tsx {13} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
          mapProp: (item) => item.description,
        },
      },
      render: ({ data }) => {
        return <p>{data || "No data selected"}</p>;
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
        mapProp: (item) => item.description,
      },
    },
    render: ({ data }) => {
      return <p>{data || "No data selected"}</p>;
    },
  }}
/>

### `mapRow(item)`

Modify the shape of the item before rendering it in the table. This will not affect the selected data.

```tsx {13} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
          mapRow: (item) => ({ ...item, title: item.title.toUpperCase() }),
        },
      },
      render: ({ data }) => {
        return <p>{data || "No data selected"}</p>;
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
        mapRow: (item) => ({ ...item, title: item.title.toUpperCase() }),
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },
  }}
/>

### `placeholder`

Set the placeholder text when no item is selected.

```tsx {13} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Apple", description: "Lorem ipsum 1" },
              { title: "Orange", description: "Lorem ipsum 2" },
            ];
          },
          placeholder: "Pick your favorite fruit",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            {
              title: "Apple",
              description:
                "An apple is a round, edible fruit produced by an apple tree.",
            },
            {
              title: "Orange",
              description:
                "An orange is a fruit of various citrus species in the family Rutaceae.",
            },
          ];
        },
        placeholder: "Pick your favorite fruit",
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },
  }}
/>

### `renderFooter(props)`

Customize what will be displayed in the footer of the modal.

```tsx {13-15} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            return [
              { title: "Hello, world", description: "Lorem ipsum 1" },
              { title: "Goodbye, world", description: "Lorem ipsum 2" },
            ];
          },
          renderFooter: ({ items }) => (
            <b>Custom footer with {items.length} results</b>
          ),
        },
      },
      render: ({ data }) => {
        return <p>{data || "No data selected"}</p>;
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
        renderFooter: ({ items }) => (
          <b>Custom footer with {items.length} results</b>
        ),
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },
  }}
/>

### `showSearch`

Show a search input, the value of which will be passed to `fetchList` as the `query` param.

```tsx {15} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async ({ query }) => {
            return [
              { title: "Apple", description: "Lorem ipsum 1" },
              { title: "Orange", description: "Lorem ipsum 2" },
            ].filter((item) => {
              // ...
            });
          },
          showSearch: true,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        fetchList: async ({ query }) => {
          return [
            {
              title: "Apple",
              description:
                "An apple is a round, edible fruit produced by an apple tree.",
            },
            {
              title: "Orange",
              description:
                "An orange is a fruit of various citrus species in the family Rutaceae.",
            },
          ].filter((item) => {
            if (!query) return item;

            const queryLowercase = query.toLowerCase();

            if (item.title.toLowerCase().indexOf(queryLowercase) > -1) {
              return item;
            }

            if (item.description.toLowerCase().indexOf(queryLowercase) > -1) {
              return item;
            }
          })
        },
        showSearch: true,
      },
    },
    render: ({ data }) => {
      return <p>{data?.title || "No data selected"}</p>;
    },

}}
/>

<div id="puck-portal-root" />



================================================
FILE: apps/docs/pages/docs/api-reference/fields/number.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Number

Render a `number` input. Extends [Base](base).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      myNumber: {
        type: "number",
      },
    },
    defaultProps: { myNumber: 5 },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>

```tsx {5-7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
        },
      },
      render: ({ myNumber }) => {
        return <div>{myNumber}</div>;
      },
    },
  },
};
```

## Params

| Param                         | Example                         | Type     | Status   |
| ----------------------------- | ------------------------------- | -------- | -------- |
| [`type`](#type)               | `type: "number"`                | "number" | Required |
| [`max`](#max)                 | `max: 10`                       | number   | -        |
| [`min`](#min)                 | `min: 0`                        | number   | -        |
| [`placeholder`](#placeholder) | `placeholder: "Lorem ipsum..."` | String   | -        |

## Required params

### `type`

The type of the field. Must be `"number"` for Number fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
        },
      },
      // ...
    },
  },
};
```

## Optional params

### `max`

The maximum numeric value allowed.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
          max: 10,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      myNumber: {
        type: "number",
        max: 10,
      },
    },
    defaultProps: { myNumber: 5 },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>

### `min`

The minimum numeric value allowed.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
          min: 0,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      myNumber: {
        type: "number",
        min: 0,
      },
    },
    defaultProps: { myNumber: 5 },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>

### Placeholder

The placeholder text to display when the field is empty.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
          placeholder: "Lorem ipsum...",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      myNumber: {
        type: "number",
        placeholder: "Lorem ipsum...",
      },
    },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>

### `step`

The stepping interval when interacting with the field.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        myNumber: {
          type: "number",
          step: 0.1,
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      myNumber: {
        type: "number",
        step: 0.1,
      },
    },
    defaultProps: { myNumber: 5 },
    render: ({ myNumber }) => {
      return <div>{myNumber}</div>;
    },
  }}
/>



================================================
FILE: apps/docs/pages/docs/api-reference/fields/object.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Object

Render an object with a subset of fields. Extends [Base](base).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      params: {
        type: "object",
        objectFields: {
          title: { type: "text" },
        },
      },
    },
    defaultProps: { params: { title: "Hello, world" } },
    render: ({ params }) => {
      return <p>{params.title}</p>;
    },
  }}
/>

```tsx {5-10} copy
const config = {
  components: {
    Example: {
      fields: {
        params: {
          type: "object",
          objectFields: {
            title: { type: "text" },
          },
        },
      },
      render: ({ params }) => {
        return <p>{params.title}</p>;
      },
    },
  },
};
```

## Params

| Param                           | Example                                     | Type    | Status   |
| ------------------------------- | ------------------------------------------- | ------- | -------- |
| [`type`](#type)                 | `type: "array"`                             | "array" | Required |
| [`objectFields`](#objectfields) | `objectFields: { title: { type: "text" } }` | Object  | Required |

## Required params

### `type`

The type of the field. Must be `"object"` for Object fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "object",
          objectFields: {
            title: { type: "text" },
          },
        },
      },
      // ...
    },
  },
};
```

### `objectFields`

Describe the fields for the object. Shares an API with `fields`.

Can include any field type, including nested object fields.

```tsx {7-9} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "object",
          objectFields: {
            title: { type: "text" },
          },
        },
      },
      // ...
    },
  },
};
```



================================================
FILE: apps/docs/pages/docs/api-reference/fields/radio.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Radio

Render a `radio` input with a list of options. Extends [Base](base).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      textAlign: {
        type: "radio",
        options: [
          { label: "Left", value: "left" },
          { label: "Right", value: "right" },
        ],
      },
    },
    defaultProps: {
      textAlign: "left",
    },
    render: ({ textAlign }) => {
      return <p style={{ textAlign, margin: 0 }}>Hello, world</p>;
    },
  }}
/>

```tsx {5-11} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "radio",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      defaultProps: {
        textAlign: "left",
      },
      render: ({ textAlign }) => {
        return <p style={{ textAlign }}>Hello, world</p>;
      },
    },
  },
};
```

## Params

| Param                 | Example                                               | Type     | Status   |
| --------------------- | ----------------------------------------------------- | -------- | -------- |
| [`type`](#type)       | `type: "radio"`                                       | "radio"  | Required |
| [`options`](#options) | `options: [{ label: "Option 1", value: "option-1" }]` | Object[] | Required |

## Required params

### `type`

The type of the field. Must be `"radio"` for Array fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "radio",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      // ...
    },
  },
};
```

### `options`

The options for the radio field. The `value` can be a String, Number or Boolean.

```tsx {7-10} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "radio",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      // ...
    },
  },
};
```



================================================
FILE: apps/docs/pages/docs/api-reference/fields/select.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Select

Render a `select` input with a list of options. Extends [Base](base).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      textAlign: {
        type: "select",
        options: [
          { label: "Left", value: "left" },
          { label: "Right", value: "right" },
        ],
      },
    },
    render: ({ textAlign }) => {
      return <p style={{ textAlign, margin: 0 }}>Hello, world</p>;
    },
  }}
/>

```tsx {5-11} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "select",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      render: ({ textAlign }) => {
        return <p style={{ textAlign }}>Hello, world</p>;
      },
    },
  },
};
```

## Params

| Param                 | Example                                               | Type     | Status   |
| --------------------- | ----------------------------------------------------- | -------- | -------- |
| [`type`](#type)       | `type: "select"`                                      | "select" | Required |
| [`options`](#options) | `options: [{ label: "Option 1", value: "option-1" }]` | Object[] | Required |

## Required params

### `type`

The type of the field. Must be `"select"` for Array fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "select",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      // ...
    },
  },
};
```

### `options`

The options for the select field. The `value` can be a String, Number or Boolean.

```tsx {7-10} copy
const config = {
  components: {
    Example: {
      fields: {
        textAlign: {
          type: "select",
          options: [
            { label: "Left", value: "left" },
            { label: "Right", value: "right" },
          ],
        },
      },
      // ...
    },
  },
};
```



================================================
FILE: apps/docs/pages/docs/api-reference/fields/slot.mdx
================================================
import {
  ConfigPreview,
  PuckPreview,
  CodeBlockDrawer,
} from "@/docs/components/Preview";
import { usePuck } from "@/puck";
import { generateId } from "@/core/lib/generate-id";

# Slot

Define a drag-and-drop area containing nested components. Extends [Base](base).

- This field produces an array of [ComponentData](/docs/api-reference/data-model/component-data)
- The array is transformed to a [render function](#render-function) before being provided to `render()`

This field does render any UI in the form section.

<PuckPreview
  label="Example"
  renderDrawer={() => {
    return (
      <CodeBlockDrawer getCode={(appState) => appState.data.content[0].props} />
    );
  }}
  config={{
    components: {
      Example: {
        fields: {
          content: {
            type: "slot",
          },
        },
        render: ({ content: Content }) => {
          return (
            <div style={{ padding: 32 }}>
              <Content />
            </div>
          );
        },
        permissions: {
          duplicate: false,
          delete: false,
        },
      },
      Card: {
        render: () => {
          return (
            <div
              style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }}
            >
              Hello, world
            </div>
          );
        },
      },
    },
  }}
  data={{
    content: [
      {
        type: "Example",
        props: {
          id: "Example-1",
          content: [{ type: "Card", props: { id: "Example-2" } }],
        },
      },
    ],
    root: { props: {} },
  }}
/>

```tsx {5-7,10} copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => {
        return <Content />;
      },
    },
    Card: {
      render: () => <div>Hello, world</div>,
    },
  },
};
```

## TypeScript

When using TypeScript, make sure to use the `Slot` type so the render prop is correctly transformed.

```tsx
import { Slot } from "@measured/puck";

type Props = {
  Example: {
    content: Slot; // Converted from the ComponentData[] type into a render function
  };
};
```

## Params

| Param                   | Example                      | Type   | Status   |
| ----------------------- | ---------------------------- | ------ | -------- |
| [`type`](#type)         | `type: "slot"`               | "slot" | Required |
| [`allow`](#allow)       | `allow: ["HeadingBlock"]`    | Array  | -        |
| [`disallow`](#disallow) | `disallow: ["HeadingBlock"]` | Array  | -        |

## Required params

### `type`

The type of the field. Must be `"slot"` for Slot fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      // ...
    },
  },
};
```

## Optional params

### `allow`

Only allow specific components to be dragged into the slot. Will be overwritten by the [`allow` prop](#allow-1) provided to the render function.

```tsx copy {7}
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
          allow: ["HeadingBlock"],
        },
      },
      // ...
    },
  },
};
```

### `disallow`

Allow all but specific components to be dragged into the slot. Any items in `allow` will override `disallow`. Will be overwritten by the [`disallow` prop](#disallow-1) provided to the render function.

```tsx copy {7}
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
          disallow: ["HeadingBlock"],
        },
      },
      // ...
    },
  },
};
```

## Render function

Slot data is provided to `render()` as a render function (or component). Provide props to this function to customize the behavior of the slot at render-time.

| Param                               | Example                      | Type          | Status |
| ----------------------------------- | ---------------------------- | ------------- | ------ |
| [`allow`](#allow-1)                 | `allow: ["HeadingBlock"]`    | Array         | -      |
| [`className`](#classname)           | `className: "MyClass"`       | String        | -      |
| [`collisionAxis`](#collisionaxis)   | `collisionAxis: "x"`         | String        | -      |
| [`disallow`](#disallow-1)           | `disallow: ["HeadingBlock"]` | Array         | -      |
| [`minEmptyHeight`](#minemptyheight) | `minEmptyHeight: 256`        | Number        | -      |
| [`ref`](#ref)                       | `ref: ref`                   | Ref           | -      |
| [`style`](#style)                   | `style: {display: "flex"}`   | CSSProperties | -      |

### `allow`

Only allow specific components to be dragged into the slot. Overrides the [`allow` parameter](#allow) provided to the field.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        return <Content allow={["HeadingBlock"]} />;
      },
    },
  },
};
```

### `className`

Provide a className to the rendered element. The default styles will still be applied.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        return <Content className="MyComponent" />;
      },
    },
  },
};
```

### `collisionAxis`

Configure which axis Puck will use for overlap collision detection.

Options:

- `x` - detect collisions based their x-axis overlap
- `y` - detect collisions based their y-axis overlap
- `dynamic` - automatically choose an axis based on the direction of travel

The defaults are set based on the CSS layout of the parent:

- grid: `dynamic`
- flex (row): `x`
- inline/inline-block: `x`
- Everything else: `y`

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        return <Content collisionAxis="dynamic" />;
      },
    },
  },
};
```

### `disallow`

Allow all but specific components to be dragged into the slot. Any items in `allow` will override `disallow`.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content }) => {
        return <Content disallow={["HeadingBlock"]} />;
      },
    },
  },
};
```

### `minEmptyHeight`

The minimum height of the slot when empty, in pixels. Defaults to `128`.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: () => {
        return <Content minEmptyHeight={256} />;
      },
    },
  },
};
```

### `ref`

A [React ref](https://react.dev/learn/manipulating-the-dom-with-refs), assigned to the root node of the slot.

```tsx copy {7}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        const ref = useRef();

        return <Content ref={ref} />;
      },
    },
  },
};
```

### `style`

Provide a style attribute to the slot. The default styles will still be applied.

```tsx copy {5}
const config = {
  components: {
    Example: {
      render: ({ content: Content }) => {
        return <Content style={{ display: "flex" }} />;
      },
    },
  },
};
```



================================================
FILE: apps/docs/pages/docs/api-reference/fields/text.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Text

Render a `text` input. Extends [Base](base).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: { title: "Hello, world" },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
    },
  }}
/>

```tsx {5-7} copy
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "text",
        },
      },
      render: ({ title }) => {
        return <p>{title}</p>;
      },
    },
  },
};
```

## Params

| Param                         | Example                         | Type   | Status   |
| ----------------------------- | ------------------------------- | ------ | -------- |
| [`type`](#type)               | `type: "text"`                  | "text" | Required |
| [`placeholder`](#placeholder) | `placeholder: "Lorem ipsum..."` | String | -        |

## Required params

### `type`

The type of the field. Must be `"text"` for Text fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "text",
        },
      },
      // ...
    },
  },
};
```

## Optional params

### Placeholder

The placeholder text to display when the field is empty.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "text",
          placeholder: "Lorem ipsum...",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "text",
        placeholder: "Lorem ipsum...",
      },
    },
    render: ({ title }) => {
      return <div>{title}</div>;
    },
  }}
/>



================================================
FILE: apps/docs/pages/docs/api-reference/fields/textarea.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Textarea

Render a `textarea` input. Extends [Base](base).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      description: {
        type: "textarea",
      },
    },
    render: ({ description }) => {
      return <p>{description}</p>;
    },
    defaultProps: { description: "Hello, world" },
  }}
/>

```tsx {5-7} copy
const config = {
  components: {
    Example: {
      fields: {
        description: {
          type: "textarea",
        },
      },
      render: ({ description }) => {
        return <p>{description}</p>;
      },
    },
  },
};
```

## Params

| Param                         | Example                         | Type       | Status   |
| ----------------------------- | ------------------------------- | ---------- | -------- |
| [`type`](#type)               | `type: "textarea"`              | "textarea" | Required |
| [`placeholder`](#placeholder) | `placeholder: "Lorem ipsum..."` | String     | -        |

## Required params

### `type`

The type of the field. Must be `"textarea"` for Textarea fields.

```tsx {6} copy
const config = {
  components: {
    Example: {
      fields: {
        description: {
          type: "textarea",
        },
      },
      // ...
    },
  },
};
```

## Optional params

### Placeholder

The placeholder text to display when the field is empty.

```tsx {7} copy
const config = {
  components: {
    Example: {
      fields: {
        description: {
          type: "textarea",
          placeholder: "Lorem ipsum...",
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      description: {
        type: "textarea",
        placeholder: "Lorem ipsum...",
      },
    },
    render: ({ description }) => {
      return <div>{description}</div>;
    },
  }}
/>



================================================
FILE: apps/docs/pages/docs/api-reference/functions/migrate.mdx
================================================
---
title: migrate
---

# migrate

Migrate the [Data payload](/docs/api-reference/data-model/data) to the latest shape, automatically transforming deprecated data.

```tsx copy showLineNumbers {7-10}
import { migrate } from "@measured/puck";

migrate(legacyData);
```

## Migrations

### Root data to props

Migrates any props stored on root data to the `props` object.

**Before**

```json
{
  "root": {
    "title": "Hello, world"
  }
}
```

**After**

```json
{
  "root": {
    "props": { "title": "Hello, world" }
  }
}
```

### DropZones to slots

Migrates all [DropZone](/docs/api-reference/components/drop-zone) data from [`zones`](/docs/api-reference/data-model/data#zones) to inline [slots](/docs/api-reference/fields/slot). Requires slots to be provided via the [`config`](#config) arg, where the field name for the slot matches the `zone` prop of the DropZone. See the [DropZone to slots migration guide](/docs/guides/migrations/dropzones-to-slots) for more information.

**Before**

```json showLineNumbers {10-20}
{
  "content": [
    {
      "type": "Grid",
      "props": {
        "id": "Grid-12345"
      }
    }
  ],
  "zones": {
    "Grid-12345:items": [
      {
        "type": "HeadingBlock",
        "props": {
          "id": "Heading-12345",
          "title": "Hello, world"
        }
      }
    ]
  }
}
```

**After**

```json showLineNumbers {7-15}
{
  "content": [
    {
      "type": "Grid",
      "props": {
        "id": "Grid-12345",
        "items": [
          {
            "type": "HeadingBlock",
            "props": {
              "id": "Heading-12345",
              "title": "Hello, world"
            }
          }
        ]
      }
    }
  ]
}
```

## Args

| Param               | Example                                       | Type                                               | Status   |
| ------------------- | --------------------------------------------- | -------------------------------------------------- | -------- |
| [`data`](#data)     | `{ content: [{type: "Heading", props: {} }]}` | [Data](/docs/api-reference/data-model/data)        | Required |
| [`config`](#config) | `{ components: {} }`                          | [Config](/docs/api-reference/configuration/config) | -        |

### `data`

The legacy data you want to transform.

### `config`

A [config](/docs/api-reference/configuration/config) object. Normally only required if using [slots](/docs/api-reference/fields/slot).

## Returns

The updated [Data](/docs/api-reference/data-model/data) object.



================================================
FILE: apps/docs/pages/docs/api-reference/functions/resolve-all-data.mdx
================================================
---
title: resolveAllData
---

# resolveAllData

Utility function to execute all [`resolveData` methods](/docs/api-reference/configuration/component-config#resolvedatadata-params) on a data payload outside of the [`<Puck>`](/docs/api-reference/components/puck) editor, returning the updated value.

```tsx copy
import { resolveAllData } from "@measured/puck";

const updatedData = await resolveAllData(data, config);
```

This is useful if you need to run your resolvers before passing your data to [`<Render>`](/docs/api-reference/components/render).

## Args

| Param    | Example              | Type                                               |
| -------- | -------------------- | -------------------------------------------------- |
| `data`   | `{}`                 | [Data](/docs/api-reference/data-model/data)        |
| `config` | `{ components: {} }` | [Config](/docs/api-reference/configuration/config) |

## Returns

The updated [Data](/docs/api-reference/data-model/data) object.



================================================
FILE: apps/docs/pages/docs/api-reference/functions/transform-props.mdx
================================================
---
title: transformProps
---

# transformProps

Transform component props stored in a [Data payload](/docs/api-reference/data-model/data). This convenience method can be used for [prop renames and other data migrations](/docs/integrating-puck/data-migration).

This method will modify all data in [`content`](/docs/api-reference/data-model/data#content) and [`zones`](/docs/api-reference/data-model/data#zones).

```tsx copy showLineNumbers {7-10}
import { transformProps } from "@measured/puck";

const data = {
  content: [{ type: "HeadingBlock", props: { title: "Hello, world" } }],
};

const updatedData = transformProps(data, {
  // Rename `title` to `heading`
  HeadingBlock: ({ title, ...props }) => ({ heading: title, ...props }),
});

console.log(updatedData);
// { content: [{ type: "HeadingBlock", props: { heading: "Hello, world" } }] };
```

## Args

| Param                       | Example                                | Type                                               | Status   |
| --------------------------- | -------------------------------------- | -------------------------------------------------- | -------- |
| [`data`](#data)             | `{}`                                   | [Data](/docs/api-reference/data-model/data)        | Required |
| [`transforms`](#transforms) | `{ HeadingBlock: (props) => (props) }` | Object                                             | Required |
| [`config`](#config)         | `{ components: {} }`                   | [Config](/docs/api-reference/configuration/config) | -        |

### `data`

The [Data payload](/docs/api-reference/data-model/data) to be transformed.

### `transforms`

An object describing the transform functions for each component defined in your [`config`](/docs/api-reference/configuration/config).

- `root` is a reserved property, and can be used to update the [`root` component](/docs/api-reference/configuration/config#root) props.

### `config`

A [config](/docs/api-reference/configuration/config) object. Normally only required if using [slots](/docs/api-reference/fields/slot).

## Returns

The updated [Data](/docs/api-reference/data-model/data) object.

## Notes

- It's important to consider that data may include both components with old data and new data, and write your transform accordingly.



================================================
FILE: apps/docs/pages/docs/api-reference/functions/use-get-puck.mdx
================================================
---
title: useGetPuck
---

# useGetPuck

A hook that returns a function that retrieves the latest [`PuckApi`](/docs/api-reference/puck-api) at call time. This is useful in callbacks, effects, or any logic that runs outside the component render lifecycle.

```tsx copy
import { useGetPuck } from "@measured/puck";

const Example = () => {
  const getPuck = useGetPuck();

  const handleClick = useCallback(() => {
    // Current PuckApi is always provided
    const { appState } = getPuck();
  }, [getPuck]);

  return <button onClick={handleClick}>Click me</button>;
};
```

If you need to react to changes to `PuckApi`, try the [`usePuck` hook](use-puck).

## Returns

A function to retrieve the latest [`PuckApi`](/docs/api-reference/puck-api) data at call time.



================================================
FILE: apps/docs/pages/docs/api-reference/functions/use-puck.mdx
================================================
---
title: usePuck
---

# usePuck

A hook for accessing the [`PuckApi`](/docs/api-reference/puck-api) as part of your React render lifecycle.. The best way to access `usePuck` is via the `createUsePuck()` factory.

```tsx copy
import { createUsePuck } from "@measured/puck";

const usePuck = createUsePuck();

const Example = () => {
  const type = usePuck((s) => s.selectedItem?.type || "Nothing");

  return <h2>{type} selected</h2>;
};
```

You can also access `usePuck` as a direct export, but you won't be able to use [selectors](#selectordata), resulting in unwanted re-renders and degraded performance.

## Args

| Param                             | Example                      | Type     |
| --------------------------------- | ---------------------------- | -------- |
| [`selector(data)`](#selectordata) | `(s: PuckApi) => s.appState` | Function |

### `selector(data)`

A selector function that describes what `usePuck` returns. Receives [`PuckApi`](/docs/api-reference/puck-api) and returns anything. Be as granular as possible to minimize re-renders.

```tsx
// Good: only re-render when the `selectedItem` changes
const selectedItem = usePuck((s) => s.selectedItem);

// Bad: re-render when anything changes
const { selectedItem } = usePuck();
const { selectedItem } = usePuck((s) => s);

// Bad: selector creates a new object reference, causing an infinite comparison loop
const { selectedItem } = usePuck((s) => ({ ...s.selectedItem }));
```

## Returns

Whatever is returned by the [`selector`](#selectordata).



================================================
FILE: apps/docs/pages/docs/api-reference/functions/walk-tree.mdx
================================================
---
title: walkTree
---

# walkTree

Recursively walk the entire tree for the [`Data`](/docs/api-reference/data-model/data) or a single [`ComponentData`](/docs/api-reference/data-model/component-data) node, using a depth-first approach where the deepest [slots](/docs/api-reference/fields/slots) are processed first.

Receives a callback function that is called once for each slot. You can optionally return a value to update the slot.

```tsx
import { walkTree } from "@measured/puck";

// Add the example prop to all children in the data
const newData = walkTree(data, config, (content) =>
  content.map((child) => ({
    ...child,
    props: { ...child.props, example: "Hello, world" },
  }))
);

console.log(newData);
// {
//   "root": {},
//   "content": [
//     {
//       "type": "Component",
//       "props": {
//         "id": "1234",
//         "content": [
//           {
//             "type": "Child",
//             "props": { "id": "5678", "example": "Hello, world" }
//           }
//         ],
//         "example": "Hello, world"
//       }
//     }
//   ]
// }
```

## Args

| Param                                        | Example                            | Type                                                                                                          |
| -------------------------------------------- | ---------------------------------- | ------------------------------------------------------------------------------------------------------------- |
| [`data`](#data)                              | `{ root: {}, content: [] }`        | [Data](/docs/api-reference/data-model/data) \| [ComponentData](/docs/api-reference/data-model/component-data) |
| [`config`](#config)                          | `{ components: {} }`               | [Config](/docs/api-reference/configuration/config)                                                            |
| [`callbackFn()`](#callbackfncontent-options) | `(content) => content.slice(0, 1)` | Function                                                                                                      |

### `data`

The [`Data`](/docs/api-reference/data-model/data) or [`ComponentData`](/docs/api-reference/data-model/component-data) to traverse.

### `config`

A Puck [config](/docs/api-reference/configuration/config) object, used to determine which components contain slots.

### `callbackFn(content, options)`

A callback function called for each slot. Receives an array of [`ComponentData`](/docs/api-reference/data-model/component-data). Optionally returns an updated array of [`ComponentData`](/docs/api-reference/data-model/component-data) to update the content for this slot.

#### Args

| Param                 | Example                                         | Type                                                               |
| --------------------- | ----------------------------------------------- | ------------------------------------------------------------------ |
| [`content`](#content) | `[{ type: "Heading", props: {} }]`              | [`ComponentData[]`](/docs/api-reference/data-model/component-data) |
| [`options`](#options) | `{ parentId: "Flex-123", propName: "Content" }` | object                                                             |

##### `content`

An array of [`ComponentData`](/docs/api-reference/data-model/component-data), containing all the nodes for this slot.

##### `options`

An object containing additional options

##### `options.parentId`

The id of the parent component that defines this slot.

##### `options.propName`

The name of the slot field.

#### Returns

Optionally return an updated array of [`ComponentData`](/docs/api-reference/data-model/component-data) objects.

## Returns

A new [`Data`](/docs/api-reference/data-model/data) or [`ComponentData`](/docs/api-reference/data-model/component-data) object populated with any values returned by the callbackFn.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/_meta.js
================================================
const menu = {
  "action-bar": {},
  "component-item": {},
  components: {},
  "field-label": {},
  "field-types": {},
  fields: {},
  "header-actions": {},
  header: {},
  iframe: {},
  outline: {},
  preview: {},
  puck: {},
};

export default menu;



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/action-bar.mdx
================================================
---
title: actionBar
---

# actionBar

Override the action bar. Use the [`<ActionBar>` component](/docs/api-reference/components/action-bar) to extend the default ActionBar UI.

```tsx copy
import { ActionBar } from "@measured/puck";

const overrides = {
  actionBar: ({ children, label }) => (
    <ActionBar label={label}>
      <ActionBar.Group>{children}</ActionBar.Group>
    </ActionBar>
  ),
};
```

## Props

| Prop                            | Example          | Type      |
| ------------------------------- | ---------------- | --------- |
| [`children`](#children)         | `<div />`        | ReactNode |
| [`label`](#label)               | `"HeadingBlock"` | String    |
| [`parentAction`](#parentAction) | `<div />`        | ReactNode |

### `children`

A fragment containing the default [actions](/docs/api-reference/components/action-bar-action). This should normally be rendered inside an [`<ActionBar.Group>`](/docs/api-reference/components/action-bar-group).

### `label`

The default label for the action bar.

### `parentAction`

A single [`<ActionBar.Action>`](/docs/api-reference/components/action-bar-action) to select the current component's parent.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/component-item.mdx
================================================
---
title: componentItem
---

# componentItem

Override an individual item within the component list.

```tsx copy
const overrides = {
  componentItem: ({ name }) => <div>{name}</div>,
};
```

## Props

| Prop                    | Example    | Type      |
| ----------------------- | ---------- | --------- |
| [`children`](#children) | `<div />`  | ReactNode |
| [`name`](#name)         | `"Button"` | ReactNode |

### `children`

The default node for the component item.

### `name`

The name of the component item.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/components.mdx
================================================
---
title: components
---

# components

Override the component list.

```tsx copy
const overrides = {
  components: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the component list.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/field-label.mdx
================================================
---
title: fieldLabel
---

# fieldLabel

Override the label for all internal fields.

```tsx copy
const overrides = {
  fieldLabel: ({ children, label }) => (
    <label>
      <div>{label}</div>
      {children}
    </label>
  ),
};
```

## Props

See [FieldLabel](/docs/api-reference/components/field-label) component.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/field-types.mdx
================================================
---
title: fieldTypes
---

# fieldTypes

Override each [field type](/docs/api-reference/fields).

```tsx copy
const overrides = {
  fieldTypes: {
    number: ({ onChange }) => (
      <input type="number" onChange={(e) => onChange(e.currentTarget.value)} />
    ),
    text: ({ onChange }) => (
      <input type="text" onChange={(e) => onChange(e.currentTarget.value)} />
    ),
    // ...
  },
};
```

You can specify a custom render method for each known [field type](/docs/api-reference/fields), or introduce completely new ones.

## Render Props

Extends the [`<AutoField>` API](/docs/api-reference/components/auto-field).

| Prop                    | Example     | Type                                                           |
| ----------------------- | ----------- | -------------------------------------------------------------- |
| [`children`](#children) | `<input />` | ReactNode                                                      |
| [`name`](#name)         | `"title"`   | string                                                         |
| `...`                   | `{}`        | [`<AutoField>` API](/docs/api-reference/components/auto-field) |

### `children`

The default node for this field type.

### `name`

The name of the prop this field is rendering for.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/fields.mdx
================================================
---
title: fields
---

# fields

Override the fields wrapper.

```tsx copy
const overrides = {
  fields: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the fields.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/header-actions.mdx
================================================
---
title: headerActions
---

# headerActions

Override the header actions. Return a fragment so your items appear inline.

```tsx copy
const overrides = {
  headerActions: ({ children }) => (
    <>
      {children}
      <button>Click me</button>
    </>
  ),
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the header actions, which includes the default publish button.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/header.mdx
================================================
---
title: header
---

# header

Override the header.

```tsx copy
const overrides = {
  header: ({ actions }) => (
    <header>
      <span>My header</span>
      <div>{actions}</div>
    </header>
  ),
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`actions`](#actions)   | `<div />` | ReactNode |
| [`children`](#children) | `<div />` | ReactNode |

### `actions`

A node containing the [`headerActions`](header-actions).

### `children`

The default node for the header.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/iframe.mdx
================================================
---
title: iframe
---

# iframe

Override the root of the iframe.

```tsx copy
const overrides = {
  iframe: ({ children, document }) => {
    useEffect(() => {
      if (document) {
        document.body.setAttribute("style", "background: hotpink;");
      }
    }, [document]);

    return <>{children}</>;
  },
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`document`](#document) | `{}`      | Document  |
| [`children`](#children) | `<div />` | ReactNode |

### `document`

The document of the iframe window.

### `children`

The default node for the iframe.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/outline.mdx
================================================
---
title: outline
---

# outline

Override the outline.

```tsx copy
const overrides = {
  outline: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the outline.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/preview.mdx
================================================
---
title: preview
---

# preview

Override the drag-and-drop preview.

```tsx copy
const overrides = {
  preview: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the preview.



================================================
FILE: apps/docs/pages/docs/api-reference/overrides/puck.mdx
================================================
---
title: puck
---

# puck

Override the Puck children. This is the equivalent of passing in [`children`](/docs/api-reference/components/puck#children) to the [`<Puck>`](/docs/api-reference/components/puck) component.

```tsx copy
const overrides = {
  puck: ({ children }) => <div>{children}</div>,
};
```

## Props

| Prop                    | Example   | Type      |
| ----------------------- | --------- | --------- |
| [`children`](#children) | `<div />` | ReactNode |

### `children`

The default node for the [`<Puck>`](/docs/api-reference/components/puck) children.



================================================
FILE: apps/docs/pages/docs/extending-puck/_meta.js
================================================
const menu = {
  composition: {},
  "custom-fields": {},
  "internal-puck-api": {},
  theming: {},
  plugins: {},
  "ui-overrides": {},
};

export default menu;



================================================
FILE: apps/docs/pages/docs/extending-puck/composition.mdx
================================================
import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# Composition

Puck uses compositional patterns enable completely custom editor interfaces. [See an example](https://demo.puckeditor.com/custom-ui/edit/).

## Using composition

Composition can be achieved by providing [`children`](/docs/api-reference/components/puck#children) to the [`<Puck>` component](/docs/api-reference/components/puck):

```tsx showLineNumbers copy
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <div
        style={{ display: "grid", gridTemplateColumns: "1fr 2fr", gridGap: 16 }}
      >
        <div>
          {/* Render the drag-and-drop preview */}
          <Puck.Preview />
        </div>
        <div>
          {/* Render the component list */}
          <Puck.Components />
        </div>
      </div>
    </Puck>
  );
}
```

<PuckPreview
  config={{
    components: {
      HeadingBlock: {
        render: () => {
          return <span>Hello, world</span>;
        },
      },
    },
  }}
  data={{
    content: [{ type: "HeadingBlock", props: { id: "HeadingBlock-1" } }],
    root: { props: {} },
  }}
>
  <div style={{ display: "grid", gridTemplateColumns: "1fr 2fr", gridGap: 16 }}>
    <div>
      <Puck.Components />
    </div>
    <div>
      <Puck.Preview />
    </div>
  </div>
</PuckPreview>

## Compositional components

Puck exposes its core components, allowing you to compose them together to create new layouts:

- [`<Puck.Components>`](/docs/api-reference/components/puck-components) - A draggable list of components.
- [`<Puck.Fields>`](/docs/api-reference/components/puck-fields) - The fields for the currently selected item.
- [`<Puck.Outline>`](/docs/api-reference/components/puck-outline) - An interactive outline.
- [`<Puck.Preview>`](/docs/api-reference/components/puck-preview) - A drag-and-drop preview.

The internal UI for these components can also be changed by implementing [UI overrides](/docs/extending-puck/overrides) or [theming](theming).

### Helper components

Puck also exposes helper components for even deeper customization:

- [`<Drawer>`](/docs/api-reference/components/drawer) - A reference list of items that can be dragged into a droppable area, normally `<Puck.Preview>`.
- [`<Drawer.Item>`](/docs/api-reference/components/drawer-item) - An item that can be dragged from a `<Drawer>`.
- [`<FieldLabel>`](/docs/api-reference/components/field-label) - A styled label for creating inputs.

## Further reading

- [Internal Puck API](/docs/extending-puck/internal-puck-api)
- [UI overrides](/docs/extending-puck/ui-overrides)



================================================
FILE: apps/docs/pages/docs/extending-puck/custom-fields.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";
import { AutoField, FieldLabel } from "@/puck";

# Custom Fields

Puck can be extended with completely custom fields for different use-cases.

## Creating a custom field

Creating a custom field is possible using the [`custom` field type](/docs/api-reference/fields/custom):

```tsx copy showLineNumbers {5-15}
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
              style={{ border: "1px solid black", padding: 4 }}
            />
          ),
        },
      },
      render: ({ title }) => {
        return <p>{title}</p>;
      },
    },
  },
};
```

The [`onChange` function](/docs/api-reference/fields/custom#onchangevalue-ui) updates the Puck data payload for the field name, in this case "title".

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "custom",
        render: ({ name, onChange, value }) => {
          return (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
              style={{
                background: "white",
                border: "1px solid black",
                padding: 4,
              }}
            />
          );
        },
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
    },
  }}
/>

## Adding a label

You can add your own label, but it's recommended to use the [`<FieldLabel>` component](/docs/api-reference/components/field-label) provided by Puck to seamlessly integrate into the Puck field UI.

```tsx copy showLineNumbers {1, 11-13}
import { FieldLabel } from "@measured/puck";

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          label: "Label Example",
          render: ({ field }) => (
            <FieldLabel label={field.label}>
              <input {/*...*/} />
            </FieldLabel>
          ),
        },
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "custom",
        label: "Label Example",
        render: ({ field, name, onChange, value }) => {
          return (
            <FieldLabel label={field.label}>
              <input
                defaultValue={value}
                name={name}
                onChange={(e) => onChange(e.currentTarget.value)}
                style={{
                  background: "white",
                  border: "1px solid black",
                  padding: 4,
                }}
              />
            </FieldLabel>
          );
        },
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
    },
  }}
/>

## Rendering Puck fields internally

Use the [`<AutoField>` component](/docs/api-reference/components/auto-field) to render Puck fields within your custom field.

```tsx copy showLineNumbers {1, 12-16}
import { AutoField } from "@measured/puck";

const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          label: "Label Example",
          render: ({ field, value, onChange }) => (
            <FieldLabel label={field.label}>
              <AutoField
                field={{ type: "text" }}
                onChange={(value) => onChange(value)}
                value={value}
              />
            </FieldLabel>
          ),
        },
        // ...
      },
    },
  },
};
```

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      title: {
        type: "custom",
        label: "AutoField Example",
        render: ({ field, value, onChange }) => {
          return (
            <FieldLabel label={field.label}>
              <AutoField
                field={{ type: "text" }}
                value={value}
                onChange={onChange}
              />
            </FieldLabel>
          );
        },
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <p style={{ margin: 0 }}>{title}</p>;
    },
  }}
/>

## Updating the UI state

The [`onChange` function](/docs/api-reference/fields/custom#onchangevalue-ui) can also be used to modify the [Puck UI state](/docs/api-reference/data-model/app-state#ui) at the same time as updating the field value:

```tsx copy showLineNumbers {14,15}
const config = {
  components: {
    Example: {
      fields: {
        title: {
          type: "custom",
          render: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) =>
                onChange(
                  e.currentTarget.value,
                  // Close the left side bar when this field is changed
                  { leftSideBarVisible: false }
                )
              }
              style={{ border: "1px solid black", padding: 4 }}
            />
          ),
        },
      },
      render: ({ title }) => {
        return <p>{title}</p>;
      },
    },
  },
};
```

## Further reading

- [The `<AutoField>` API reference](/docs/api-reference/components/auto-field)
- [The `<FieldLabel>` API reference](/docs/api-reference/components/field-label)
- [The `custom` field API reference](/docs/api-reference/fields/custom)



================================================
FILE: apps/docs/pages/docs/extending-puck/internal-puck-api.mdx
================================================
---
title: Internal Puck API
---

# Internal Puck API

Puck exposes it's internal API as [`PuckApi`](/docs/api-reference/puck-api) for extending Puck with custom functionality within [custom fields](/docs/extending-puck/custom-fields), [compositional interfaces](/docs/extending-puck/composition) or [UI overrides](/docs/extending-puck/ui-overrides).

## Accessing the internal API

You can access [`PuckApi`](/docs/api-reference/puck-api) via two hooks:

- [`usePuck`](/docs/api-reference/functions/use-puck) - returns `PuckApi` as part of your component render lifecycle
- [`useGetPuck`](/docs/api-reference/functions/use-get-puck) - returns a function to access the latest `PuckApi` at call time

### Within the render lifecycle

To access the API within your render lifecycle, use the `usePuck` hook. You can use a selector to limit re-rendering to a specific part of the API.

```tsx copy
import { createUsePuck } from "@measured/puck";

const usePuck = createUsePuck();

const Example = () => {
  // Use a selector so you only re-render when the selected type changes
  const type = usePuck((s) => s.selectedItem?.type || "Nothing");

  return <h2>{type} selected</h2>;
};
```

See the [`usePuck`](/docs/api-reference/functions/use-puck) docs for a full API reference.

### Outside of the render lifecycle

Often it's not necessary to re-render your component when the PuckApi changes. Puck provides the `useGetPuck` hook for accessing the latest `PuckApi` at call time.

```tsx copy
import { useGetPuck } from "@measured/puck";

const Example = () => {
  const getPuck = useGetPuck();

  const handleClick = useCallback(() => {
    // Get the latest PuckApi value
    const { appState } = getPuck();

    console.log(appState);
  }, [getPuck]);

  return <button onClick={handleClick}>Click me</button>;
};
```

See the [`useGetPuck`](/docs/api-reference/functions/use-get-puck) docs for a full API reference.

## Usage in practice

Generally, you'll want to combine this with composition, UI overrides or custom fields. **PuckApi cannot currently be accessed outside of these contexts**.

Here's an example using the internal API to render the page data as JSON using composition:

```tsx
import { Puck, createUsePuck } from "@measured/puck";

const usePuck = createUsePuck();

const JSONRenderer = () => {
  const appState = usePuck((s) => s.appState);

  return <div>{JSON.stringify(appState.data)}</div>;
};

export function Editor() {
  return (
    <Puck>
      <JSONRenderer />
    </Puck>
  );
}
```

## Further reading

- [`PuckApi` API reference](/docs/api-reference/puck-api)
- [`usePuck` API reference](/docs/api-reference/functions/use-puck)
- [`useGetPuck` API reference](/docs/api-reference/functions/use-get-puck)
- [Composition](/docs/extending-puck/composition)
- [Custom fields](/docs/extending-puck/custom-fields)
- [UI overrides](/docs/extending-puck/ui-overrides)



================================================
FILE: apps/docs/pages/docs/extending-puck/plugins.mdx
================================================
# Plugin API

import { Callout } from "nextra/components";

<Callout>
  The plugin API is highly experimental and is likely to experience breaking
  changes.
</Callout>

The plugin API enables developers to distribute plugins to customize the Puck interface.

## Official plugins

- [`emotion-cache`](https://github.com/measuredco/puck/tree/main/packages/plugin-emotion-cache): Inject emotion cache into the Puck iframe.
- [`heading-analyzer`](https://github.com/measuredco/puck/tree/main/packages/plugin-heading-analyzer): Analyze the heading outline of your page and be warned when you're not respecting WCAG 2 accessibility standards.

Please see the [awesome-puck repo](https://github.com/measuredco/awesome-puck) for a full list of community plugins.

## Developing a plugin

Plugins implement the [`overrides`](/docs/extending-puck/ui-overrides) API:

```tsx showLineNumbers copy {3-9, 15}
import { Puck } from "@measured/puck";

const MyPlugin = {
  overrides: {
    componentItem: ({ name }) => (
      <div style={{ backgroundColor: "hotpink" }}>{name}</div>
    ),
  },
};

export function Editor() {
  return (
    <Puck
      // ...
      plugins={[MyPlugin]}
    />
  );
}
```

## Plugin currying

Plugins are rendered in the order they are defined. Unless otherwise specified, all overrides are _curried_, meaning that the return node of one plugin will be passed as `children` to the next plugin.

This may result in some incompatible plugin combinations. To improve your chance of building a widely compatible plugin, consider:

1. Implementing as few override methods as you need
2. Always rendering `children` if possible

## Custom fields

Plugins enable full UI overhauls. If you're creating a field for a specific use-case, you might be better off distributing a [custom field](custom-fields).

## Further reading

- [Plugin API reference](/docs/api-reference/plugin)



================================================
FILE: apps/docs/pages/docs/extending-puck/theming.mdx
================================================
# Theming

Whilst Puck provides the ability to create custom interfaces through [composition](composition) and [UI overrides](ui-overrides), there is currently no way to apply theming to the built-in Puck components.

We are actively exploring this via [#139 on GitHub](https://github.com/measuredco/puck/issues/139)



================================================
FILE: apps/docs/pages/docs/extending-puck/ui-overrides.mdx
================================================
import { Callout } from "nextra/components";

# UI overrides

<Callout>
  The overrides API is highly experimental and is likely to experience breaking
  changes.
</Callout>

Overrides allow you to change how Puck renders its default interface. It can be used with or without [composition](/docs/extending-puck/composition).

There are many different overrides available. See the [`overrides` API reference](/docs/api-reference/overrides) for the full list.

## Implementing an override

Use the [`overrides` prop](/docs/api-reference/components/puck#overrides) to implement an override:

```tsx showLineNumbers copy {7-12}
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck
      // ...
      overrides={{
        // Render a custom element for each item in the component list
        componentItem: ({ name }) => (
          <div style={{ backgroundColor: "hotpink" }}>{name}</div>
        ),
      }}
    />
  );
}
```

## Examples

### Custom publish button

A common use case is to override the Puck header. You can either use the [`header` override](/docs/api-reference/overrides/header) to change the entire header, or use the [`headerActions` override](/docs/api-reference/overrides/header-actions) to inject new controls into the header and change the publish button.

Here's an example that also leverage the [internal Puck API](/docs/extending-puck/internal-puck-api) to replace the default publish button with a custom one:

```tsx showLineNumbers copy {10-30}
import { Puck, createUsePuck } from "@measured/puck";

const usePuck = createUsePuck();

const save = () => {};

export function Editor() {
  return (
    <Puck
      // ...
      overrides={{
        headerActions: ({ children }) => {
          const appState = usePuck((s) => s.appState);

          return (
            <>
              <button
                onClick={() => {
                  save(appState.data);
                }}
              >
                Save
              </button>

              {/* Render default header actions, such as the default Button */}
              {/*{children}*/}
            </>
          );
        },
      }}
    />
  );
}
```

### Custom field type

An advanced use case is overriding all fields of a certain type by specifying the [`fieldTypes` override](/docs/api-reference/overrides/field-types).

```tsx showLineNumbers copy {8-18}
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck
      // ...
      overrides={{
        fieldTypes: {
          // Override all text fields with a custom input
          text: ({ name, onChange, value }) => (
            <input
              defaultValue={value}
              name={name}
              onChange={(e) => onChange(e.currentTarget.value)}
              style={{ border: "1px solid black", padding: 4 }}
            />
          ),
        },
      }}
    />
  );
}
```

## Further reading

- [`overrides` API reference](/docs/api-reference/overrides)
- [Composition](/docs/extending-puck/composition)
- [Internal Puck API](/docs/extending-puck/internal-puck-api)



================================================
FILE: apps/docs/pages/docs/guides/_meta.js
================================================
const menu = {
  migrations: {
    title: "Migrations",
  },
};

export default menu;



================================================
FILE: apps/docs/pages/docs/guides/migrations/_meta.js
================================================
const menu = {
  "dropzones-to-slots": {
    title: "DropZones to Slots",
  },
};

export default menu;



================================================
FILE: apps/docs/pages/docs/guides/migrations/dropzones-to-slots.mdx
================================================
---
title: Migrating - DropZones to Slots
---

# How to migrate from DropZones to Slots

This guide will help you migrate from [`DropZones`](/docs/api-reference/components/drop-zone) to [Slots](/docs/api-reference/fields/slot).

---

[Slot fields](/docs/api-reference/fields/slot) replace the [`<DropZone>` component](/docs/api-reference/components/drop-zone), introducing an inline data model that supports [`defaultProps`](/docs/api-reference/configuration/component-config#defaultprops), [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) and [Server Components](/docs/integrating-puck/server-components) out-of-the-box.

## Replace DropZone instances

Replace your `<DropZone>` instances with [slot fields](/docs/api-reference/fields/slot) and the slot [render function](/docs/api-reference/fields/slot#render-function).

**Before**

```tsx {5}
const config = {
  components: {
    Example: {
      render: () => {
        return <DropZone zone="items" allow={["HeadingBlock"]} />;
      },
    },
  },
};
```

**After**

```tsx {5-7, 10, 13}
const config = {
  components: {
    Example: {
      fields: {
        items: {
          type: "slot",
        },
      },
      defaultProps: {
        items: [], // Slots support defaultProps and other APIs like resolveData
      },
      render: ({ items: Items }) => {
        return <Items allow={["HeadingBlock"]} />; // Slots support most DropZone APIs
      },
    },
  },
};
```

## The data model

The slot data model is inline and recursive. This means that instead of storing data in a global `zones` object, data is stored as arrays of [ComponentData](/docs/api-reference/data-model/component-data) as a prop.

**Before**

```json showLineNumbers {10-20}
{
  "content": [
    {
      "type": "Grid",
      "props": {
        "id": "Grid-12345"
      }
    }
  ],
  "zones": {
    "Grid-12345:items": [
      {
        "type": "HeadingBlock",
        "props": {
          "id": "Heading-12345",
          "title": "Hello, world"
        }
      }
    ]
  }
}
```

**After**

```json showLineNumbers {7-15}
{
  "content": [
    {
      "type": "Grid",
      "props": {
        "id": "Grid-12345",
        "items": [
          {
            "type": "HeadingBlock",
            "props": {
              "id": "Heading-12345",
              "title": "Hello, world"
            }
          }
        ]
      }
    }
  ]
}
```

### Migrating legacy data

For new slots, you don't need to do anything. If you're migrating existing DropZones to slots, you will need to migrate your the data accordingly. Puck provides the [`migrate()` helper](/docs/api-reference/functions/migrate) to help with this:

```tsx
import { migrate } from "@measured/puck";
import config from "puck.config.tsx";

const newData = migrate(legacyData, config);
```

This will migrate any existing zone in `zones` where you have defined a `slot` with the same name.

## Further reading

- [The `slot` field API](/docs/api-reference/fields/slot)
- [The `DropZone` component](/docs/api-reference/components/drop-zone)



================================================
FILE: apps/docs/pages/docs/integrating-puck/_meta.js
================================================
const menu = {
  "component-configuration": {},
  "root-configuration": {},
  "multi-column-layouts": {},
  categories: {},
  "dynamic-props": {},
  "dynamic-fields": {},
  "external-data-sources": {},
  "server-components": {},
  "data-migration": {},
  viewports: {},
  "feature-toggling": {},
};

export default menu;



================================================
FILE: apps/docs/pages/docs/integrating-puck/categories.mdx
================================================
# Categories

Categories allow you to group components in the left side bar.

## Creating categories

Use the [`categories` API](/docs/api-reference/configuration/config#categories) to define the component categories.

```tsx {2-6} copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock", "ParagraphBlock"],
    },
  },
  // ...
};
```

Components can appear in separate categories:

```tsx /HeadingBlock/ copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock", "ParagraphBlock"],
    },
    foundational: {
      components: ["HeadingBlock"],
    },
  },
  // ...
};
```

You can also change the title, collapse and hide categories:

```tsx {5,6,10} copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock", "ParagraphBlock"],
      title: "Text",
      defaultExpanded: false, // Collapse this category by default
    },
    foundational: {
      components: ["HeadingBlock"],
      visible: false, // Mark this category as hidden
    },
  },
  // ...
};
```

## The "other" category

Any uncategorized components will be grouped in the `other` category. This will be visible by default. It respects the same API as other categories.

```tsx {6-8} copy showLineNumbers
const config = {
  categories: {
    typography: {
      components: ["HeadingBlock", "ParagraphBlock"],
    },
    other: {
      title: "Other components",
    },
  },
  // ...
};
```

## TypeScript

You can pass in available category names to the `Config` type if using TypeScript

```tsx copy {3}
import type { Config } from "@measured/puck";

const config: Config<{}, {}, "typography" | "interactive"> = {
  categories: {
    typography: {},
    interactive: {},
  },
  // ...
};
```

## Further reading

- [`categories` API reference](/docs/api-reference/configuration/config#categories)
- [`renderComponentList` API reference](/docs/api-reference/components/puck#rendercomponentlistparams)



================================================
FILE: apps/docs/pages/docs/integrating-puck/component-configuration.mdx
================================================
import { ConfigPreview, PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";

# Component Configuration

Puck's core behaviour is configured via the [Config](/docs/api-reference/configuration/config). This describes:

- which components are available to Puck
- how to render each component
- which fields to show when the user selects a component
- additional information, like [category grouping](categories)

The [Config](/docs/api-reference/configuration/config) is provided via the `config` prop to the main Puck components:

- [`<Puck>`](/docs/api-reference/components/puck) reads the Config and renders an editor UI. The user interacts with the editor to produce a [data payload](/docs/api-reference/data-model/data).
- [`<Render>`](/docs/api-reference/components/render) takes a [data payload](/docs/api-reference/data-model/data) and renders it according to the provided Config.

## The `render` function

Components can be defined via the `components` object in [Config](/docs/api-reference/configuration/config). Every definition must provide a [`render` function](/docs/api-reference/configuration/component-config#renderprops):

```tsx showLineNumbers copy {4-6}
const config = {
  components: {
    HeadingBlock: {
      render: () => {
        return <h1>Hello, world</h1>;
      },
    },
  },
};
```

This tells Puck that **HeadingBlock** is a valid component, and describes how to render it.

When the user drags the component onto the preview and hits **Publish** in the editor UI via the `<Puck>` component, this Config will produce a [data payload](/docs/api-reference/data-model/data) like this:

```json copy
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234"
      }
    }
  ],
  "root": {}
}
```

The data payload and Config together tell `<Render>` how to render the page. It can also be provided to `<Puck>` as an [initial `data` payload](/docs/api-reference/components/puck#data).

<PuckPreview
  label="Try interacting with the heading"
  config={{
    components: {
      HeadingBlock: {
        render: () => {
          return <span>Hello, world</span>;
        },
      },
    },
  }}
  data={{
    content: [{ type: "HeadingBlock", props: { id: "HeadingBlock-1" } }],
    root: { props: {} },
  }}
>
  <Puck.Preview />
</PuckPreview>

### TypeScript

If you're using TypeScript, we recommend strictly typing your config:

```tsx copy {1,3-5} /Components/2
import type { Config } from "@measured/puck";

type Components = {
  HeadingBlock: {};
};

const config: Config<Components> = {
  components: {
    HeadingBlock: {
      render: () => {
        return <h1>Hello, world</h1>;
      },
    },
  },
};
```

## Adding fields

[Fields](/docs/api-reference/fields) allow users to provide input to components. The value of each field is passed in as a prop to the `render` function.

You can define a field via the [`fields` parameter](/docs/api-reference/configuration/component-config#fields):

```tsx showLineNumbers copy {5-7} /title/2,3
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      render: ({ title }) => {
        return <h1>{title}</h1>;
      },
    },
  },
};
```

This will render a [Text field](/docs/api-reference/fields/text) when the user selects an instance of the **HeadingBlock** component in the editor UI.

<ConfigPreview
  label='Text field example'
  componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    render: ({ title }) => {
      return <span>{title}</span>;
    },

}}
/>

When the user modifies the input, the editor will produce a data payload like this:

```json copy {7}
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234",
        "title": "Hello, world"
      }
    }
  ],
  "root": {}
}
```

### TypeScript

It's best to define the props for the component if using TypeScript. This enables strict type checking for your fields.

```tsx copy {5}
import type { Config } from "@measured/puck";

type Components = {
  HeadingBlock: {
    title: string;
  };
};

const config: Config<Components> = {
  // ...
};
```

## Setting default props

Default props allow you to set an initial value for a prop when a new component is added.

Provide an object to the [`defaultProps`](/docs/api-reference/configuration/component-config#fields) parameter to configure this:

```tsx showLineNumbers copy {9-11}
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
      },
      defaultProps: {
        title: "Hello, world",
      },
      render: ({ title }) => {
        return <h1>{title}</h1>;
      },
    },
  },
};
```

Unlike [default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), `defaultProps` are stored in the data payload and will populate the Puck fields.

<ConfigPreview
  label="Text field example"
  componentConfig={{
    fields: {
      title: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    render: ({ title }) => {
      return <span>{title}</span>;
    },
  }}
/>



================================================
FILE: apps/docs/pages/docs/integrating-puck/data-migration.mdx
================================================
# Data Migration

## Version migrating

Puck follows semantic versioning. Major releases may introduce breaking changes for your Data payload.

Puck provides the [`migrate`](/docs/api-reference/functions/migrate) helper method to help migrate legacy data payloads to the latest data model, transforming any deprecated properties to their latest counterparts as described by the [Data API reference](/docs/api-reference/data-model/data).

```tsx
import { migrate } from "@measured/puck";

migrate(legacyData);
```

## Breaking changes to props

Renaming or removing the props passed to your components are considered breaking changes. Any existing [Data](/docs/api-reference/data-model/data) payloads that reference these props will be unable to render.

There are two strategies for dealing with this:

1. Retaining backwards-compatible props
2. Implementing a prop migration

### Retaining backwards-compatibility

The easiest way to avoid breaking changes is to implement your prop changes in a backwards compatible manor:

```tsx copy showLineNumbers {2}
const config = {
  HeadingBlock: ({ title, heading }) => <h1>{heading || title}</h1>,
};
```

### Implementing a prop migration

It will often be preferrable to update the underlying [Data](/docs/api-reference/data-model/data) payload. Puck provides the [`transformProps`](/docs/api-reference/functions/transform-props) utility method to conveniently transform the props for a given component throughout the payload.

```tsx copy showLineNumbers {15-18}
import { transformProps } from "@measured/puck";

const config = {
  // Renamed `title` prop to `heading`
  HeadingBlock: ({ heading }) => <h1>{heading}</h1>,
};

const data = {
  content: [
    // HeadingBlock references the legacy `title` prop
    { type: "HeadingBlock", props: { title: "Hello, world" } },
  ],
};

const updatedData = transformProps(data, {
  // Map `heading` to the legacy `title` prop
  HeadingBlock: ({ title, ...props }) => ({ heading: title, ...props }),
});

console.log(updatedData);
// { content: [{ type: "HeadingBlock", props: { heading: "Hello, world" } }] };
```

You may choose to run this transform every time you render your content, or perform a batch operation against your database.

```tsx copy showLineNumbers filename="Example showing data being updated before rendering"
import { Puck, Render, transformProps } from "@measured/puck";

const transforms = {
  HeadingBlock: ({ title, ...props }) => ({ heading: title, ...props }),
};

export const MyEditor = ({ data, config }) => (
  <Puck data={transformProps(data, transforms)} config={config} />
);

export const MyPage = ({ data, config }) => (
  <Render data={transformProps(data, transforms)} config={config} />
);
```

## Further reading

- [`Data` API reference](/docs/api-reference/data-model/data)
- [`migrate` API reference](/docs/api-reference/functions/migrate)
- [`transformProps` API reference](/docs/api-reference/functions/transform-props)



================================================
FILE: apps/docs/pages/docs/integrating-puck/dynamic-fields.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Dynamic Fields

Dynamic field resolution allows you to change the [field configuration](/docs/api-reference/configuration/component-config#fields) for a component based on the current component props.

## Dynamic component fields

The [`resolveFields` function](/docs/api-reference/configuration/component-config#resolvefieldsdata-params) allows you to make synchronous and asynchronous changes to the field configuration.

For example, we can set the configuration of one field based on the prop value of another:

```tsx {4-25} showLineNumbers copy
const config = {
  components: {
    MyComponent: {
      resolveFields: (data) => {
        const fields = {
          drink: {
            type: "radio",
            options: [
              { label: "Water", value: "water" },
              { label: "Orange juice", value: "orange-juice" },
            ],
          },
        };

        if (data.props.drink === "water") {
          return {
            ...fields,
            waterType: {
              // ... Define field
            },
          };
        }

        return fields;
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label='Try changing the "drink" field'
  componentConfig={{
    resolveFields: (data) => {
      const fields = {
        drink: {
          type: "radio",
          options: [
            { label: "Water", value: "water" },
            { label: "Orange juice", value: "orange-juice" },
          ],
        },
      };

      if (data.props.drink === "water") {
        return {
          ...fields,
          waterType: {
            type: "radio",
            options: [
              { label: "Still", value: "still" },
              { label: "Sparkling", value: "sparkling" },
            ],
          },
        };
      }

      return fields;
    },
    defaultProps: {
      drink: "water",
      waterType: "still",
    },
    render: ({ drink, waterType }) => (
      <p>
        {drink}
        {drink === "water" ? ` (${waterType})` : ""}
      </p>
    ),

}}
/>

### Making asynchronous calls

The [`resolveFields` function](/docs/api-reference/configuration/component-config#resolvefieldsdata-params) also enables asynchronous calls.

Here's an example populating the options for a [`select` field](/docs/api-reference/fields/select) based on a [`radio` field](/docs/api-reference/fields/radio)

```tsx {4-24} showLineNumbers copy
const config = {
  components: {
    MyComponent: {
      resolveFields: async (data, { changed, lastFields }) => {
        // Don't call the API unless `category` has changed
        if (!changed.category) return lastFields;

        // Make an asynchronous API call to get the options
        const options = await getOptions(data.category);

        return {
          category: {
            type: "radio",
            options: [
              { label: "Fruit", value: "fruit" },
              { label: "Vegetables", value: "vegetables" },
            ],
          },
          item: {
            type: "select",
            options,
          },
        };
      },
      render: ({ item }) => <h1>{item}</h1>,
    },
  },
};
```

<ConfigPreview
  label='Try changing the "category" field'
  componentConfig={{
    resolveFields: async (data, { changed, lastFields }) => {
      if (!changed.category) return lastFields;

      await new Promise((resolve) => setTimeout(resolve, 500));

      return {
        category: {
          type: "radio",
          options: [
            { label: "Fruit", value: "fruit" },
            { label: "Vegetables", value: "vegetables" },
          ],
        },
        item: {
          type: "select",
          options:
            data.props.category === "fruit"
              ? [
                { label: "Select a fruit", value: "" },
                { label: "Apple", value: "apple" },
                { label: "Orange", value: "orange" },
                { label: "Tomato", value: "tomato" }
              ] : [
                { label: "Select a vegetable", value: "" },
                { label: "Broccoli", value: "broccoli" },
                { label: "Cauliflower", value: "cauliflower" },
                { label: "Mushroom", value: "mushroom" },
              ],
        },
      };
    },

    defaultProps: {
      category: "fruit",
      item: "",
    },
    render: ({ item }) => <p>{item}</p>,

}}
/>

## Limitations

The [`slot` field](/docs/api-reference/fields/slot) is not currently supported by Dynamic Fields, but most use-cases can be achieved using [Dynamic Props](dynamic-props).

## Further reading

- [`resolveFields` API reference](/docs/api-reference/configuration/component-config#resolvefieldsdata-params)



================================================
FILE: apps/docs/pages/docs/integrating-puck/dynamic-props.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# Dynamic Props

Dynamic prop resolution allows you to change the props for a component after the props have been changed by the user. This is useful for making third-party API calls, such as requesting the latest content from a headless CMS.

## Dynamic component props

The [`resolveData` function](/docs/api-reference/configuration/component-config#resolvedatadata-params) allows you to make changes to the props and set fields as read-only.

For example, we can set the value of one prop to another:

```tsx {12-18} showLineNumbers copy
const config = {
  components: {
    HeadingBlock: {
      fields: {
        title: {
          type: "text",
        },
        resolvedTitle: {
          type: "text",
        },
      },
      resolveData: async ({ props }) => {
        return {
          props: {
            resolvedTitle: props.title,
          },
        };
      },
      render: ({ resolvedTitle }) => {
        return <h1>{resolvedTitle}</h1>;
      },
    },
  },
};
```

<ConfigPreview
  label='Try changing the "title" field'
  componentConfig={{
    fields: {
      title: {
        type: "text",
      },
      resolvedTitle: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    resolveData: ({ props }) => {
      return {
        props: { resolvedTitle: props.title },
      };
    },
    render: ({ resolvedTitle }) => {
      return <p style={{ margin: 0 }}>{resolvedTitle}</p>;
    },

}}
/>

> When inserting components with `resolveData`, the Puck state will update twice - once for the initial insert, and once more when the method resolves, if it changes the data. This will be reflected in the undo/redo history.

### Setting fields as read-only

[`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) also allows us to mark fields as read-only using the [`readOnly` parameter](/docs/api-reference/configuration/component-config#datareadonly-1).

```tsx {17} showLineNumbers copy
const config = {
  components: {
    HeadingBlock: {
      // ...
      resolveData: async ({ props }) => {
        return {
          props: {
            resolvedTitle: props.title,
          },
          readOnly: { resolvedTitle: true },
        };
      },
      // ...
    },
  },
};
```

<ConfigPreview
  label='The resolvedTitle field is locked'
  componentConfig={{
    fields: {
      title: {
        type: "text",
      },
      resolvedTitle: {
        type: "text",
      },
    },
    defaultProps: {
      title: "Hello, world",
    },
    resolveData: ({ props }) => {
      return {
        props: { resolvedTitle: props.title },
        readOnly: { resolvedTitle: true }
      };
    },
    render: ({ resolvedTitle }) => {
      return <p style={{ margin: 0 }}>{resolvedTitle}</p>;
    },

}}
/>

### Preventing duplicate calls

It's possible that `resolveData` may carry out an expensive operation (like an API call) that we want to avoid making unless a specific prop has changed.

This can be restricted by checking the [`changed` param](/docs/api-reference/configuration/component-config#paramschanged) before calling any expensive operations.

```tsx {6} showLineNumbers copy
const config = {
  components: {
    HeadingBlock: {
      // ...
      resolveData: async ({ props }, { changed }) => {
        if (!changed.text) return { props };

        return {
          props: {
            resolvedTitle: await expensiveOperation(props.title),
          },
        };
      },
      // ...
    },
  },
};
```

## Dynamic Root props

The `resolveData` method is also available on the [root component](/docs/api-reference/configuration/config#root).

```tsx showLineNumbers copy {12-18}
const config = {
  components: {},
  root: {
    fields: {
      title: {
        type: "text",
      },
      resolvedTitle: {
        type: "text",
      },
    },
    resolveData: async ({ props }) => {
      return {
        props: {
          resolvedTitle: props.title,
        },
      };
    },
    render: ({ children, resolvedTitle }) => {
      return (
        <>
          <h1>{resolvedTitle}</h1>
          {children}
        </>
      );
    },
  },
};
```

## Triggering `resolveData`

Resolve data is triggered whenever the props for a component change, or when the [`resolveAllData` utility](/docs/api-reference/functions/resolve-all-data) is used.

```tsx
import { resolveAllData } from "@measured/puck";

const updatedData = await resolveAllData(data, config);
```

## Further reading

- [`resolveData` API reference](/docs/api-reference/configuration/component-config#resolvedatadata-params)
- [`resolveAllData` API reference](/docs/api-reference/functions/resolve-all-data)



================================================
FILE: apps/docs/pages/docs/integrating-puck/external-data-sources.mdx
================================================
import { ConfigPreview } from "@/docs/components/Preview";

# External Data Sources

There are several different approaches for loading external data into a Puck component.

It's possible for Puck components to load their own data internally on the client, or on the server using [React server components](/docs/integrating-puck/server-components). This doesn't require any Puck configuration.

If you want to provide the user a way to select the data, you can use the [`external` field type](/docs/api-reference/fields/external).

## Selecting external data

The [`external` field type](/docs/api-reference/fields/external) allows users to select tabular data from a third-party data source, like a headless CMS. This will load the data once and save it into the [data payload](/docs/api-reference/data-model/data).

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        getItemSummary: (item) => item.title,
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
      },
    },
    render: ({ data }) => {
      if (!data) {
        return "No data selected";
      }

      return (
        <>
          <b>{data.title}</b>
          <p>{data.description}</p>
        </>
      );
    },

}}
/>

```tsx {5-17} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            // Query an API for a list of items
            const items = await fetch(`/api/items`).then((res) => res.json());
            // [
            //   { title: "Hello, world", description: "Lorem ipsum 1" },
            //   { title: "Goodbye, world", description: "Lorem ipsum 2" },
            // ];

            return items;
          },
        },
      },
      render: ({ data }) => {
        if (!data) {
          return "No data selected";
        }

        return (
          <>
            <b>{data.title}</b>
            <p>{data.description}</p>
          </>
        );
      },
    },
  },
};
```

You can also use the [`showSearch` parameter](/docs/api-reference/fields/external#showsearch) to show a search input to the user.

## Data syncing

To keep the data in sync with the external source, we can combine the `external` field with the [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params) function.

This technique re-fetches the content every time the page is loaded, or the [`resolveAllData` utility](/docs/api-reference/functions/resolve-all-data) is called.

```tsx showLineNumbers {19-37} /id: 0/1 /id: 1/ copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          type: "external",
          fetchList: async () => {
            // Query an API for a list of items
            const items = await fetch(`/api/items`).then((res) => res.json());
            // [
            //   { title: "Hello, world", id: 0 },
            //   { title: "Goodbye, world", id: 1 },
            // ];

            return items;
          },
        },
      },
      resolveData: async ({ props }, { changed }) => {
        if (!props.data) return { props };

        // Don't query unless `data` has changed since resolveData was last run
        if (!changed.data) return { props };

        // Re-query the API for a particular item
        const latestData = await fetch(`/api/items/${props.data.id}`).then(
          (res) => res.json()
        );
        // { title: "Hello, world", description: "Lorem ipsum 1", id: 0 }

        return {
          props: {
            // Update the value for `data`
            data: latestData,
          },
        };
      },
      // ...
    },
  },
};
```

## Hybrid authoring

Hybrid authoring enables users to edit fields inline, or populate those fields with data from an external source.

<ConfigPreview
  label="Example"
  componentConfig={{
    fields: {
      data: {
        type: "external",
        getItemSummary: (item) => item.title,
        fetchList: async () => {
          return [
            { title: "Hello, world", description: "Lorem ipsum 1" },
            { title: "Goodbye, world", description: "Lorem ipsum 2" },
          ];
        },
      },
      title: {
        type: "text",
      },
    },
    resolveData: async ({ props }) => {
      if (!props.data) return { props,  readOnly: { title: false } };

      return {
        props: { title: props.data.title },
        readOnly: { title: true }
      };
    },
    render: ({ title }) => {
      return (
        <>
          <b>{title}</b>
        </>
      );
    },

}}
/>

This can be achieved by mapping the data from `data.title` to `title` in [`resolveData`](/docs/api-reference/configuration/component-config#resolvedatadata-params), and marking the field as read-only.

```tsx showLineNumbers {21,22} copy
const config = {
  components: {
    Example: {
      fields: {
        data: {
          // ...
        },
        title: {
          type: "text",
        },
      },
      resolveData: async ({ props }, { changed }) => {
        // Remove read-only from the title field if `data` is empty
        if (!props.data) return { props, readOnly: { title: false } };

        // Don't query unless `data` has changed since resolveData was last run
        if (!changed.data) return { props };

        return {
          props: {
            title: props.data.title,
            readOnly: { title: true },
          },
        };
      },
      render: ({ title }) => <b>{title}</b>,
    },
  },
};
```

## External data packages

We provide helper packages to load data from common data sources.

- [`contentful`](https://github.com/measuredco/puck/tree/main/packages/field-contentful): Select content entries from a [Contentful](https://www.contentful.com) space.

## Further reading

- [`external` field API reference](/docs/api-reference/fields/external)
- [`resolveData` API reference](/docs/api-reference/configuration/component-config#resolvedatadata-params)
- [`resolveAllData` API reference](/docs/api-reference/functions/resolve-all-data)

<div id="puck-portal-root" />



================================================
FILE: apps/docs/pages/docs/integrating-puck/feature-toggling.mdx
================================================
# Feature Toggling

Feature toggling is enabled by Puck's [Permissions API](/docs/api-reference/permissions). This enables you to toggle behavior like:

- Deletion
- Dragging
- Duplication
- Editing (setting all fields to read-only)
- etc

See the [supported permissions reference](/docs/api-reference/permissions#supported-permissions) for a complete list.

## Toggling features globally

Toggling features across the entire Puck instance can be done with global permissions. These can be set by the [`permissions` prop](/docs/api-reference/components/puck#permissions) on the Puck component:

```tsx showLineNumbers copy {4-6}
export function Editor() {
  return (
    <Puck
      permissions={{
        delete: false, // Disable delete function on all components
      }}
      // ...
    />
  );
}
```

## Toggling features per component

Toggling feature for all instance of a component can be done using component permissions. This is controlled by the [`permissions` parameter](/docs/api-reference/configuration/component-config#permissions) on the component config, and inherits the global permissions.

```tsx showLineNumbers copy {4-6}
const config = {
  components: {
    HeadingBlock: {
      permissions: {
        delete: false, // Disable delete function on all HeadingBlock instances
      },
      // ...
    },
  },
};
```

Component permissions can also be applied to the `root` config.

## Toggling features dynamically

Dynamic permissions enable runtime calculation of permissions based on the component data, enabling instance-specific permissions. This is controlled by the [`resolvePermissions` parameter](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params) on the component config.

```tsx showLineNumbers copy {4-12}
const config = {
  components: {
    HeadingBlock: {
      resolvePermissions: (data, { permissions }) => {
        if (data.props.locked) {
          return {
            delete: false, // Disable delete function when HeadingBlock `locked` prop is set
          };
        }

        return permissions; // Return inherited permissions (component or global)
      },
      // ...
    },
  },
};
```

### Asynchronous feature toggling

Permissions can be resolved asynchronously, enabling powerful patterns like querying permissions from an endpoint whenever the data changes.

```tsx showLineNumbers copy {4-8}
const config = {
  components: {
    HeadingBlock: {
      resolvePermissions: async (data) => {
        const serverPermissions = await myPermissionsApi(data.props.id); // Query permissions from a server

        return serverPermissions;
      },
      // ...
    },
  },
};
```

### Preventing duplicate calls

Permission resolvers are cached based on the component props. If none of the props change, then the resolver won't be called. This prevents duplicate calls to expensive asynchronous operations.

However, it's possible that you may want to avoid making an expensive operation unless a _specific_ prop has changed, rather than any prop.

This can be restricted by checking the [`changed` param](/docs/api-reference/configuration/component-config#paramschanged-2) before calling any expensive operations.

```tsx {6} showLineNumbers copy
const config = {
  components: {
    HeadingBlock: {
      // ...
      resolvePermissions: async (data, { changed, lastPermissions }) => {
        if (!changed.locked) return lastPermissions; // Return last permissions if `locked` hasn't changed

        return await myExpensivePermissionsApi(data),
      },
      // ...
    },
  },
};
```

## Further reading

- [Permissions API reference](/docs/api-reference/permissions)
- [Supported permissions reference](/docs/api-reference/permissions#supported-permissions)
- [Global `permissions` prop API reference](/docs/api-reference/components/puck#permissions)
- [Component `permissions` param API reference](/docs/api-reference/configuration/component-config#permissions)
- [Component `resolvePermissions` param API reference](/docs/api-reference/configuration/component-config#resolvepermissionsdata-params)



================================================
FILE: apps/docs/pages/docs/integrating-puck/multi-column-layouts.mdx
================================================
---
title: Multi-column Layouts
---

import { PuckPreview } from "@/docs/components/Preview";
import { Puck } from "@/puck";
import { Callout } from "nextra/components";

# Multi-column Layouts

Puck supports nested and multi-column layouts across any CSS layout using the [`slot` field](/docs/api-reference/fields/slot).

<Callout type="info">Slots replace the [`<DropZone>` component](/docs/api-reference/components/drop-zone) component, which will soon be deprecated and removed. For migration notes, see [these docs](/docs/guides/migrations/dropzones-to-slots).</Callout>

## Nested components

Add the [`slot`](/docs/api-reference/fields/slot) field to your component to create a zone that you can drop components into.

```tsx {5-7,10} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => {
        return <Content />;
      },
    },
    Card: {
      render: () => <div>Hello, world</div>,
    },
  },
};
```

<PuckPreview
  label="Nested components example"
  config={{
    components: {
      Example: {
        fields: {
          content: {
            type: "slot",
          },
        },
        render: ({ content: Content }) => {
          return (
            <div style={{ padding: 32 }}>
              <Content />
            </div>
          );
        },
      },
      Card: {
        render: () => {
          return (
            <div
              style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }}
            >
              Hello, world
            </div>
          );
        },
      },
    },
  }}
  data={{
    content: [
      {
        type: "Example",
        props: {
          id: "Example-1",
          content: [{ type: "Card", props: { id: "Example-2" } }],
        },
      },
    ],
    root: { props: {} },
  }}
>
  <Puck.Preview />
</PuckPreview>

## Fixed layouts

Combine multiple DropZones to achieve fixed layouts. By default, components inside a DropZone are arranged along the vertical (`block`) axis.

```tsx {5-10,17,18} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        leftColumn: {
          type: "slot",
        },
        rightColumn: {
          type: "slot",
        },
      },
      render: ({ leftColumn: LeftColumn, rightColumn: RightColumn }) => {
        return (
          <div
            style={{ display: "grid", gridTemplateColumns: "1fr 1fr", gap: 16 }}
          >
            <LeftColumn />
            <RightColumn />
          </div>
        );
      },
    },
    Card: {
      render: ({ text }) => <div>{text}</div>,
    },
  },
};
```

<PuckPreview
  label="Fixed layout example"
  config={{
    root: {
      render: ({ puck: { renderDropZone: DropZone } }) => (
        <DropZone zone="default-zone" disallow={["Card"]} />
      ),
    },
    components: {
      Example: {
        fields: {
          leftColumn: {
            type: "slot",
          },
          rightColumn: {
            type: "slot",
          },
        },
        render: ({ leftColumn: LeftColumn, rightColumn: RightColumn }) => {
          return (
            <div
              style={{
                display: "grid",
                gridTemplateColumns: "1fr 1fr",
                gap: 16,
              }}
            >
              <LeftColumn />
              <RightColumn />
            </div>
          );
        },
      },
      Card: {
        render: ({ content }) => {
          return (
            <div
              style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }}
            >
              {content}
            </div>
          );
        },
      },
    },
  }}
  data={{
    content: [
      {
        type: "Example",
        props: {
          id: "Example-1",
          leftColumn: [
            {
              type: "Card",
              props: { id: "Example-2", content: "1" },
            },
          ],
          rightColumn: [
            {
              type: "Card",
              props: { id: "Example-3", content: "2" },
            },
          ],
        },
      },
    ],
    root: { props: {} },
  }}
>
  <Puck.Preview />
</PuckPreview>

## Fluid layouts

Apply the [CSS display](https://developer.mozilla.org/en-US/docs/Web/CSS/display) property to a slot via the [`style`](/docs/api-reference/components/drop-zone#style) or [`className`](/docs/api-reference/components/drop-zone#className) props to arrange your components in different layouts. Puck supports drag-and-drop for all `display` values, including `grid` and `flex`.

```tsx {12-15} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => (
        <Content
          style={{
            // Use CSS grid in this slot
            display: "grid",
            gridTemplateColumns: "2fr 1fr",
            gap: 16,
          }}
        />
      ),
    },
    Card: {
      render: ({ text }) => <div>{text}</div>,
    },
  },
};
```

<PuckPreview
  label="Fluid layout using CSS grid"
  config={{
    root: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => (
        <Content
          style={{
            display: "grid",
            gridTemplateColumns: "2fr 1fr",
            gap: 16,
          }}
        />
      ),
    },
    components: {
      Card: {
        render: ({ content }) => {
          return (
            <div
              style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }}
            >
              {content}
            </div>
          );
        },
      },
    },
  }}
  data={{
    content: [],
    root: {
      props: {
        content: [
          {
            type: "Card",
            props: { id: "Example-2", content: "1" },
          },
          {
            type: "Card",
            props: { id: "Example-3", content: "2" },
          },
        ],
      },
    },
  }}
>
  <Puck.Preview />
</PuckPreview>

## Removing the wrapper

By default, Puck will wrap your components in a `div` element. For some layouts, you may need to eliminate the wrapping element and treat the child component as a direct descendant of its' parent slot.

For example, this is required if you wish to use CSS rules like `flex-grow`, `grid-column`, or `grid-row`.

Use the [`inline`](/docs/api-reference/configuration/component-config#inline) component parameter to remove the wrapping element. **When using this API, you must also specify which element is draggable by passing the [`puck.dragRef` prop](/docs/api-reference/configuration/component-config#puckdragref) to your element's `ref` prop.**

```tsx {13-14,21,24-28} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      render: ({ content: Content }) => (
        <Content
          style={{
            display: "grid",
            gridTemplateColumns: "1fr 1fr 1fr 1fr",
            gridTemplateRows: "1fr 1fr 1fr 1fr",
            gap: 16,
          }}
        />
      ),
    },
    Card: {
      inline: true, // Enable inline mode, removing the Puck wrapper
      render: ({ text, spanCol, spanRow, puck }) => (
        <div
          ref={puck.dragRef} // Let Puck know this element is draggable
          style={{
            gridColumn: `span ${spanCol}`,
            gridRow: `span ${spanRow}`,
          }}
        >
          {text}
        </div>
      ),
    },
  },
};
```

<PuckPreview
  label="Advanced grid example"
  config={{
    root: {
      fields: {
        Content: {
          type: "slot",
        },
      },
      render: ({ Content }) => (
        <Content
          zone="default-zone"
          style={{
            display: "grid",
            gridTemplateColumns: "1fr 1fr 1fr 1fr",
            gridTemplateRows: "1fr 1fr 1fr",
            gap: 16,
          }}
        />
      ),
    },
    components: {
      Card: {
        inline: true,
        render: ({ content, spanCol, spanRow, puck }) => {
          return (
            <div
              style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
                gridColumn: `span ${spanCol}`,
                gridRow: `span ${spanRow}`,
              }}
              // Let Puck know this element is draggable
              ref={puck.dragRef}
            >
              {content}
            </div>
          );
        },
      },
    },

}}
data={{
    content: [],
    root: {
      props: {
        Content: [
          {
            type: "Card",
            props: { id: "Example-1", content: "1", spanCol: 2, spanRow: 2 },
          },
          {
            type: "Card",
            props: { id: "Example-2", content: "2", spanCol: 1, spanRow: 1 },
          },
          {
            type: "Card",
            props: { id: "Example-3", content: "3", spanCol: 1, spanRow: 1 },
          },
          {
            type: "Card",
            props: { id: "Example-4", content: "4", spanCol: 2, spanRow: 1 },
          },
          {
            type: "Card",
            props: { id: "Example-5", content: "5", spanCol: 1, spanRow: 1 },
          },
        ],
      },
    },
  }}
/>

## Restricting components

Use the [`allow`](/docs/api-reference/fields/slot#allow) and [`disallow`](/docs/api-reference/fields/slot#disallow) parameters to restrict which components can be dragged into a slot.

```tsx {6} showLineNumbers copy
const config = {
  components: {
    fields: {
      content: {
        type: "slot",
        allow: ["Card"],
      },
    },
    Example: {
      render: ({ content: Content }) => {
        return <Content />;
      },
    },
  },
};
```

Combine this with [categories](/docs/integrating-puck/categories) to restrict behavior based on your existing groups.

```tsx {2-6,12} showLineNumbers copy
const config = {
  categories: {
    typography: {
      components: ["Card"],
    },
  },
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
          allow: categories.typography.components,
        },
      },
      render: ({ content: Content }) => {
        return <Content />;
      },
    },
  },
};
```

Alternatively, you can provide `allow` and `disallow` [to your render function](/docs/api-reference/fields/slot#allow-1).

## Setting default props

Use slots with [`defaultProps`](/docs/api-reference/configuration/component-config#defaultprops) to pre-populate it when the component is inserted with an array of [`ComponentData`](/docs/api-reference/data-model/component-data).

```tsx {9-18} showLineNumbers copy
const config = {
  components: {
    Example: {
      fields: {
        content: {
          type: "slot",
        },
      },
      defaultProps: {
        content: [
          {
            type: "Card",
            props: {
              text: "Pre-populated",
            },
          },
        ],
      },
      render: ({ content: Content }) => <Content />,
    },
    Card: {
      render: ({ text }) => <div>{text}</div>,
    },
  },
};
```

<PuckPreview
  label="Fluid layout using CSS grid"
  config={{
    root: {
      fields: {
        content: {
          type: "slot",
        },
      },
      defaultProps: {
        content: [
          {
            type: "Card",
            props: {
              text: "Pre-populated",
            },
          },
        ],
      },
      render: ({ content }) =>
        content({
          style: {
            display: "grid",
            gridTemplateColumns: "2fr 1fr",
            gap: 16,
          },
        }),
    },
    components: {
      Card: {
        render: ({ content }) => {
          return (
            <div
              style={{
                background: "white",
                border: "1px solid black",
                borderRadius: 4,
                padding: 16,
              }}
            >
              {content}
            </div>
          );
        },
      },
    },
  }}
  data={{
    content: [],
    root: {
      props: {
        content: [
          {
            type: "Card",
            props: { id: "Example-2", content: "Pre-populated" },
          },
        ],
      },
    },
  }}
>
  <Puck.Preview />
</PuckPreview>

## Further reading

- [The `slot` field API](/docs/api-reference/fields/slot)
- [The `inline` component config](/docs/api-reference/configuration/component-config#inline)



================================================
FILE: apps/docs/pages/docs/integrating-puck/root-configuration.mdx
================================================
# Root Configuration

The root is the top-level component within Puck. It:

1. Renders a single wrapper around your other components. This can be overwritten with a `render` function.
2. Stores meta data, like the page title. This can be extended with `fields`.

Configuring the root is similar to [configuring components](component-configuration).

## The root `render` function

Use the [`root` parameter](/docs/api-reference/configuration/config#root) to specify a [`render` function](/docs/api-reference/configuration/component-config#renderprops):

```tsx showLineNumbers copy {10-12}
const config = {
  components: {
    HeadingBlock: {
      render: () => {
        return <h1>Hello, world</h1>;
      },
    },
  },
  root: {
    render: ({ children }) => {
      return <div>{children}</div>;
    },
  },
};
```

The root `render` function will wrap all of the components. `children` is a node containing the nested components.

If you don't render `children`, your components will not be rendered unless you define another [slot](/docs/api-reference/fields/slot).

### Example output

Given a minimal data payload containing one **HeadingBlock**

```json copy
{
  "content": [
    {
      "type": "HeadingBlock",
      "props": {
        "id": "HeadingBlock-1234"
      }
    }
  ],
  "root": {}
}
```

the example config will render HTML nodes like this:

```html
<!-- root render -->
<div>
  <!-- HeadingBlock render -->
  <h1>Hello, world</h1>

  <!-- Remaining nodes -->
</div>
```

## Adding fields

Root fields provide user input to the root render method, and can be used to store metadata.

By default, `root` is configured with a `title` text field:

```tsx showLineNumbers copy /title/
const config = {
  // ...
  root: {
    render: ({ children, title }) => {
      return (
        <div>
          <h1>{title}</h1>
          {children}
        </div>
      );
    },
  },
};
```

You can override the default field configuration by providing custom [Fields](/docs/api-reference/fields) to the [`fields` parameter](/docs/api-reference/configuration/component-config#fields):

```tsx showLineNumbers copy {4-7} /description/2,3
const config = {
  // ...
  root: {
    fields: {
      title: { type: "text" }, // You need to redefine the `title` field if we want to retain it
      description: { type: "textarea" },
    },
    render: ({ children, title, description }) => {
      return (
        <div>
          <h1>{title}</h1>
          <p>{description}</p>
          {children}
        </div>
      );
    },
  },
};
```

When the user modifies the inputs, the editor will produce a data payload like this:

```json copy {6-9}
{
  "content": [
    // ...
  ],
  "root": {
    "props": {
      "title": "Hello, world",
      "description": "Lorem ipsum"
    }
  }
}
```

### TypeScript

Generic types can be passed to the `Config` type to strictly type your root configuration:

```tsx copy {1,3-5} /RootProps/2
import type { Config } from "@measured/puck";

type RootProps = {
  description: string;
};

const config: Config<{}, RootProps> = {
  // ...
};
```

## Setting default props

Provide an object to the [`defaultProps`](/docs/api-reference/configuration/component-config#fields) parameter to configure default props for the root fields:

```tsx showLineNumbers copy {8-11}
const config = {
  // ...
  root: {
    fields: {
      title: { type: "text" },
      description: { type: "textarea" },
    },
    defaultProps: {
      title: "Hello, world",
      description: "Lorem ipsum",
    },
    render: ({ children, title, description }) => {
      return (
        <div>
          <h1>{title}</h1>
          <p>{description}</p>
          {children}
        </div>
      );
    },
  },
};
```

Unlike [default parameters](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters), `defaultProps` are stored in the data payload and will populate the Puck fields.



================================================
FILE: apps/docs/pages/docs/integrating-puck/server-components.mdx
================================================
import { Callout } from "nextra/components";

# React Server Components

Puck provides support for [React Server Components](https://react.dev/reference/react/use-server#use-server) (RSC), but the interactive-nature of Puck requires special consideration.

## Environments

### Server

Puck supports the server environment for the following APIs:

- The [`<Render>`](/docs/api-reference/components/render) component, for rendering pages produced by Puck
- The [`resolveAllData`](/docs/api-reference/functions/resolve-all-data) lib, for running all [data resolvers](/docs/integrating-puck/dynamic-props)

These APIs can be used in an RSC environment, but in order to do so the Puck config that they reference must be RSC-friendly.

This can be done by either avoiding client-only code (React `useState`, etc), or split out client components with the `"use client";` directive.

### Client

All other Puck APIs, including the core `<Puck>` component, cannot run in an RSC environment due to their high-degree of interactivity.

As these APIs render on the client, the Puck config provided must be safe for client-use, avoiding any server-specific logic.

## Implementations

Since the Puck config can be referenced on the client or the server, we need to consider how to satisfy both environments.

There are three approaches to this:

1. Avoid using any client-specific functionality (like React `useState`) in your components
2. Mark your components up with the `"use client";` directive if you need client-specific functionality
3. Create separate configs for client and server rendering

### 1. Avoid client-specific code

Avoiding client-specific code is the easiest way to support RSC across both environments, but may not be realistic for all users. This normally means avoiding React hooks like `useState` or `useContext`.

<Callout type="info">If you're using the legacy [`<DropZone>` component](/docs/api-reference/components/drop-zone), you will may encounter issues with server components. We recommend migrating to the [`slot` field](/docs/api-reference/fields/slot) which provides native server component support. Alternatively, see [our previous server components guide](https://puckeditor.com/v/0.18.3/docs/integrating-puck/server-components) for information on handling DropZones.</Callout>

### 2. Marking up components with `"use client";`

Many modern component libraries will require some degree of client-side behaviour. For these cases, you'll need to mark them up with the `"use client";` directive.

To achieve this, you must import each of those component from a separate file:

```tsx copy showLineNumbers filename="puck.config.tsx"
import type { Config } from "@measured/puck";
import type { HeadingBlockProps } from "./components/HeadingBlock";
import HeadingBlock from "./components/HeadingBlock";

type Props = {
  HeadingBlock: HeadingBlockProps;
};

export const config: Config<Props> = {
  components: {
    HeadingBlock: {
      fields: {
        title: { type: "text" },
      },
      defaultProps: {
        title: "Heading",
      },
      // You must call the component, rather than passing it in directly. This will change in the future.
      render: ({ title }) => <HeadingBlock title={title} />,
    },
  },
};
```

And add the `"use client";` directive to the top of each component file:

```tsx copy showLineNumbers filename="components/HeadingBlock.tsx" {1}
"use client";

import { useState } from "react";

export type HeadingBlockProps = {
  title: string;
};

export default ({ title }: { title: string }) => {
  useState(); // useState fails on the server

  return (
    <div style={{ padding: 64 }}>
      <h1>{title}</h1>
    </div>
  );
};
```

This config can now be rendered inside an RSC component, such as a Next.js app router page:

```tsx copy showLineNumbers filename="app/page.tsx"
import { config } from "../puck.config.tsx";

export default async function Page() {
  const data = await getData(); // Some server function

  const resolvedData = await resolveAllData(data, config); // Optional call to resolveAllData, if this needs to run server-side

  return <Render data={resolvedData} config={config} />;
}
```

### 3. Creating separate configs

Alternatively, consider entirely separate configs for the `<Puck>` and `<Render>` components. This approach can enable you to have different rendering behavior for a component for when it renders on the client or the server.

Create a shared config type:

```tsx copy showLineNumbers filename="puck-types.ts"
import type { Config } from "@measured/puck";

type Props = {
  HeadingBlock: {
    title: string;
  };
};

export type UserConfig = Config<Props>;
```

Define a client component config for use within the `<Puck>` component:

```tsx copy showLineNumbers filename="puck.config.client.tsx"
import type { UserConfig } from "./puck-types.ts";

export const config: UserConfig = {
  components: {
    HeadingBlock: {
      fields: {
        title: { type: "text" },
      },
      defaultProps: {
        title: "Heading",
      },
      render: ({ title }) => {
        useState(); // useState fails on the server

        return (
          <div style={{ padding: 64 }}>
            <h1>{title}</h1>
          </div>
        );
      },
    },
  },
};
```

Define a server config using the shared types for use within the `<Render>` component, excluding fields as they are unnecessary in this environment:

```tsx copy showLineNumbers filename="puck.config.server.tsx"
import type { UserConfig } from "./puck-types.ts";

export const config: UserConfig = {
  components: {
    HeadingBlock: {
      render: ({ title }) => {
        return (
          <div style={{ padding: 64 }}>
            <h1>{title}</h1>
          </div>
        );
      },
    },
  },
};
```

Render the appropriate config depending on the environment. Here's a Next.js app router example of a server render:

```tsx copy showLineNumbers filename="app/page.tsx"
import { config } from "../puck.config.server.tsx";

export default async function Page() {
  const data = await getData(); // Some server function

  return <Render data={data} config={config} />;
}
```



================================================
FILE: apps/docs/pages/docs/integrating-puck/viewports.mdx
================================================
# Viewports

The Puck preview renders in a same-origin iframe that can be resized to simulate different viewports.

## Default viewports

Puck provides 3 viewports [by default](/docs/api-reference/components/puck#default-viewports):

1. Small: 360px wide
2. Medium: 768px wide
3. Large: 1280px wide

Each of the default viewports have 100% height, filling the available space (via the `auto` height parameter).

## Customizing viewports

Customizing the available viewports using the [`viewports` API](/docs/api-reference/components/puck#viewports):

```tsx
export function Editor() {
  return (
    <Puck
      viewports={[
        {
          width: 1440,
          height: "auto", // Optional height. Can be numeric or "auto". Defaults to "auto".
          label: "My Viewport", // Optional. Shown in tooltip.
          icon: <svg />, // Optional. Use lucide-icons to align with Puck UI.
        },
      ]}
      // ...
    />
  );
}
```

## Opting out of iframes

Opt-out of iframe rendering by using the [`iframe` API](/docs/api-reference/components/puck#iframe):

```tsx
export function Editor() {
  return (
    <Puck
      iframe={{
        enabled: false,
      }}
      // ...
    />
  );
}
```

This will disable all viewport functionality.

## Controlling viewports with compositional interfaces

When implementing a [compositional interface](/docs/extending-puck/composition), the `viewports` API will have no effect. Instead, the viewport size can be controlled by the dimensions of the wrapping element that contains [`<Puck.Preview />`](/docs/api-reference/components/puck-preview).

CSS transforms can be used to zoom the viewport without impacting drag-and-drop behaviour.

```tsx {6-8}
import { Puck } from "@measured/puck";

export function Editor() {
  return (
    <Puck>
      <div style={{ transform: "scale(0.5)", width: 1280 }}>
        <Puck.Preview />
      </div>
    </Puck>
  );
}
```




================================================
FILE: apps/docs/public/manifest.webmanifest
================================================
{
  "name": "Puck",
  "short_name": "Puck",
  "start_url": "/",
  "icons": [
    {
      "src": "/maskable_icon_x192.png",
      "sizes": "192x192",
      "type": "image/png"
    },
    {
      "src": "/maskable_icon.png",
      "sizes": "512x512",
      "type": "image/png"
    }
  ],
  "theme_color": "#111",
  "background_color": "#ffffff",
  "display": "standalone"
}



================================================
FILE: apps/docs/public/robots.txt
================================================
User-Agent: *
Disallow: /v/*



================================================
FILE: apps/docs/tsconfig/base.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}



================================================
FILE: apps/docs/tsconfig/nextjs.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "allowJs": true,
    "declaration": false,
    "declarationMap": false,
    "incremental": true,
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "noEmit": true,
    "resolveJsonModule": true,
    "strict": false,
    "target": "es6"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: packages/core/globals.d.ts
================================================
declare module "*.module.css";



================================================
FILE: packages/core/index.ts
================================================
import "./styles.css";

export type { PuckAction } from "./reducer/actions";

export * from "./types/API";
export * from "./types";
export * from "./types/Data";
export * from "./types/Props";
export * from "./types/Fields";

export * from "./components/ActionBar";
export { AutoField, FieldLabel } from "./components/AutoField";

export * from "./components/Button";
export { Drawer } from "./components/Drawer";

export { DropZone } from "./components/DropZone";
export * from "./components/IconButton";
export { Puck } from "./components/Puck";
export * from "./components/Render";

export * from "./lib/migrate";
export * from "./lib/transform-props";
export * from "./lib/resolve-all-data";
export { walkTree } from "./lib/data/walk-tree";
export {
  createUsePuck,
  usePuck,
  useGetPuck,
  type UsePuckData,
  type PuckApi,
} from "./lib/use-puck";



================================================
FILE: packages/core/jest.config.ts
================================================
import type { Config } from "jest";

const config: Config = {
  preset: "ts-jest/presets/js-with-ts-esm", // TS + ESM
  testEnvironment: "jsdom",

  // Treat these files as ESM so `import`/`export` keep working
  extensionsToTreatAsEsm: [".ts", ".tsx"],

  transform: {
    // Let ts-jest compile TS/JS for Jest
    "^.+\\.[tj]sx?$": ["ts-jest", { useESM: true }],
  },

  // Re-enable transform *inside* selected node_modules
  transformIgnorePatterns: [
    "/node_modules/(?!(?:@preact/signals-core|@preact/signals-react|@dnd-kit)/)",
  ],

  moduleNameMapper: {
    // stub out style & asset imports
    "\\.(css|less|sass|scss)$": "identity-obj-proxy",
  },
};

export default config;



================================================
FILE: packages/core/package.json
================================================
{
  "name": "@measured/puck",
  "version": "0.19.1",
  "author": "Chris Villa <chris@puckeditor.com>",
  "repository": "measuredco/puck",
  "bugs": "https://github.com/measuredco/puck/issues",
  "homepage": "https://puckeditor.com",
  "private": false,
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "react-server": {
        "types": "./dist/rsc.d.ts",
        "import": "./dist/rsc.mjs",
        "require": "./dist/rsc.js"
      },
      "default": {
        "types": "./dist/index.d.ts",
        "import": "./dist/index.mjs",
        "require": "./dist/index.js"
      }
    },
    "./rsc": {
      "types": "./dist/rsc.d.ts",
      "import": "./dist/rsc.mjs",
      "require": "./dist/rsc.js"
    },
    "./puck.css": "./dist/index.css",
    "./dist/index.css": "./dist/index.css",
    "./package.json": "./package.json"
  },
  "typesVersions": {
    "*": {
      "rsc": [
        "./dist/rsc.js"
      ]
    }
  },
  "license": "MIT",
  "scripts": {
    "lint": "eslint \"**/*.ts*\"",
    "build": "rm -rf dist && tsup index.ts rsc.tsx",
    "test": "jest",
    "prepare": "cp ../../README.md . && yarn build",
    "postpublish": "rm README.md"
  },
  "files": [
    "dist"
  ],
  "devDependencies": {
    "@juggle/resize-observer": "^3.4.0",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.1.0",
    "@types/deep-diff": "^1.0.3",
    "@types/flat": "^5.0.5",
    "@types/jest": "^29.5.14",
    "@types/object-hash": "^3.0.6",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "@types/uuid": "^10.0.0",
    "css-box-model": "^1.2.1",
    "eslint": "^7.32.0",
    "eslint-config-custom": "*",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^30.0.0-beta.3",
    "lucide-react": "^0.468.0",
    "ts-jest": "^29.3.4",
    "tsconfig": "*",
    "tsup": "^8.2.4",
    "tsup-config": "*",
    "typescript": "^5.5.4"
  },
  "dependencies": {
    "@dnd-kit/helpers": "0.1.18",
    "@dnd-kit/react": "0.1.18",
    "deep-diff": "^1.0.2",
    "fast-deep-equal": "^3.1.3",
    "flat": "^5.0.2",
    "object-hash": "^3.0.0",
    "react-hotkeys-hook": "^4.6.1",
    "use-debounce": "^9.0.4",
    "uuid": "^9.0.1",
    "zustand": "^5.0.3"
  },
  "peerDependencies": {
    "react": "^18.0.0 || ^19.0.0"
  }
}



================================================
FILE: packages/core/rsc.tsx
================================================
export { Render } from "./components/ServerRender";

export * from "./lib/resolve-all-data";
export * from "./lib/transform-props";
export * from "./lib/migrate";
export { walkTree } from "./lib/data/walk-tree";



================================================
FILE: packages/core/styles.css
================================================
@import url("https://rsms.me/inter/inter.css");
@import "./styles/color.css";
@import "./styles/typography.css";

#frame-root {
  height: 1px; /* Enables DropZone to inherit min-height */
  min-height: 100vh;
}

[data-puck-entry] {
  /* Reset stacking context */
  position: relative;
  z-index: 0;
}



================================================
FILE: packages/core/tsconfig.json
================================================
{
  "extends": "../tsconfig/react-library.json",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"],
  "compilerOptions": {
    "types": ["node", "jest", "@testing-library/jest-dom"]
  }
}



================================================
FILE: packages/core/tsup.config.ts
================================================
import { defineConfig } from "tsup";
import tsupconfig from "../tsup-config";

export default defineConfig(tsupconfig);



================================================
FILE: packages/core/.gitignore
================================================
README.md


================================================
FILE: packages/core/components/ActionBar/index.tsx
================================================
import { ReactNode, SyntheticEvent } from "react";
import getClassNameFactory from "../../lib/get-class-name-factory";
import styles from "./styles.module.css";
const getClassName = getClassNameFactory("ActionBar", styles);

export const ActionBar = ({
  label,
  children,
}: {
  label?: string;
  children?: ReactNode;
}) => (
  <div
    className={getClassName()}
    onClick={(e) => {
      e.stopPropagation();
    }}
  >
    {label && (
      <ActionBar.Group>
        <div className={getClassName("label")}>{label}</div>
      </ActionBar.Group>
    )}
    {children}
  </div>
);

export const Action = ({
  children,
  label,
  onClick,
}: {
  children: ReactNode;
  label?: string;
  onClick: (e: SyntheticEvent) => void;
}) => (
  <button
    type="button"
    className={getClassName("action")}
    onClick={onClick}
    title={label}
  >
    {children}
  </button>
);

export const Group = ({ children }: { children: ReactNode }) => (
  <div className={getClassName("group")}>{children}</div>
);

export const Label = ({ label }: { label: string }) => (
  <div className={getClassName("label")}>{label}</div>
);

ActionBar.Action = Action;
ActionBar.Label = Label;
ActionBar.Group = Group;



================================================
FILE: packages/core/components/ActionBar/styles.module.css
================================================
.ActionBar {
  align-items: center;
  cursor: default;
  display: flex;
  width: auto;
  padding: 4px;
  padding-inline-start: 0;
  padding-inline-end: 0;
  border-top-left-radius: 8px;
  border-top-right-radius: 8px;
  border-radius: 8px;
  background: var(--puck-color-grey-01);
  color: var(--puck-color-white);
  font-family: var(--puck-font-family);
  min-height: 26px;
}

.ActionBar-label {
  color: var(--puck-color-grey-08);
  font-size: var(--puck-font-size-xxxs);
  font-weight: 500;
  padding-inline-start: 8px;
  padding-inline-end: 8px;
  margin-inline-start: 4px;
  margin-inline-end: 4px;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.ActionBar-action + .ActionBar-label {
  padding-inline-start: 0;
}

.ActionBar-label + .ActionBar-action {
  margin-inline-start: -4px;
}

.ActionBar-group {
  align-items: center;
  border-inline-start: 0.5px solid var(--puck-color-grey-05); /* Fractional value required due to scaling */
  display: flex;
  height: 100%;
  padding-inline-start: 4px;
  padding-inline-end: 4px;
}

.ActionBar-group:first-of-type {
  border-inline-start: 0;
}

.ActionBar-group:empty {
  display: none;
}

.ActionBar-action {
  background: transparent;
  border: none;
  color: var(--puck-color-grey-08);
  cursor: pointer;
  padding: 6px 8px;
  margin-inline-start: 4px;
  margin-inline-end: 4px;
  border-radius: 4px;
  overflow: hidden;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: color 50ms ease-in;
}

.ActionBar-action svg {
  max-width: none !important; /* Explicit definition to prevent some SVG style pollution */
}

.ActionBar-action:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: -2px;
}

@media (hover: hover) and (pointer: fine) {
  .ActionBar-action:hover {
    color: var(--puck-color-azure-06);
    transition: none;
  }
}

.ActionBar-action:active {
  color: var(--puck-color-azure-07);
  transition: none;
}

.ActionBar-group * {
  margin: 0;
}



================================================
FILE: packages/core/components/AutoField/context.tsx
================================================
import { createContext, PropsWithChildren, useContext, useMemo } from "react";

type NestedFieldContext = {
  localName?: string;
  readOnlyFields?: Partial<Record<string | number | symbol, boolean>>;
};

export const NestedFieldContext = createContext<NestedFieldContext>({});

export const useNestedFieldContext = () => {
  const context = useContext(NestedFieldContext);

  return {
    ...context,
    readOnlyFields: context.readOnlyFields || {},
  };
};

export const NestedFieldProvider = ({
  children,
  name,
  subName,
  wildcardName = name,
  readOnlyFields,
}: PropsWithChildren<{
  name: string;
  subName: string;
  wildcardName?: string;
  readOnlyFields: Partial<Record<string | number | symbol, boolean>>;
}>) => {
  const subPath = `${name}.${subName}`;
  const wildcardSubPath = `${wildcardName}.${subName}`;

  const subReadOnlyFields = useMemo(
    () =>
      Object.keys(readOnlyFields).reduce((acc, readOnlyKey) => {
        const isLocal =
          readOnlyKey.indexOf(subPath) > -1 ||
          readOnlyKey.indexOf(wildcardSubPath) > -1;

        if (isLocal) {
          const subPathPattern = new RegExp(
            `^(${name}|${wildcardName})\.`
              .replace(/\[/g, "\\[")
              .replace(/\]/g, "\\]")
              .replace(/\./g, "\\.")
              .replace(/\*/g, "\\*")
          );

          const localName = readOnlyKey.replace(subPathPattern, "");

          return {
            ...acc,
            [localName]: readOnlyFields[readOnlyKey],
          };
        }

        return acc;
      }, {}),
    [name, subName, wildcardName, readOnlyFields]
  );

  return (
    <NestedFieldContext.Provider
      value={{ readOnlyFields: subReadOnlyFields, localName: subName }}
    >
      {children}
    </NestedFieldContext.Provider>
  );
};



================================================
FILE: packages/core/components/AutoField/index.tsx
================================================
import getClassNameFactory from "../../lib/get-class-name-factory";
import { Field, FieldProps } from "../../types";
import { UiState } from "../../types";

import styles from "./styles.module.css";
import {
  ReactElement,
  ReactNode,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useState,
} from "react";
import {
  RadioField,
  SelectField,
  ExternalField,
  ArrayField,
  DefaultField,
  TextareaField,
} from "./fields";
import { Lock } from "lucide-react";
import { ObjectField } from "./fields/ObjectField";
import { useAppStore } from "../../store";
import { useSafeId } from "../../lib/use-safe-id";
import { NestedFieldContext } from "./context";

const getClassName = getClassNameFactory("Input", styles);
const getClassNameWrapper = getClassNameFactory("InputWrapper", styles);

export const FieldLabel = ({
  children,
  icon,
  label,
  el = "label",
  readOnly,
  className,
}: {
  children?: ReactNode;
  icon?: ReactNode;
  label: string;
  el?: "label" | "div";
  readOnly?: boolean;
  className?: string;
}) => {
  const El = el;
  return (
    <El className={className}>
      <div className={getClassName("label")}>
        {icon ? <div className={getClassName("labelIcon")}>{icon}</div> : <></>}
        {label}

        {readOnly && (
          <div className={getClassName("disabledIcon")} title="Read-only">
            <Lock size="12" />
          </div>
        )}
      </div>
      {children}
    </El>
  );
};

type FieldLabelPropsInternal = {
  children?: ReactNode;
  icon?: ReactNode;
  label?: string;
  el?: "label" | "div";
  readOnly?: boolean;
};

export const FieldLabelInternal = ({
  children,
  icon,
  label,
  el = "label",
  readOnly,
}: FieldLabelPropsInternal) => {
  const overrides = useAppStore((s) => s.overrides);

  const Wrapper = useMemo(
    () => overrides.fieldLabel || FieldLabel,
    [overrides]
  );

  if (!label) {
    return <>{children}</>;
  }

  return (
    <Wrapper
      label={label}
      icon={icon}
      className={getClassName({ readOnly })}
      readOnly={readOnly}
      el={el}
    >
      {children}
    </Wrapper>
  );
};

type FieldPropsInternalOptional<ValueType = any, F = Field<any>> = FieldProps<
  F,
  ValueType
> & {
  Label?: React.FC<FieldLabelPropsInternal>;
  label?: string;
  labelIcon?: ReactNode;
  name?: string;
};

export type FieldPropsInternal<ValueType = any, F = Field<any>> = FieldProps<
  F,
  ValueType
> & {
  Label: React.FC<FieldLabelPropsInternal>;
  label?: string;
  labelIcon?: ReactNode;
  id: string;
  name?: string;
};

function AutoFieldInternal<
  ValueType = any,
  FieldType extends FieldNoLabel<ValueType> = FieldNoLabel<ValueType>
>(
  props: FieldPropsInternalOptional<ValueType, FieldType> & {
    Label?: React.FC<FieldLabelPropsInternal>;
  }
) {
  const dispatch = useAppStore((s) => s.dispatch);
  const overrides = useAppStore((s) => s.overrides);
  const readOnly = useAppStore((s) => s.selectedItem?.readOnly);
  const nestedFieldContext = useContext(NestedFieldContext);

  const { id, Label = FieldLabelInternal } = props;

  const field = props.field as Field<ValueType>;
  const label = field.label;
  const labelIcon = field.labelIcon;

  const defaultId = useSafeId();
  const resolvedId = id || defaultId;

  const defaultFields = {
    array: ArrayField,
    external: ExternalField,
    object: ObjectField,
    select: SelectField,
    textarea: TextareaField,
    radio: RadioField,
    text: DefaultField,
    number: DefaultField,
  };

  const render = {
    ...overrides.fieldTypes,
    array: overrides.fieldTypes?.array || defaultFields.array,
    external: overrides.fieldTypes?.external || defaultFields.external,
    object: overrides.fieldTypes?.object || defaultFields.object,
    select: overrides.fieldTypes?.select || defaultFields.select,
    textarea: overrides.fieldTypes?.textarea || defaultFields.textarea,
    radio: overrides.fieldTypes?.radio || defaultFields.radio,
    text: overrides.fieldTypes?.text || defaultFields.text,
    number: overrides.fieldTypes?.number || defaultFields.number,
  };

  const mergedProps = {
    ...props,
    field,
    label,
    labelIcon,
    Label,
    id: resolvedId,
  };

  const onFocus = useCallback(
    (e: React.FocusEvent) => {
      if (
        mergedProps.name &&
        (e.target.nodeName === "INPUT" || e.target.nodeName === "TEXTAREA")
      ) {
        e.stopPropagation();

        dispatch({
          type: "setUi",
          ui: {
            field: { focus: mergedProps.name },
          },
        });
      }
    },
    [mergedProps.name]
  );

  const onBlur = useCallback((e: React.FocusEvent) => {
    if ("name" in e.target) {
      dispatch({
        type: "setUi",
        ui: {
          field: { focus: null },
        },
      });
    }
  }, []);

  const { visible = true } = props.field;

  if (!visible) {
    return null;
  }

  if (field.type === "slot") {
    return null;
  }

  if (field.type === "custom") {
    if (!field.render) {
      return null;
    }

    const CustomField = field.render as any;

    return (
      <div className={getClassNameWrapper()} onFocus={onFocus} onBlur={onBlur}>
        <div className={getClassName()}>
          <CustomField {...mergedProps} />
        </div>
      </div>
    );
  }

  const children = defaultFields[field.type](mergedProps);

  const Render = render[field.type] as (props: FieldProps) => ReactElement;

  return (
    <NestedFieldContext.Provider
      value={{
        readOnlyFields: nestedFieldContext.readOnlyFields || readOnly || {},
        localName: nestedFieldContext.localName,
      }}
    >
      <div
        className={getClassNameWrapper()}
        onFocus={onFocus}
        onBlur={onBlur}
        onClick={(e) => {
          // Prevent propagation of any click events to parent field.
          // For example, a field within an array may bubble an event
          // and fail to stop propagation.
          e.stopPropagation();
        }}
      >
        <Render {...mergedProps}>{children}</Render>
      </div>
    </NestedFieldContext.Provider>
  );
}

type FieldNoLabel<Props extends any = any> = Omit<Field<Props>, "label">;

export function AutoFieldPrivate<
  ValueType = any,
  FieldType extends FieldNoLabel<ValueType> = FieldNoLabel<ValueType>
>(
  props: FieldPropsInternalOptional<ValueType, FieldType> & {
    Label?: React.FC<FieldLabelPropsInternal>;
  }
) {
  const isFocused = useAppStore((s) => s.state.ui.field.focus === props.name);
  const { value, onChange } = props;

  const [localValue, setLocalValue] = useState(value);

  const onChangeLocal = useCallback(
    (val: any, ui?: Partial<UiState>) => {
      setLocalValue(val);

      onChange(val, ui);
    },
    [onChange]
  );

  useEffect(() => {
    // Prevent global state from setting local state if this field is focused
    if (!isFocused) {
      setLocalValue(value);
    }
  }, [value]);

  useEffect(() => {
    if (!isFocused) {
      if (value !== localValue) {
        setLocalValue(value);
      }
    }
  }, [isFocused, value, localValue]);

  const localProps = {
    value: localValue,
    onChange: onChangeLocal,
  };

  return <AutoFieldInternal<ValueType, FieldType> {...props} {...localProps} />;
}

export function AutoField<
  ValueType = any,
  FieldType extends FieldNoLabel<ValueType> = FieldNoLabel<ValueType>
>(props: FieldProps<FieldType, ValueType>) {
  const DefaultLabel = useMemo(() => {
    const DefaultLabel = (labelProps: any) => (
      <div
        {...labelProps}
        className={getClassName({ readOnly: props.readOnly })}
      />
    );

    return DefaultLabel;
  }, [props.readOnly]);

  if (props.field.type === "slot") {
    return null;
  }

  return (
    <AutoFieldInternal<ValueType, FieldType> {...props} Label={DefaultLabel} />
  );
}



================================================
FILE: packages/core/components/AutoField/styles.module.css
================================================
.InputWrapper + .InputWrapper {
  margin-top: 12px;
}

.Input-label {
  align-items: center;
  color: var(--puck-color-grey-04);
  display: flex;
  padding-bottom: 12px;
  font-size: var(--puck-font-size-xxs);
  font-weight: 600;
}

.Input-labelIcon {
  color: var(--puck-color-grey-07);
  display: flex;
  margin-inline-end: 4px;
  padding-inline-start: 4px;
}

.Input-disabledIcon {
  color: var(--puck-color-grey-05);
  margin-inline-start: auto;
}

.Input-input {
  background: var(--puck-color-white);
  border-width: 1px;
  border-style: solid;
  border-color: var(--puck-color-grey-09);
  border-radius: 4px;
  box-sizing: border-box;
  font-family: inherit;
  font-size: 14px;
  padding: 12px 15px;
  transition: border-color 50ms ease-in;
  width: 100%;
  max-width: 100%;
}

select.Input-input {
  appearance: none; /* Safari */
  background: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100' height='100' fill='%23c3c3c3'><polygon points='0,0 100,0 50,50'/></svg>")
    no-repeat;
  background-size: 12px;
  background-position: calc(100% - 12px) calc(50% + 3px);
  background-repeat: no-repeat;
  background-color: var(--puck-color-white);
  cursor: pointer;
}

select.Input-input:dir(rtl) {
  background-position: 12px calc(50% + 3px);
}

@media (hover: hover) and (pointer: fine) {
  .Input:has(> input):hover .Input-input:not([readonly]),
  .Input:has(> textarea):hover .Input-input:not([readonly]) {
    border-color: var(--puck-color-grey-05);
    transition: none;
  }
  .Input:has(> select):hover .Input-input:not([disabled]) {
    background-color: var(--puck-color-azure-12);
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100' height='100' fill='%235a5a5a'><polygon points='0,0 100,0 50,50'/></svg>");
    border-color: var(--puck-color-grey-05);
    transition: none;
  }
}

.Input-input:focus {
  border-color: var(--puck-color-grey-05);
  outline: 2px solid var(--puck-color-azure-05);
  transition: none;
}

.Input--readOnly > .Input-input,
.Input--readOnly > select.Input-input {
  background-color: var(--puck-color-grey-11);
  border-color: var(--puck-color-grey-09);
  color: var(--puck-color-grey-04);
  cursor: default;
  opacity: 1;
  outline: 0;
  transition: none;
}

.Input-radioGroupItems {
  display: flex;
  border: 1px solid var(--puck-color-grey-09);
  border-radius: 4px;
  flex-wrap: wrap;
}

.Input-radio {
  border-inline-end: 1px solid var(--puck-color-grey-09);
  flex-grow: 1;
}

.Input-radio:first-of-type {
  border-bottom-left-radius: 4px;
  border-top-left-radius: 4px;
}

.Input-radio:first-of-type .Input-radioInner {
  border-bottom-left-radius: 3px;
  border-top-left-radius: 3px;
}

.Input-radio:last-of-type {
  border-bottom-right-radius: 4px;
  border-inline-end: 0;
  border-top-right-radius: 4px;
}

.Input-radio:last-of-type .Input-radioInner {
  border-bottom-right-radius: 3px;
  border-top-right-radius: 3px;
}

.Input-radioInner {
  background-color: var(--puck-color-white);
  color: var(--puck-color-grey-04);
  cursor: pointer;
  font-size: var(--puck-font-size-xxxs);
  padding: 8px 12px;
  text-align: center;
  transition: background-color 50ms ease-in;
}

.Input-radio:has(:focus-visible) {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
  position: relative;
}

@media (hover: hover) and (pointer: fine) {
  .Input-radioInner:hover {
    background-color: var(--puck-color-azure-12);
    transition: none;
  }
}

.Input--readOnly .Input-radioInner {
  background-color: var(--puck-color-white);
  color: var(--puck-color-grey-04);
  cursor: default;
}

.Input-radio .Input-radioInput:checked ~ .Input-radioInner {
  background-color: var(--puck-color-azure-11);
  color: var(--puck-color-azure-04);
  font-weight: 500;
}

.Input--readOnly .Input-radioInput:checked ~ .Input-radioInner {
  background-color: var(--puck-color-grey-11);
  color: var(--puck-color-grey-04);
}

.Input-radio .Input-radioInput {
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

textarea.Input-input {
  margin-bottom: -4px; /* Remove strange bottom border */
}



================================================
FILE: packages/core/components/AutoField/fields/index.tsx
================================================
export * from "./ArrayField";
export * from "./DefaultField";
export * from "./ExternalField";
export * from "./RadioField";
export * from "./SelectField";
export * from "./TextareaField";



================================================
FILE: packages/core/components/AutoField/fields/ArrayField/index.tsx
================================================
import getClassNameFactory from "../../../../lib/get-class-name-factory";
import styles from "./styles.module.css";
import { Copy, List, Plus, Trash } from "lucide-react";
import { AutoFieldPrivate, FieldPropsInternal } from "../..";
import { IconButton } from "../../../IconButton";
import { reorder, replace } from "../../../../lib";
import { useCallback, useEffect, useRef, useState } from "react";
import { DragIcon } from "../../../DragIcon";
import { ArrayState, ItemWithId } from "../../../../types";
import { useAppStore, useAppStoreApi } from "../../../../store";
import { Sortable, SortableProvider } from "../../../Sortable";
import { NestedFieldProvider, useNestedFieldContext } from "../../context";
import { walkField } from "../../../../lib/data/map-slots";
import { populateIds } from "../../../../lib/data/populate-ids";
import { defaultSlots } from "../../../../lib/data/default-slots";

const getClassName = getClassNameFactory("ArrayField", styles);
const getClassNameItem = getClassNameFactory("ArrayFieldItem", styles);

export const ArrayField = ({
  field,
  onChange,
  value: _value,
  name,
  label,
  labelIcon,
  readOnly,
  id,
  Label = (props) => <div {...props} />,
}: FieldPropsInternal) => {
  const thisArrayState = useAppStore((s) => s.state.ui.arrayState[id]);
  const setUi = useAppStore((s) => s.setUi);
  const { readOnlyFields, localName = name } = useNestedFieldContext();

  const value: object[] = _value;

  const arrayState = thisArrayState || {
    items: Array.from(value || []).map((item, idx) => {
      return {
        _originalIndex: idx,
        _arrayId: `${id}-${idx}`,
      };
    }),
    openId: "",
  };

  const [localState, setLocalState] = useState({ arrayState, value });

  useEffect(() => {
    const _arrayState =
      appStore.getState().state.ui.arrayState[id] ?? arrayState;

    setLocalState({ arrayState: _arrayState, value });
  }, [value]);

  const appStore = useAppStoreApi();

  const mapArrayStateToUi = useCallback(
    (partialArrayState: Partial<ArrayState>) => {
      const state = appStore.getState().state;
      return {
        arrayState: {
          ...state.ui.arrayState,
          [id]: { ...arrayState, ...partialArrayState },
        },
      };
    },
    [arrayState, appStore]
  );

  const getHighestIndex = useCallback(() => {
    return arrayState.items.reduce(
      (acc, item) => (item._originalIndex > acc ? item._originalIndex : acc),
      -1
    );
  }, [arrayState]);

  const regenerateArrayState = useCallback(
    (value: object[]) => {
      let highestIndex = getHighestIndex();

      const newItems = Array.from(value || []).map((item, idx) => {
        const arrayStateItem = arrayState.items[idx];

        const newItem = {
          _originalIndex:
            typeof arrayStateItem?._originalIndex !== "undefined"
              ? arrayStateItem._originalIndex
              : highestIndex + 1,
          _arrayId:
            arrayState.items[idx]?._arrayId || `${id}-${highestIndex + 1}`,
        };

        if (newItem._originalIndex > highestIndex) {
          highestIndex = newItem._originalIndex;
        }

        return newItem;
      });

      // We don't need to record history during this useEffect, as the history has already been set by onDragEnd
      return { ...arrayState, items: newItems };
    },
    [arrayState]
  );

  // Create a mirror of value with IDs added for drag and drop
  useEffect(() => {
    if (arrayState.items.length > 0) {
      setUi(mapArrayStateToUi(arrayState));
    }
  }, []);

  const [draggedItem, setDraggedItem] = useState("");
  const isDraggingAny = !!draggedItem;

  const canEdit = useAppStore(
    (s) => s.permissions.getPermissions({ item: s.selectedItem }).edit
  );

  const forceReadOnly = !canEdit;

  const valueRef = useRef<object[]>(value);

  /**
   * Walk the item and ensure all slotted items have unique IDs
   */
  const uniqifyItem = useCallback(
    (val: any) => {
      if (field.type !== "array" || !field.arrayFields) return;

      const config = appStore.getState().config;

      return walkField({
        value: val,
        fields: field.arrayFields,
        map: (content) =>
          content.map((item) => populateIds(item, config, true)),
        config,
      });
    },
    [appStore, field]
  );

  if (field.type !== "array" || !field.arrayFields) {
    return null;
  }

  const addDisabled =
    (field.max !== undefined &&
      localState.arrayState.items.length >= field.max) ||
    readOnly;

  return (
    <Label
      label={label || name}
      icon={labelIcon || <List size={16} />}
      el="div"
      readOnly={readOnly}
    >
      <SortableProvider
        onDragStart={(id) => setDraggedItem(id)}
        onDragEnd={() => {
          setDraggedItem("");

          onChange(valueRef.current);
        }}
        onMove={(move) => {
          // A race condition means we can sometimes have the wrong source element
          // so we double double check before proceeding
          if (arrayState.items[move.source]._arrayId !== draggedItem) {
            return;
          }

          const newValue = reorder(localState.value, move.source, move.target);

          const newArrayStateItems: ItemWithId[] = reorder(
            arrayState.items,
            move.source,
            move.target
          );

          const state = appStore.getState().state;

          const newUi = {
            arrayState: {
              ...state.ui.arrayState,
              [id]: { ...arrayState, items: newArrayStateItems },
            },
          };

          setUi(newUi, false);
          setLocalState({
            value: newValue,
            arrayState: { ...arrayState, items: newArrayStateItems },
          });

          valueRef.current = newValue;
        }}
      >
        <div
          className={getClassName({
            hasItems: Array.isArray(value) && value.length > 0,
            addDisabled,
          })}
        >
          {localState.arrayState.items.length > 0 && (
            <div className={getClassName("inner")} data-dnd-container>
              {localState.arrayState.items.map((item, i) => {
                const { _arrayId = `${id}-${i}`, _originalIndex = i } = item;
                const data: any = Array.from(localState.value || [])[i] || {};

                return (
                  <Sortable
                    key={_arrayId}
                    id={_arrayId}
                    index={i}
                    disabled={readOnly}
                  >
                    {({ isDragging, ref, handleRef }) => (
                      <div
                        ref={ref}
                        className={getClassNameItem({
                          isExpanded: arrayState.openId === _arrayId,
                          isDragging,
                          readOnly,
                        })}
                      >
                        <div
                          ref={handleRef}
                          onClick={(e) => {
                            if (isDragging) return;

                            e.preventDefault();
                            e.stopPropagation();

                            if (arrayState.openId === _arrayId) {
                              setUi(
                                mapArrayStateToUi({
                                  openId: "",
                                })
                              );
                            } else {
                              setUi(
                                mapArrayStateToUi({
                                  openId: _arrayId,
                                })
                              );
                            }
                          }}
                          className={getClassNameItem("summary")}
                        >
                          {field.getItemSummary
                            ? field.getItemSummary(data, i)
                            : `Item #${_originalIndex}`}
                          <div className={getClassNameItem("rhs")}>
                            {!readOnly && (
                              <div className={getClassNameItem("actions")}>
                                <div className={getClassNameItem("action")}>
                                  <IconButton
                                    type="button"
                                    disabled={!!addDisabled}
                                    onClick={(e) => {
                                      e.stopPropagation();

                                      const existingValue = [...(value || [])];

                                      const newItem = uniqifyItem(
                                        existingValue[i]
                                      );

                                      existingValue.splice(i, 0, newItem);

                                      const newUi = mapArrayStateToUi(
                                        regenerateArrayState(existingValue)
                                      );

                                      setUi(newUi, false);
                                      onChange(existingValue);
                                    }}
                                    title="Duplicate"
                                  >
                                    <Copy size={16} />
                                  </IconButton>
                                </div>
                                <div className={getClassNameItem("action")}>
                                  <IconButton
                                    type="button"
                                    disabled={
                                      field.min !== undefined &&
                                      field.min >=
                                        localState.arrayState.items.length
                                    }
                                    onClick={(e) => {
                                      e.stopPropagation();

                                      const existingValue = [...(value || [])];

                                      const existingItems = [
                                        ...(arrayState.items || []),
                                      ];

                                      existingValue.splice(i, 1);
                                      existingItems.splice(i, 1);

                                      setUi(
                                        mapArrayStateToUi({
                                          items: existingItems,
                                        }),
                                        false
                                      );

                                      onChange(existingValue);
                                    }}
                                    title="Delete"
                                  >
                                    <Trash size={16} />
                                  </IconButton>
                                </div>
                              </div>
                            )}
                            <div>
                              <DragIcon />
                            </div>
                          </div>
                        </div>
                        <div className={getClassNameItem("body")}>
                          <fieldset className={getClassNameItem("fieldset")}>
                            {Object.keys(field.arrayFields!).map((subName) => {
                              const subField = field.arrayFields![subName];

                              const indexName = `${name}[${i}]`;
                              const subPath = `${indexName}.${subName}`;

                              const localIndexName = `${localName}[${i}]`;
                              const localWildcardName = `${localName}[*]`;
                              const localSubPath = `${localIndexName}.${subName}`;
                              const localWildcardSubPath = `${localWildcardName}.${subName}`;

                              const subReadOnly = forceReadOnly
                                ? forceReadOnly
                                : typeof readOnlyFields[subPath] !== "undefined"
                                ? readOnlyFields[localSubPath]
                                : readOnlyFields[localWildcardSubPath];

                              const label = subField.label || subName;

                              return (
                                <NestedFieldProvider
                                  key={subPath}
                                  name={localIndexName}
                                  wildcardName={localWildcardName}
                                  subName={subName}
                                  readOnlyFields={readOnlyFields}
                                >
                                  <AutoFieldPrivate
                                    name={subPath}
                                    label={label}
                                    id={`${_arrayId}_${subName}`}
                                    readOnly={subReadOnly}
                                    field={{
                                      ...subField,
                                      label, // May be used by custom fields
                                    }}
                                    value={data[subName]}
                                    onChange={(val, ui) => {
                                      onChange(
                                        replace(value, i, {
                                          ...data,
                                          [subName]: val,
                                        }),
                                        ui
                                      );
                                    }}
                                  />
                                </NestedFieldProvider>
                              );
                            })}
                          </fieldset>
                        </div>
                      </div>
                    )}
                  </Sortable>
                );
              })}
            </div>
          )}

          {!addDisabled && (
            <button
              type="button"
              className={getClassName("addButton")}
              onClick={() => {
                if (isDraggingAny) return;

                const existingValue = value || [];

                const newItem = defaultSlots(
                  uniqifyItem(field.defaultItemProps ?? {}),
                  field.arrayFields
                );
                const newValue = [...existingValue, newItem];

                const newArrayState = regenerateArrayState(newValue);

                setUi(mapArrayStateToUi(newArrayState), false);
                onChange(newValue);
              }}
            >
              <Plus size={21} />
            </button>
          )}
        </div>
      </SortableProvider>
    </Label>
  );
};



================================================
FILE: packages/core/components/AutoField/fields/ArrayField/styles.module.css
================================================
/**
 * ArrayField
 */

.ArrayField {
  display: flex;
  flex-direction: column;
  background: var(--puck-color-azure-11);
  border: 1px solid var(--puck-color-grey-09);
  border-radius: 4px;
}

.ArrayField--isDraggingFrom {
  background-color: var(--puck-color-azure-11);
  overflow: hidden;
}

.ArrayField-addButton {
  background-color: var(--puck-color-white);
  border: none;
  border-radius: 3px;
  display: flex;
  color: var(--puck-color-azure-05);
  justify-content: center;
  cursor: pointer;
  width: 100%;
  margin: 0;
  padding: 14px; /* Retain same height as other items */
  text-align: left;
  transition: background-color 50ms ease-in;
}

.ArrayField--hasItems > .ArrayField-addButton {
  border-top: 1px solid var(--puck-color-grey-09);
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}

.ArrayField-addButton:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
  position: relative;
}

@media (hover: hover) and (pointer: fine) {
  .ArrayField:not(.ArrayField--isDraggingFrom) > .ArrayField-addButton:hover {
    background: var(--puck-color-azure-12);
    color: var(--puck-color-azure-04);
    transition: none;
  }
}

.ArrayField:not(.ArrayField--isDraggingFrom) > .ArrayField-addButton:active {
  background: var(--puck-color-azure-11);
  color: var(--puck-color-azure-04);
  transition: none;
}

.ArrayField-inner {
  margin-top: -1px;
}

/**
 * ArrayFieldItem
 */

.ArrayFieldItem {
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
  display: block;
  position: relative;
}

.ArrayFieldItem {
  border-top: 1px solid var(--puck-color-grey-09);
}

.ArrayFieldItem--isDragging {
  border-top: transparent;
}

.ArrayFieldItem--isExpanded::before {
  display: none;
}

.ArrayFieldItem--isExpanded {
  border-bottom: 0;
  outline-offset: 0px !important; /* Important helps to override Nextra docs */
  outline: 1px solid var(--puck-color-azure-07) !important; /* Important helps to override Nextra docs */
  z-index: 2;
}

.ArrayFieldItem--isDragging {
  outline: 2px var(--puck-color-azure-09) solid !important;
}

.ArrayFieldItem--isDragging .ArrayFieldItem-summary:active {
  background-color: var(--puck-color-white);
}

.ArrayFieldItem + .ArrayFieldItem {
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}

.ArrayFieldItem-summary {
  background: var(--puck-color-white);
  color: var(--puck-color-grey-04);
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 2px;
  justify-content: space-between;
  font-size: var(--puck-font-size-xxs);
  list-style: none;
  padding: 12px 15px;
  position: relative;
  overflow: hidden;
  transition: background-color 50ms ease-in;
}

.ArrayFieldItem:first-of-type > .ArrayFieldItem-summary {
  border-top-left-radius: 3px;
  border-top-right-radius: 3px;
}

.ArrayField--addDisabled
  > .ArrayField-inner
  > .ArrayFieldItem:last-of-type:not(.ArrayFieldItem--isExpanded)
  > .ArrayFieldItem-summary {
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
}

.ArrayField--addDisabled
  > .ArrayField-inner
  > .ArrayFieldItem--isExpanded:last-of-type {
  border-bottom-left-radius: 3px;
  border-bottom-right-radius: 3px;
}

.ArrayFieldItem-summary:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
}

@media (hover: hover) and (pointer: fine) {
  .ArrayFieldItem-summary:hover {
    background-color: var(--puck-color-azure-12);
    transition: none;
  }
}

.ArrayFieldItem-summary:active {
  background-color: var(--puck-color-azure-11);
  transition: none;
}

.ArrayFieldItem--isExpanded > .ArrayFieldItem-summary {
  background: var(--puck-color-azure-11);
  color: var(--puck-color-azure-04);
  font-weight: 600;
  transition: none;
}

.ArrayFieldItem-body {
  background: var(--puck-color-white);
  display: none;
}

.ArrayFieldItem--isExpanded > .ArrayFieldItem-body {
  display: block;
}

.ArrayFieldItem-fieldset {
  border: none;
  border-top: 1px solid var(--puck-color-grey-09);
  margin: 0;
  min-width: 0; /* Needed to ensure External input doesn't overflow, see https://stackoverflow.com/a/53784508 */
  padding: 16px 15px;
}

.ArrayFieldItem-rhs {
  display: flex;
  gap: 4px;
  align-items: center;
}

.ArrayFieldItem-actions {
  color: var(--puck-color-grey-04);
  display: flex;
  gap: 4px;
  opacity: 0;
}

.ArrayFieldItem-summary:focus-within
  > .ArrayFieldItem-rhs
  > .ArrayFieldItem-actions,
.ArrayFieldItem-summary:hover > .ArrayFieldItem-rhs > .ArrayFieldItem-actions {
  opacity: 1;
}



================================================
FILE: packages/core/components/AutoField/fields/DefaultField/index.tsx
================================================
import getClassNameFactory from "../../../../lib/get-class-name-factory";
import styles from "../../styles.module.css";
import { Hash, Type } from "lucide-react";
import { FieldPropsInternal } from "../..";

const getClassName = getClassNameFactory("Input", styles);

export const DefaultField = ({
  field,
  onChange,
  readOnly,
  value: _value,
  name,
  label,
  labelIcon,
  Label,
  id,
}: FieldPropsInternal) => {
  const value = _value as string | number | undefined | null;

  return (
    <Label
      label={label || name}
      icon={
        labelIcon || (
          <>
            {field.type === "text" && <Type size={16} />}
            {field.type === "number" && <Hash size={16} />}
          </>
        )
      }
      readOnly={readOnly}
    >
      <input
        className={getClassName("input")}
        autoComplete="off"
        type={field.type}
        title={label || name}
        name={name}
        value={value?.toString ? value.toString() : ""}
        onChange={(e) => {
          if (field.type === "number") {
            const numberValue = Number(e.currentTarget.value);

            if (typeof field.min !== "undefined" && numberValue < field.min) {
              return;
            }

            if (typeof field.max !== "undefined" && numberValue > field.max) {
              return;
            }

            onChange(numberValue);
          } else {
            onChange(e.currentTarget.value);
          }
        }}
        readOnly={readOnly}
        tabIndex={readOnly ? -1 : undefined}
        id={id}
        min={field.type === "number" ? field.min : undefined}
        max={field.type === "number" ? field.max : undefined}
        placeholder={
          field.type === "text" || field.type === "number"
            ? field.placeholder
            : undefined
        }
        step={field.type === "number" ? field.step : undefined}
      />
    </Label>
  );
};



================================================
FILE: packages/core/components/AutoField/fields/ExternalField/index.tsx
================================================
import { useEffect } from "react";
import { FieldPropsInternal } from "../..";
import type {
  ExternalField as ExternalFieldType,
  ExternalFieldWithAdaptor,
} from "../../../../types";

import { ExternalInput } from "../../../ExternalInput";
import { Link } from "lucide-react";

export const ExternalField = ({
  field,
  onChange,
  value,
  name,
  label,
  labelIcon,
  Label,
  id,
  readOnly,
}: FieldPropsInternal) => {
  // DEPRECATED
  const validField = field as ExternalFieldType;
  const deprecatedField = field as ExternalFieldWithAdaptor;

  useEffect(() => {
    if (deprecatedField.adaptor) {
      console.error(
        "Warning: The `adaptor` API is deprecated. Please use updated APIs on the `external` field instead. This will be a breaking change in a future release."
      );
    }
  }, []);

  if (field.type !== "external") {
    return null;
  }

  return (
    <Label
      label={label || name}
      icon={labelIcon || <Link size={16} />}
      el="div"
    >
      <ExternalInput
        name={name}
        field={{
          ...validField,
          // DEPRECATED

          placeholder: deprecatedField.adaptor?.name
            ? `Select from ${deprecatedField.adaptor.name}`
            : validField.placeholder || "Select data",
          mapProp: deprecatedField.adaptor?.mapProp || validField.mapProp,
          mapRow: validField.mapRow,
          fetchList: deprecatedField.adaptor?.fetchList
            ? async () =>
                await deprecatedField.adaptor.fetchList(
                  deprecatedField.adaptorParams
                )
            : validField.fetchList,
        }}
        onChange={onChange}
        value={value}
        id={id}
        readOnly={readOnly}
      />
    </Label>
  );
};



================================================
FILE: packages/core/components/AutoField/fields/ObjectField/index.tsx
================================================
import getClassNameFactory from "../../../../lib/get-class-name-factory";
import styles from "./styles.module.css";
import { MoreVertical } from "lucide-react";
import { AutoFieldPrivate, FieldPropsInternal } from "../..";
import { NestedFieldProvider, useNestedFieldContext } from "../../context";

const getClassName = getClassNameFactory("ObjectField", styles);

export const ObjectField = ({
  field,
  onChange,
  value,
  name,
  label,
  labelIcon,
  Label,
  readOnly,
  id,
}: FieldPropsInternal) => {
  const { readOnlyFields, localName = name } = useNestedFieldContext();

  if (field.type !== "object" || !field.objectFields) {
    return null;
  }

  const data = value || {};

  return (
    <Label
      label={label || name}
      icon={labelIcon || <MoreVertical size={16} />}
      el="div"
      readOnly={readOnly}
    >
      <div className={getClassName()}>
        <fieldset className={getClassName("fieldset")}>
          {Object.keys(field.objectFields!).map((subName) => {
            const subField = field.objectFields![subName];

            const subPath = `${name}.${subName}`;
            const localSubPath = `${localName || name}.${subName}`;

            const subReadOnly = readOnly
              ? readOnly
              : readOnlyFields[localSubPath];

            const label = subField.label || subName;

            return (
              <NestedFieldProvider
                key={subPath}
                name={localName || id}
                subName={subName}
                readOnlyFields={readOnlyFields}
              >
                <AutoFieldPrivate
                  name={subPath}
                  label={subPath}
                  id={`${id}_${subName}`}
                  readOnly={subReadOnly}
                  field={{
                    ...subField,
                    label, // May be used by custom fields
                  }}
                  value={data[subName]}
                  onChange={(val, ui) => {
                    onChange(
                      {
                        ...data,
                        [subName]: val,
                      },
                      ui
                    );
                  }}
                />
              </NestedFieldProvider>
            );
          })}
        </fieldset>
      </div>
    </Label>
  );
};



================================================
FILE: packages/core/components/AutoField/fields/ObjectField/styles.module.css
================================================
/**
 * ObjectField
 */

.ObjectField {
  display: flex;
  flex-direction: column;
  background-color: var(--puck-color-white);
  border: 1px solid var(--puck-color-grey-09);
  border-radius: 4px;
}

.ObjectField-fieldset {
  border: none;
  margin: 0;
  min-width: 0; /* Needed to ensure External input doesn't overflow, see https://stackoverflow.com/a/53784508 */
  padding: 16px 15px;
}



================================================
FILE: packages/core/components/AutoField/fields/RadioField/index.tsx
================================================
import { useMemo } from "react";
import getClassNameFactory from "../../../../lib/get-class-name-factory";
import styles from "../../styles.module.css";
import { CheckCircle } from "lucide-react";
import { FieldPropsInternal } from "../..";
import { safeJsonParse } from "../../../../lib/safe-json-parse";

const getClassName = getClassNameFactory("Input", styles);

export const RadioField = ({
  field,
  onChange,
  readOnly,
  value,
  name,
  id,
  label,
  labelIcon,
  Label,
}: FieldPropsInternal) => {
  const flatOptions = useMemo(
    () =>
      field.type === "radio" ? field.options.map(({ value }) => value) : [],
    [field]
  );

  if (field.type !== "radio" || !field.options) {
    return null;
  }

  return (
    <Label
      icon={labelIcon || <CheckCircle size={16} />}
      label={label || name}
      readOnly={readOnly}
      el="div"
    >
      <div className={getClassName("radioGroupItems")} id={id}>
        {field.options.map((option) => (
          <label
            key={option.label + option.value}
            className={getClassName("radio")}
          >
            <input
              type="radio"
              className={getClassName("radioInput")}
              value={option.value as string | number}
              name={name}
              onChange={(e) => {
                const jsonValue =
                  safeJsonParse(e.target.value) ?? e.target.value;

                if (flatOptions.indexOf(jsonValue) > -1) {
                  onChange(jsonValue);
                } else {
                  onChange(e.target.value);
                }
              }}
              disabled={readOnly}
              checked={value === option.value}
            />
            <div className={getClassName("radioInner")}>
              {option.label || option.value}
            </div>
          </label>
        ))}
      </div>
    </Label>
  );
};



================================================
FILE: packages/core/components/AutoField/fields/SelectField/index.tsx
================================================
import { useMemo } from "react";
import getClassNameFactory from "../../../../lib/get-class-name-factory";
import styles from "../../styles.module.css";
import { ChevronDown } from "lucide-react";
import { FieldPropsInternal } from "../..";
import { safeJsonParse } from "../../../../lib/safe-json-parse";

const getClassName = getClassNameFactory("Input", styles);

export const SelectField = ({
  field,
  onChange,
  label,
  labelIcon,
  Label,
  value,
  name,
  readOnly,
  id,
}: FieldPropsInternal) => {
  const flatOptions = useMemo(
    () =>
      field.type === "select" ? field.options.map(({ value }) => value) : [],
    [field]
  );

  if (field.type !== "select" || !field.options) {
    return null;
  }

  return (
    <Label
      label={label || name}
      icon={labelIcon || <ChevronDown size={16} />}
      readOnly={readOnly}
    >
      <select
        id={id}
        title={label || name}
        className={getClassName("input")}
        disabled={readOnly}
        onChange={(e) => {
          const jsonValue = safeJsonParse(e.target.value) ?? e.target.value;

          if (flatOptions.indexOf(jsonValue) > -1) {
            onChange(jsonValue);
          } else {
            onChange(e.target.value);
          }
        }}
        value={value}
      >
        {field.options.map((option) => (
          <option
            key={option.label + option.value}
            label={option.label}
            value={option.value as string | number}
          />
        ))}
      </select>
    </Label>
  );
};



================================================
FILE: packages/core/components/AutoField/fields/TextareaField/index.tsx
================================================
import getClassNameFactory from "../../../../lib/get-class-name-factory";
import styles from "../../styles.module.css";
import { Type } from "lucide-react";
import { FieldPropsInternal } from "../..";

const getClassName = getClassNameFactory("Input", styles);

export const TextareaField = ({
  field,
  onChange,
  readOnly,
  value,
  name,
  label,
  labelIcon,
  Label,
  id,
}: FieldPropsInternal) => {
  return (
    <Label
      label={label || name}
      icon={labelIcon || <Type size={16} />}
      readOnly={readOnly}
    >
      <textarea
        id={id}
        className={getClassName("input")}
        autoComplete="off"
        name={name}
        value={typeof value === "undefined" ? "" : value}
        onChange={(e) => onChange(e.currentTarget.value)}
        readOnly={readOnly}
        tabIndex={readOnly ? -1 : undefined}
        rows={5}
        placeholder={field.type === "textarea" ? field.placeholder : undefined}
      />
    </Label>
  );
};



================================================
FILE: packages/core/components/AutoFrame/index.tsx
================================================
import {
  createContext,
  ReactNode,
  RefObject,
  useContext,
  useEffect,
  useState,
} from "react";
import hash from "object-hash";
import { createPortal } from "react-dom";

const styleSelector = 'style, link[rel="stylesheet"]';

const collectStyles = (doc: Document) => {
  const collected: HTMLElement[] = [];

  doc.querySelectorAll(styleSelector).forEach((style) => {
    collected.push(style as HTMLElement);
  });

  return collected;
};

const getStyleSheet = (el: HTMLElement) => {
  return Array.from(document.styleSheets).find((ss) => {
    const ownerNode = ss.ownerNode as HTMLLinkElement;

    return ownerNode.href === (el as HTMLLinkElement).href;
  });
};

const getStyles = (styleSheet?: CSSStyleSheet) => {
  if (styleSheet) {
    try {
      return [...styleSheet.cssRules].map((rule) => rule.cssText).join("");
    } catch (e) {
      console.warn(
        "Access to stylesheet %s is denied. Ignoring…",
        styleSheet.href
      );
    }
  }

  return "";
};

// Sync attributes from parent window to iFrame
const syncAttributes = (sourceElement: Element, targetElement: Element) => {
  const attributes = sourceElement.attributes;
  if (attributes?.length > 0) {
    Array.from(attributes).forEach((attribute: Attr) => {
      targetElement.setAttribute(attribute.name, attribute.value);
    });
  }
};

const defer = (fn: () => void) => setTimeout(fn, 0);

const CopyHostStyles = ({
  children,
  debug = false,
  onStylesLoaded = () => null,
}: {
  children: ReactNode;
  debug?: boolean;
  onStylesLoaded?: () => void;
}) => {
  const { document: doc, window: win } = useFrame();

  useEffect(() => {
    if (!win || !doc) {
      return () => {};
    }

    let elements: { original: HTMLElement; mirror: HTMLElement }[] = [];
    const hashes: Record<string, boolean> = {};

    const lookupEl = (el: HTMLElement) =>
      elements.findIndex((elementMap) => elementMap.original === el);

    const mirrorEl = async (el: HTMLElement, inlineStyles = false) => {
      let mirror: HTMLStyleElement;

      if (el.nodeName === "LINK" && inlineStyles) {
        mirror = document.createElement("style") as HTMLStyleElement;
        mirror.type = "text/css";

        let styleSheet = getStyleSheet(el);

        if (!styleSheet) {
          await new Promise<void>((resolve) => {
            const fn = () => {
              resolve();
              el.removeEventListener("load", fn);
            };

            el.addEventListener("load", fn);
          });
          styleSheet = getStyleSheet(el);
        }

        const styles = getStyles(styleSheet);

        if (!styles) {
          if (debug) {
            console.warn(
              `Tried to load styles for link element, but couldn't find them. Skipping...`
            );
          }

          return;
        }

        mirror.innerHTML = styles;

        mirror.setAttribute("data-href", el.getAttribute("href")!);
      } else {
        mirror = el.cloneNode(true) as HTMLStyleElement;
      }

      return mirror;
    };

    const addEl = async (el: HTMLElement) => {
      const index = lookupEl(el);
      if (index > -1) {
        if (debug)
          console.log(
            `Tried to add an element that was already mirrored. Updating instead...`
          );

        elements[index].mirror.innerText = el.innerText;

        return;
      }

      const mirror = await mirrorEl(el);

      if (!mirror) {
        return;
      }

      const elHash = hash(mirror.outerHTML);

      if (hashes[elHash]) {
        if (debug)
          console.log(
            `iframe already contains element that is being mirrored. Skipping...`
          );

        return;
      }

      hashes[elHash] = true;

      doc.head.append(mirror as HTMLElement);
      elements.push({ original: el, mirror: mirror });

      if (debug) console.log(`Added style node ${el.outerHTML}`);
    };

    const removeEl = (el: HTMLElement) => {
      const index = lookupEl(el);
      if (index === -1) {
        if (debug)
          console.log(
            `Tried to remove an element that did not exist. Skipping...`
          );

        return;
      }

      const elHash = hash(el.outerHTML);

      elements[index]?.mirror?.remove();
      delete hashes[elHash];

      if (debug) console.log(`Removed style node ${el.outerHTML}`);
    };

    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === "childList") {
          mutation.addedNodes.forEach((node) => {
            if (
              node.nodeType === Node.TEXT_NODE ||
              node.nodeType === Node.ELEMENT_NODE
            ) {
              const el =
                node.nodeType === Node.TEXT_NODE
                  ? node.parentElement
                  : (node as HTMLElement);

              if (el && el.matches(styleSelector)) {
                defer(() => addEl(el));
              }
            }
          });

          mutation.removedNodes.forEach((node) => {
            if (
              node.nodeType === Node.TEXT_NODE ||
              node.nodeType === Node.ELEMENT_NODE
            ) {
              const el =
                node.nodeType === Node.TEXT_NODE
                  ? node.parentElement
                  : (node as HTMLElement);

              if (el && el.matches(styleSelector)) {
                defer(() => removeEl(el));
              }
            }
          });
        }
      });
    });

    const parentDocument = win!.parent.document;

    const collectedStyles = collectStyles(parentDocument);
    const hrefs: string[] = [];
    let stylesLoaded = 0;

    // Sync attributes for the HTML tag
    const parentHtml = parentDocument.getElementsByTagName("html")[0];
    syncAttributes(parentHtml, doc.documentElement);

    // Sync attributes for the Body tag
    const parentBody = parentDocument.getElementsByTagName("body")[0];
    syncAttributes(parentBody, doc.body);

    Promise.all(
      collectedStyles.map(async (styleNode, i) => {
        if (styleNode.nodeName === "LINK") {
          const linkHref = (styleNode as HTMLLinkElement).href;

          // Don't process link elements with identical hrefs more than once
          if (hrefs.indexOf(linkHref) > -1) {
            return;
          }

          hrefs.push(linkHref);
        }

        const mirror = await mirrorEl(styleNode);

        if (!mirror) return;

        elements.push({ original: styleNode, mirror });

        return mirror;
      })
    ).then((mirrorStyles) => {
      const filtered = mirrorStyles.filter(
        (el) => typeof el !== "undefined"
      ) as HTMLStyleElement[];

      filtered.forEach((mirror) => {
        mirror.onload = () => {
          stylesLoaded = stylesLoaded + 1;

          if (stylesLoaded >= elements.length) {
            onStylesLoaded();
          }
        };
        mirror.onerror = () => {
          console.warn(`AutoFrame couldn't load a stylesheet`);
          stylesLoaded = stylesLoaded + 1;

          if (stylesLoaded >= elements.length) {
            onStylesLoaded();
          }
        };
      });

      // Reset HTML (inside the promise) so in case running twice (i.e. for React Strict mode)
      doc.head.innerHTML = "";

      // Inject initial values in bulk
      doc.head.append(...filtered);

      observer.observe(parentDocument.head, { childList: true, subtree: true });

      filtered.forEach((el) => {
        const elHash = hash(el.outerHTML);

        hashes[elHash] = true;
      });
    });

    return () => {
      observer.disconnect();
    };
  }, []);

  return <>{children}</>;
};

export type AutoFrameProps = {
  children: ReactNode;
  className: string;
  debug?: boolean;
  id?: string;
  onReady?: () => void;
  onNotReady?: () => void;
  frameRef: RefObject<HTMLIFrameElement | null>;
};

type AutoFrameContext = {
  document?: Document;
  window?: Window;
};

export const autoFrameContext = createContext<AutoFrameContext>({});

export const useFrame = () => useContext(autoFrameContext);

function AutoFrame({
  children,
  className,
  debug,
  id,
  onReady = () => {},
  onNotReady = () => {},
  frameRef,
  ...props
}: AutoFrameProps) {
  const [loaded, setLoaded] = useState(false);
  const [ctx, setCtx] = useState<AutoFrameContext>({});
  const [mountTarget, setMountTarget] = useState<HTMLElement | null>();
  const [stylesLoaded, setStylesLoaded] = useState(false);

  useEffect(() => {
    if (frameRef.current) {
      const doc = frameRef.current.contentDocument;
      const win = frameRef.current.contentWindow;

      setCtx({
        document: doc || undefined,
        window: win || undefined,
      });

      setMountTarget(
        frameRef.current.contentDocument?.getElementById("frame-root")
      );

      if (doc && win && stylesLoaded) {
        onReady();
      } else {
        onNotReady();
      }
    }
  }, [frameRef, loaded, stylesLoaded]);

  return (
    <iframe
      {...props}
      className={className}
      id={id}
      srcDoc='<!DOCTYPE html><html><head></head><body><div id="frame-root" data-puck-entry></div></body></html>'
      ref={frameRef}
      onLoad={() => {
        setLoaded(true);
      }}
    >
      <autoFrameContext.Provider value={ctx}>
        {loaded && mountTarget && (
          <CopyHostStyles
            debug={debug}
            onStylesLoaded={() => setStylesLoaded(true)}
          >
            {createPortal(children, mountTarget)}
          </CopyHostStyles>
        )}
      </autoFrameContext.Provider>
    </iframe>
  );
}

AutoFrame.displayName = "AutoFrame";

export default AutoFrame;



================================================
FILE: packages/core/components/Button/Button.module.css
================================================
.Button {
  appearance: none;
  background: none;
  border: 1px solid transparent;
  border-radius: 4px;
  color: var(--puck-color-white);
  display: inline-flex;
  align-items: center;
  gap: 8px;
  letter-spacing: 0.05ch;
  font-family: var(--puck-font-family);
  font-size: 14px;
  font-weight: 400;
  box-sizing: border-box;
  line-height: 1;
  text-align: center;
  text-decoration: none;
  transition: background-color 50ms ease-in;
  cursor: pointer;
  white-space: nowrap;
  margin: 0;
}

.Button:hover,
.Button:active {
  transition: none;
}

.Button--medium {
  min-height: 34px;
  padding-bottom: 7px;
  padding-inline-start: 19px;
  padding-inline-end: 19px;
  padding-top: 7px;
}

.Button--large {
  padding-bottom: 11px;
  padding-inline-start: 19px;
  padding-inline-end: 19px;
  padding-top: 11px;
}

.Button-icon {
  margin-top: 2px;
}

.Button--primary {
  background: var(--puck-color-azure-04);
}

.Button:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
}

@media (hover: hover) and (pointer: fine) {
  .Button--primary:hover {
    background-color: var(--puck-color-azure-03);
  }
}

.Button--primary:active {
  background-color: var(--puck-color-azure-02);
}

.Button--secondary {
  border: 1px solid currentColor;
  color: currentColor;
}

@media (hover: hover) and (pointer: fine) {
  .Button--secondary:hover {
    background-color: var(--puck-color-azure-12);
    color: var(--puck-color-black);
  }
}

.Button--secondary:active {
  background-color: var(--puck-color-azure-11);
  color: var(--puck-color-black);
}

.Button--flush {
  border-radius: 0;
}

.Button--disabled,
.Button--disabled:hover {
  background-color: var(--puck-color-grey-07);
  color: var(--puck-color-grey-03);
  cursor: not-allowed;
}

.Button--fullWidth {
  justify-content: center;
  width: 100%;
}

.Button-spinner {
  padding-inline-start: 8px;
}



================================================
FILE: packages/core/components/Button/Button.tsx
================================================
"use client";

import { ReactNode, useEffect, useState } from "react";
import styles from "./Button.module.css";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { Loader } from "../Loader";
import { filterDataAttrs } from "../../lib/filter-data-attrs";

const getClassName = getClassNameFactory("Button", styles);

export const Button = ({
  children,
  href,
  onClick,
  variant = "primary",
  type,
  disabled,
  tabIndex,
  newTab,
  fullWidth,
  icon,
  size = "medium",
  loading: loadingProp = false,
  ...props
}: {
  children: ReactNode;
  href?: string;
  onClick?: (e: any) => void | Promise<void>;
  variant?: "primary" | "secondary";
  type?: "button" | "submit" | "reset";
  disabled?: boolean;
  tabIndex?: number;
  newTab?: boolean;
  fullWidth?: boolean;
  icon?: ReactNode;
  size?: "medium" | "large";
  loading?: boolean;
}) => {
  const [loading, setLoading] = useState(loadingProp);

  useEffect(() => setLoading(loadingProp), [loadingProp]);

  const ElementType = href ? "a" : type ? "button" : "span";
  const dataAttrs = filterDataAttrs(props);

  const el = (
    <ElementType
      className={getClassName({
        primary: variant === "primary",
        secondary: variant === "secondary",
        disabled,
        fullWidth,
        [size]: true,
      })}
      onClick={(e) => {
        if (!onClick) return;

        setLoading(true);
        Promise.resolve(onClick(e)).then(() => {
          setLoading(false);
        });
      }}
      type={type}
      disabled={disabled || loading}
      tabIndex={tabIndex}
      target={newTab ? "_blank" : undefined}
      rel={newTab ? "noreferrer" : undefined}
      href={href}
      {...dataAttrs}
    >
      {icon && <div className={getClassName("icon")}>{icon}</div>}
      {children}
      {loading && (
        <div className={getClassName("spinner")}>
          <Loader size={14} />
        </div>
      )}
    </ElementType>
  );

  return el;
};



================================================
FILE: packages/core/components/Button/index.ts
================================================
export * from "./Button";



================================================
FILE: packages/core/components/ComponentList/index.tsx
================================================
import styles from "./styles.module.css";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { ReactNode } from "react";
import { useAppStore } from "../../store";
import { ChevronDown, ChevronUp } from "lucide-react";
import { Drawer } from "../Drawer";

const getClassName = getClassNameFactory("ComponentList", styles);

const ComponentListItem = ({
  name,
  label,
}: {
  name: string;
  label?: string;
  index?: number; // TODO deprecate
}) => {
  const overrides = useAppStore((s) => s.overrides);
  const canInsert = useAppStore(
    (s) =>
      s.permissions.getPermissions({
        type: name,
      }).insert
  );

  return (
    <Drawer.Item label={label} name={name} isDragDisabled={!canInsert}>
      {overrides.componentItem}
    </Drawer.Item>
  );
};

const ComponentList = ({
  children,
  title,
  id,
}: {
  id: string;
  children?: ReactNode;
  title?: string;
}) => {
  const config = useAppStore((s) => s.config);
  const setUi = useAppStore((s) => s.setUi);
  const componentList = useAppStore((s) => s.state.ui.componentList);

  const { expanded = true } = componentList[id] || {};

  return (
    <div className={getClassName({ isExpanded: expanded })}>
      {title && (
        <button
          type="button"
          className={getClassName("title")}
          onClick={() =>
            setUi({
              componentList: {
                ...componentList,
                [id]: {
                  ...componentList[id],
                  expanded: !expanded,
                },
              },
            })
          }
          title={
            expanded
              ? `Collapse${title ? ` ${title}` : ""}`
              : `Expand${title ? ` ${title}` : ""}`
          }
        >
          <div>{title}</div>
          <div className={getClassName("titleIcon")}>
            {expanded ? <ChevronUp size={12} /> : <ChevronDown size={12} />}
          </div>
        </button>
      )}
      <div className={getClassName("content")}>
        <Drawer>
          {children ||
            Object.keys(config.components).map((componentKey) => {
              return (
                <ComponentListItem
                  key={componentKey}
                  label={
                    config.components[componentKey]["label"] ?? componentKey
                  }
                  name={componentKey}
                />
              );
            })}
        </Drawer>
      </div>
    </div>
  );
};

ComponentList.Item = ComponentListItem;

export { ComponentList };



================================================
FILE: packages/core/components/ComponentList/styles.module.css
================================================
.ComponentList {
  max-width: 100%;
}

.ComponentList--isExpanded + .ComponentList {
  margin-top: 12px;
}

.ComponentList-content {
  display: none;
}

.ComponentList--isExpanded > .ComponentList-content {
  display: block;
}

.ComponentList-title {
  background-color: transparent;
  border: 0;
  color: var(--puck-color-grey-05);
  cursor: pointer;
  display: flex;
  font: inherit;
  font-size: var(--puck-font-size-xxxs);
  list-style: none;
  margin-bottom: 6px;
  padding: 8px;
  text-transform: uppercase;
  transition: background-color 50ms ease-in, color 50ms ease-in;
  gap: 4px;
  border-radius: 4px;
  width: 100%;
}

.ComponentList-title:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
}

@media (hover: hover) and (pointer: fine) {
  .ComponentList-title:hover {
    background-color: var(--puck-color-azure-11);
    color: var(--puck-color-azure-04);
    transition: none;
  }
}

.ComponentList-title:active {
  background-color: var(--puck-color-azure-10);
  transition: none;
}

.ComponentList-titleIcon {
  margin-inline-start: auto;
}



================================================
FILE: packages/core/components/DefaultOverride/index.tsx
================================================
import { ReactNode } from "react";

export const DefaultOverride = ({ children }: { children?: ReactNode }) => (
  <>{children}</>
);



================================================
FILE: packages/core/components/DragDropContext/index.tsx
================================================
import { DragDropProvider } from "@dnd-kit/react";
import { useAppStore, useAppStoreApi } from "../../store";
import {
  createContext,
  Dispatch,
  ReactNode,
  SetStateAction,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";
import { AutoScroller, defaultPreset, DragDropManager } from "@dnd-kit/dom";
import { DragDropEvents } from "@dnd-kit/abstract";
import { DropZoneProvider } from "../DropZone";
import type { Draggable, Droppable } from "@dnd-kit/dom";
import { getItem } from "../../lib/data/get-item";
import {
  DropZoneContext,
  Preview,
  ZoneStore,
  ZoneStoreProvider,
} from "../DropZone/context";
import { createNestedDroppablePlugin } from "../../lib/dnd/NestedDroppablePlugin";
import { insertComponent } from "../../lib/insert-component";
import { useDebouncedCallback } from "use-debounce";
import { ComponentDndData } from "../DraggableComponent";

import { collisionStore } from "../../lib/dnd/collision/dynamic/store";
import { generateId } from "../../lib/generate-id";
import { createStore } from "zustand";
import { getDeepDir } from "../../lib/get-deep-dir";
import { useSensors } from "../../lib/dnd/use-sensors";
import { useSafeId } from "../../lib/use-safe-id";
import { getFrame } from "../../lib/get-frame";
import { effect } from "@dnd-kit/state";

const DEBUG = false;

type Events = DragDropEvents<Draggable, Droppable, DragDropManager>;
type DragCbs = Partial<{ [eventName in keyof Events]: Events[eventName][] }>;

const dragListenerContext = createContext<{
  dragListeners: DragCbs;
  setDragListeners?: Dispatch<SetStateAction<DragCbs>>;
}>({
  dragListeners: {},
});

type EventKeys = keyof Events;

export function useDragListener(
  type: EventKeys,
  fn: Events[EventKeys],
  deps: any[] = []
) {
  const { setDragListeners } = useContext(dragListenerContext);

  useEffect(() => {
    if (setDragListeners) {
      setDragListeners((old) => ({
        ...old,
        [type]: [...(old[type] || []), fn],
      }));
    }
  }, deps);
}

type DeepestParams = {
  zone: string | null;
  area: string | null;
};

const AREA_CHANGE_DEBOUNCE_MS = 100;

type DragDropContextProps = {
  children: ReactNode;
  disableAutoScroll?: boolean;
};

/**
 * Temporarily disable fallback collisions types, which
 * can cause issues during a zone switch.
 *
 * @param timeout the time in ms to disable the fallback collision for
 * @returns a function that temporarily disables the collision
 */
const useTempDisableFallback = (timeout: number) => {
  const lastFallbackDisable = useRef<string>(null);

  return useCallback((manager: DragDropManager) => {
    collisionStore.setState({ fallbackEnabled: false });

    // Track an ID in case called more than once, so only last call re-enables
    const fallbackId = generateId();
    lastFallbackDisable.current = fallbackId;

    setTimeout(() => {
      if (lastFallbackDisable.current === fallbackId) {
        collisionStore.setState({ fallbackEnabled: true });
        manager.collisionObserver.forceUpdate(true);
      }
    }, timeout);
  }, []);
};

const DragDropContextClient = ({
  children,
  disableAutoScroll,
}: DragDropContextProps) => {
  const dispatch = useAppStore((s) => s.dispatch);
  const appStore = useAppStoreApi();

  const id = useSafeId();

  const debouncedParamsRef = useRef<DeepestParams | null>(null);

  const tempDisableFallback = useTempDisableFallback(100);

  const [zoneStore] = useState(() =>
    createStore<ZoneStore>(() => ({
      zoneDepthIndex: {},
      nextZoneDepthIndex: {},
      areaDepthIndex: {},
      nextAreaDepthIndex: {},
      draggedItem: null,
      previewIndex: {},
      enabledIndex: {},
      hoveringComponent: null,
    }))
  );

  const getChanged = useCallback(
    (params: DeepestParams, id: string) => {
      const { zoneDepthIndex = {}, areaDepthIndex = {} } =
        zoneStore.getState() || {};

      const stateHasZone = Object.keys(zoneDepthIndex).length > 0;
      const stateHasArea = Object.keys(areaDepthIndex).length > 0;

      let zoneChanged = false;
      let areaChanged = false;

      if (params.zone && !zoneDepthIndex[params.zone]) {
        zoneChanged = true;
      } else if (!params.zone && stateHasZone) {
        zoneChanged = true;
      }

      if (params.area && !areaDepthIndex[params.area]) {
        areaChanged = true;
      } else if (!params.area && stateHasArea) {
        areaChanged = true;
      }

      return { zoneChanged, areaChanged };
    },
    [zoneStore]
  );

  const setDeepestAndCollide = useCallback(
    (params: DeepestParams, manager: DragDropManager) => {
      const { zoneChanged, areaChanged } = getChanged(params, id);

      if (!zoneChanged && !areaChanged) return;

      zoneStore.setState({
        zoneDepthIndex: params.zone ? { [params.zone]: true } : {},
        areaDepthIndex: params.area ? { [params.area]: true } : {},
      });

      // Disable fallback collisions temporarily after zone change,
      // as these can cause unexpected collisions
      tempDisableFallback(manager);

      setTimeout(() => {
        // Force update after debounce
        manager.collisionObserver.forceUpdate(true);
      }, 50);

      debouncedParamsRef.current = null;
    },
    [zoneStore]
  );

  const setDeepestDb = useDebouncedCallback(
    setDeepestAndCollide,
    AREA_CHANGE_DEBOUNCE_MS
  );

  const cancelDb = () => {
    setDeepestDb.cancel();
    debouncedParamsRef.current = null;
  };

  useEffect(() => {
    if (DEBUG) {
      zoneStore.subscribe((s) =>
        console.log(
          s.previewIndex,
          Object.entries(s.zoneDepthIndex || {})[0]?.[0],
          Object.entries(s.areaDepthIndex || {})[0]?.[0]
        )
      );
    }
  }, []);

  const [plugins] = useState(() => [
    ...(disableAutoScroll
      ? defaultPreset.plugins.filter((plugin) => plugin !== AutoScroller)
      : defaultPreset.plugins),
    createNestedDroppablePlugin(
      {
        onChange: (params, manager) => {
          const state = zoneStore.getState();

          const { zoneChanged, areaChanged } = getChanged(params, id);

          const isDragging = manager.dragOperation.status.dragging;

          if (areaChanged || zoneChanged) {
            let nextZoneDepthIndex: Record<string, boolean> = {};
            let nextAreaDepthIndex: Record<string, boolean> = {};

            if (params.zone) {
              nextZoneDepthIndex = { [params.zone]: true };
            }

            if (params.area) {
              nextAreaDepthIndex = { [params.area]: true };
            }

            zoneStore.setState({ nextZoneDepthIndex, nextAreaDepthIndex });
          }

          if (params.zone !== "void" && state?.zoneDepthIndex["void"]) {
            setDeepestAndCollide(params, manager);
            return;
          }

          if (areaChanged) {
            if (isDragging) {
              // Only call the debounced function if these params differ from the last pending call
              const debouncedParams = debouncedParamsRef.current;
              const isSameParams =
                debouncedParams &&
                debouncedParams.area === params.area &&
                debouncedParams.zone === params.zone;

              if (!isSameParams) {
                cancelDb(); // NB we always cancel the debounce if the params change, so we could just use a timer
                setDeepestDb(params, manager);
                debouncedParamsRef.current = params;
              }
            } else {
              cancelDb();
              setDeepestAndCollide(params, manager);
            }

            return;
          }

          if (zoneChanged) {
            setDeepestAndCollide(params, manager);
          }

          cancelDb();
        },
      },
      id
    ),
  ]);

  const sensors = useSensors();

  const [dragListeners, setDragListeners] = useState<DragCbs>({});

  const dragMode = useRef<"new" | "existing" | null>(null);

  const initialSelector = useRef<{ zone: string; index: number }>(undefined);

  const nextContextValue = useMemo<DropZoneContext>(
    () => ({
      mode: "edit",
      areaId: "root",
      depth: 0,
    }),
    []
  );

  return (
    <div id={id}>
      <dragListenerContext.Provider
        value={{
          dragListeners,
          setDragListeners,
        }}
      >
        <DragDropProvider
          plugins={plugins}
          sensors={sensors}
          onDragEnd={(event, manager) => {
            const entryEl = getFrame()?.querySelector("[data-puck-entry]");
            entryEl?.removeAttribute("data-puck-dragging");

            const { source, target } = event.operation;

            if (!source) {
              zoneStore.setState({ draggedItem: null });

              return;
            }

            const { zone, index } = source.data as ComponentDndData;

            const { previewIndex = {} } = zoneStore.getState() || {};

            const thisPreview: Preview | null =
              previewIndex[zone]?.props.id === source.id
                ? previewIndex[zone]
                : null;

            const onAnimationEnd = () => {
              zoneStore.setState({ draggedItem: null });

              // Tidy up cancellation
              if (event.canceled || target?.type === "void") {
                zoneStore.setState({ previewIndex: {} });

                dragListeners.dragend?.forEach((fn) => {
                  fn(event, manager);
                });

                dispatch({
                  type: "setUi",
                  ui: {
                    itemSelector: null,
                    isDragging: false,
                  },
                });

                return;
              }

              // Finalise the drag
              if (thisPreview) {
                zoneStore.setState({ previewIndex: {} });

                if (thisPreview.type === "insert") {
                  insertComponent(
                    thisPreview.componentType,
                    thisPreview.zone,
                    thisPreview.index,
                    appStore.getState()
                  );
                } else if (initialSelector.current) {
                  dispatch({
                    type: "move",
                    sourceIndex: initialSelector.current.index,
                    sourceZone: initialSelector.current.zone,
                    destinationIndex: thisPreview.index,
                    destinationZone: thisPreview.zone,
                    recordHistory: false,
                  });
                }
              }

              dispatch({
                type: "setUi",
                ui: {
                  itemSelector: { index, zone },
                  isDragging: false,
                },
                recordHistory: true,
              });

              dragListeners.dragend?.forEach((fn) => {
                fn(event, manager);
              });
            };

            // Delay insert until animation has finished
            let dispose: () => void | undefined;

            dispose = effect(() => {
              if (source.status === "idle") {
                onAnimationEnd();
                dispose?.();
              }
            });
          }}
          onDragOver={(event, manager) => {
            // Prevent the optimistic re-ordering
            event.preventDefault();

            const draggedItem = zoneStore.getState()?.draggedItem;

            // Drag end can sometimes trigger after drag
            if (!draggedItem) return;

            // Cancel any stale debounces
            cancelDb();

            const { source, target } = event.operation;

            if (!target || !source || target.type === "void") return;

            const [sourceId] = (source.id as string).split(":");
            const [targetId] = (target.id as string).split(":");

            const sourceData = source.data as ComponentDndData;

            let sourceZone = sourceData.zone;
            let sourceIndex = sourceData.index;

            let targetZone = "";
            let targetIndex = 0;

            if (target.type === "component") {
              const targetData = target.data as ComponentDndData;

              targetZone = targetData.zone;
              targetIndex = targetData.index;

              const collisionData =
                manager.collisionObserver.collisions[0]?.data;

              const dir = getDeepDir(target.element);

              const collisionPosition =
                collisionData?.direction === "up" ||
                (dir === "ltr" && collisionData?.direction === "left") ||
                (dir === "rtl" && collisionData?.direction === "right")
                  ? "before"
                  : "after";

              if (targetIndex >= sourceIndex && sourceZone === targetZone) {
                targetIndex = targetIndex - 1;
              }

              if (collisionPosition === "after") {
                targetIndex = targetIndex + 1;
              }
            } else {
              targetZone = target.id.toString();
              targetIndex = 0;
            }

            const path =
              appStore.getState().state.indexes.nodes[target.id]?.path || [];

            // Abort if dragging over self or descendant
            if (
              targetId === sourceId ||
              path.find((path) => {
                const [pathId] = (path as string).split(":");
                return pathId === sourceId;
              })
            ) {
              return;
            }

            if (dragMode.current === "new") {
              zoneStore.setState({
                previewIndex: {
                  [targetZone]: {
                    componentType: sourceData.componentType,
                    type: "insert",
                    index: targetIndex,
                    zone: targetZone,
                    props: {
                      id: source.id.toString(),
                    },
                  },
                },
              });
            } else {
              if (!initialSelector.current) {
                initialSelector.current = {
                  zone: sourceData.zone,
                  index: sourceData.index,
                };
              }

              const item = getItem(
                initialSelector.current,
                appStore.getState().state
              );

              if (item) {
                zoneStore.setState({
                  previewIndex: {
                    [targetZone]: {
                      componentType: sourceData.componentType,
                      type: "move",
                      index: targetIndex,
                      zone: targetZone,
                      props: item.props,
                    },
                  },
                });
              }
            }

            dragListeners.dragover?.forEach((fn) => {
              fn(event, manager);
            });
          }}
          onDragStart={(event, manager) => {
            const { source } = event.operation;

            if (source && source.type !== "void") {
              const sourceData = source.data as ComponentDndData;

              const item = getItem(
                {
                  zone: sourceData.zone,
                  index: sourceData.index,
                },
                appStore.getState().state
              );

              if (item) {
                zoneStore.setState({
                  previewIndex: {
                    [sourceData.zone]: {
                      componentType: sourceData.componentType,
                      type: "move",
                      index: sourceData.index,
                      zone: sourceData.zone,
                      props: item.props,
                    },
                  },
                });
              }
            }

            dragListeners.dragstart?.forEach((fn) => {
              fn(event, manager);
            });
          }}
          onBeforeDragStart={(event) => {
            const isNewComponent = event.operation.source?.type === "drawer";

            dragMode.current = isNewComponent ? "new" : "existing";
            initialSelector.current = undefined;

            zoneStore.setState({ draggedItem: event.operation.source });

            if (
              appStore.getState().selectedItem?.props.id !==
              event.operation.source?.id
            ) {
              dispatch({
                type: "setUi",
                ui: {
                  itemSelector: null,
                  isDragging: true,
                },
                recordHistory: false,
              });
            } else {
              dispatch({
                type: "setUi",
                ui: {
                  isDragging: true,
                },
                recordHistory: false,
              });
            }

            const entryEl = getFrame()?.querySelector("[data-puck-entry]");
            entryEl?.setAttribute("data-puck-dragging", "true");
          }}
        >
          <ZoneStoreProvider store={zoneStore}>
            <DropZoneProvider value={nextContextValue}>
              {children}
            </DropZoneProvider>
          </ZoneStoreProvider>
        </DragDropProvider>
      </dragListenerContext.Provider>
    </div>
  );
};

export const DragDropContext = ({
  children,
  disableAutoScroll,
}: DragDropContextProps) => {
  const status = useAppStore((s) => s.status);

  if (status === "LOADING") {
    return children;
  }

  return (
    <DragDropContextClient disableAutoScroll={disableAutoScroll}>
      {children}
    </DragDropContextClient>
  );
};



================================================
FILE: packages/core/components/DraggableComponent/index.tsx
================================================
import {
  CSSProperties,
  ReactNode,
  Ref,
  SyntheticEvent,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState,
  useTransition,
} from "react";
import styles from "./styles.module.css";
import "./styles.css";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { Copy, CornerLeftUp, Trash } from "lucide-react";
import { useAppStore, useAppStoreApi } from "../../store";
import { Loader } from "../Loader";
import { ActionBar } from "../ActionBar";

import { createPortal } from "react-dom";

import { dropZoneContext, DropZoneProvider } from "../DropZone";
import { createDynamicCollisionDetector } from "../../lib/dnd/collision/dynamic";
import { DragAxis } from "../../types";
import { UniqueIdentifier } from "@dnd-kit/abstract";
import { getDeepScrollPosition } from "../../lib/get-deep-scroll-position";
import { DropZoneContext, ZoneStoreContext } from "../DropZone/context";
import { useShallow } from "zustand/react/shallow";
import { getItem } from "../../lib/data/get-item";
import { useSortable } from "@dnd-kit/react/sortable";
import { accumulateTransform } from "../../lib/accumulate-transform";
import { useContextStore } from "../../lib/use-context-store";
import { useOnDragFinished } from "../../lib/dnd/use-on-drag-finished";

const getClassName = getClassNameFactory("DraggableComponent", styles);

const DEBUG = false;

// Magic numbers are used to position actions overlay 8px from top of component, bottom of component (when sticky scrolling) and side of preview
const space = 8;
const actionsOverlayTop = space * 6.5;
const actionsTop = -(actionsOverlayTop - 8);
const actionsSide = space;

const DefaultActionBar = ({
  label,
  children,
  parentAction,
}: {
  label: string | undefined;
  children: ReactNode;
  parentAction: ReactNode;
}) => (
  <ActionBar>
    <ActionBar.Group>
      {parentAction}
      {label && <ActionBar.Label label={label} />}
    </ActionBar.Group>
    <ActionBar.Group>{children}</ActionBar.Group>
  </ActionBar>
);

export type ComponentDndData = {
  areaId?: string;
  zone: string;
  index: number;
  componentType: string;
  containsActiveZone: boolean;
  depth: number;
  path: UniqueIdentifier[];
  inDroppableZone: boolean;
};

export const DraggableComponent = ({
  children,
  depth,
  componentType,
  id,
  index,
  zoneCompound,
  isLoading = false,
  isSelected = false,
  debug,
  label,
  autoDragAxis,
  userDragAxis,
  inDroppableZone = true,
}: {
  children: (ref: Ref<any>) => ReactNode;
  componentType: string;
  depth: number;
  id: string;
  index: number;
  zoneCompound: string;
  isSelected?: boolean;
  debug?: string;
  label?: string;
  isLoading: boolean;
  autoDragAxis: DragAxis;
  userDragAxis?: DragAxis;
  inDroppableZone: boolean;
}) => {
  const zoom = useAppStore((s) =>
    s.selectedItem?.props.id === id ? s.zoomConfig.zoom : 1
  );
  const overrides = useAppStore((s) => s.overrides);
  const dispatch = useAppStore((s) => s.dispatch);
  const iframe = useAppStore((s) => s.iframe);

  const ctx = useContext(dropZoneContext);

  const [localZones, setLocalZones] = useState<Record<string, boolean>>({});

  const registerLocalZone = useCallback(
    (zoneCompound: string, active: boolean) => {
      // Propagate local zone
      ctx?.registerLocalZone?.(zoneCompound, active);

      setLocalZones((obj) => ({
        ...obj,
        [zoneCompound]: active,
      }));
    },
    [setLocalZones]
  );

  const unregisterLocalZone = useCallback(
    (zoneCompound: string) => {
      // Propagate local zone
      ctx?.unregisterLocalZone?.(zoneCompound);

      setLocalZones((obj) => {
        const newLocalZones = {
          ...obj,
        };

        delete newLocalZones[zoneCompound];

        return newLocalZones;
      });
    },
    [setLocalZones]
  );

  const containsActiveZone =
    Object.values(localZones).filter(Boolean).length > 0;

  const path = useAppStore(useShallow((s) => s.state.indexes.nodes[id]?.path));
  const permissions = useAppStore(
    useShallow((s) => {
      const item = getItem({ index, zone: zoneCompound }, s.state);

      return s.permissions.getPermissions({ item });
    })
  );

  const zoneStore = useContext(ZoneStoreContext);

  const [dragAxis, setDragAxis] = useState(userDragAxis || autoDragAxis);

  const dynamicCollisionDetector = useMemo(
    () => createDynamicCollisionDetector(dragAxis),
    [dragAxis]
  );

  const {
    ref: sortableRef,
    isDragging: thisIsDragging,
    sortable,
  } = useSortable<ComponentDndData>({
    id,
    index,
    group: zoneCompound,
    type: "component",
    data: {
      areaId: ctx?.areaId,
      zone: zoneCompound,
      index,
      componentType,
      containsActiveZone,
      depth,
      path: path || [],
      inDroppableZone,
    },
    collisionPriority: depth,
    collisionDetector: dynamicCollisionDetector,
    // "Out of the way" transition from react-beautiful-dnd
    transition: {
      duration: 200,
      easing: "cubic-bezier(0.2, 0, 0, 1)",
    },
    feedback: "clone",
  });

  useEffect(() => {
    const isEnabled = zoneStore.getState().enabledIndex[zoneCompound];

    sortable.droppable.disabled = !isEnabled;
    sortable.draggable.disabled = !permissions.drag;

    const cleanup = zoneStore.subscribe((s) => {
      sortable.droppable.disabled = !s.enabledIndex[zoneCompound];
    });

    if (ref.current && !permissions.drag) {
      ref.current.setAttribute("data-puck-disabled", "");

      return () => {
        ref.current?.removeAttribute("data-puck-disabled");
        cleanup();
      };
    }

    return cleanup;
  }, [permissions.drag, zoneCompound]);

  const ref = useRef<HTMLElement>(null);

  const refSetter = useCallback(
    (el: HTMLElement | null) => {
      sortableRef(el);

      if (el) {
        ref.current = el;
      }
    },
    [sortableRef]
  );

  const [portalEl, setPortalEl] = useState<HTMLElement>();

  useEffect(() => {
    setPortalEl(
      iframe.enabled
        ? ref.current?.ownerDocument.body
        : ref.current?.closest<HTMLElement>("[data-puck-preview]") ??
            document.body
    );
  }, [iframe.enabled, ref.current]);

  const getStyle = useCallback(() => {
    if (!ref.current) return;

    const rect = ref.current!.getBoundingClientRect();
    const deepScrollPosition = getDeepScrollPosition(ref.current);

    const portalContainerEl = iframe.enabled
      ? null
      : ref.current?.closest<HTMLElement>("[data-puck-preview]");

    const portalContainerRect = portalContainerEl?.getBoundingClientRect();
    const portalScroll = portalContainerEl
      ? getDeepScrollPosition(portalContainerEl)
      : { x: 0, y: 0 };

    const scroll = {
      x:
        deepScrollPosition.x -
        portalScroll.x -
        (portalContainerRect?.left ?? 0),
      y:
        deepScrollPosition.y - portalScroll.y - (portalContainerRect?.top ?? 0),
    };

    const untransformed = {
      height: ref.current.offsetHeight,
      width: ref.current.offsetWidth,
    };

    const transform = accumulateTransform(ref.current);

    const style: CSSProperties = {
      left: `${(rect.left + scroll.x) / transform.scaleX}px`,
      top: `${(rect.top + scroll.y) / transform.scaleY}px`,
      height: `${untransformed.height}px`,
      width: `${untransformed.width}px`,
    };

    return style;
  }, [ref.current]);

  const [style, setStyle] = useState<CSSProperties>();

  const sync = useCallback(() => {
    setStyle(getStyle());
  }, [ref.current, iframe]);

  useEffect(() => {
    if (ref.current) {
      const observer = new ResizeObserver(sync);

      observer.observe(ref.current);

      return () => {
        observer.disconnect();
      };
    }
  }, [ref.current]);

  const registerNode = useAppStore((s) => s.nodes.registerNode);

  const hideOverlay = useCallback(() => {
    setIsVisible(false);
  }, []);

  const showOverlay = useCallback(() => {
    setIsVisible(true);
  }, []);

  useEffect(() => {
    registerNode(id, {
      methods: { sync, showOverlay, hideOverlay },
      element: ref.current ?? null,
    });

    return () => {
      registerNode(id, {
        methods: {
          sync: () => null,
          hideOverlay: () => null,
          showOverlay: () => null,
        },
        element: null,
      });
    };
  }, [id, zoneCompound, index, componentType, sync]);

  const CustomActionBar = useMemo(
    () => overrides.actionBar || DefaultActionBar,
    [overrides.actionBar]
  );

  const onClick = useCallback(
    (e: Event | SyntheticEvent) => {
      e.stopPropagation();

      dispatch({
        type: "setUi",
        ui: {
          itemSelector: { index, zone: zoneCompound },
        },
      });
    },
    [index, zoneCompound, id]
  );

  const appStore = useAppStoreApi();

  const onSelectParent = useCallback(() => {
    const { nodes, zones } = appStore.getState().state.indexes;
    const node = nodes[id];

    const parentNode = node?.parentId ? nodes[node?.parentId] : null;

    if (!parentNode || !node.parentId) {
      return;
    }

    const parentZoneCompound = `${parentNode.parentId}:${parentNode.zone}`;

    const parentIndex = zones[parentZoneCompound].contentIds.indexOf(
      node.parentId
    );

    dispatch({
      type: "setUi",
      ui: {
        itemSelector: {
          zone: parentZoneCompound,
          index: parentIndex,
        },
      },
    });
  }, [ctx, path]);

  const onDuplicate = useCallback(() => {
    dispatch({
      type: "duplicate",
      sourceIndex: index,
      sourceZone: zoneCompound,
    });
  }, [index, zoneCompound]);

  const onDelete = useCallback(() => {
    dispatch({
      type: "remove",
      index: index,
      zone: zoneCompound,
    });
  }, [index, zoneCompound]);

  const [hover, setHover] = useState(false);

  const indicativeHover = useContextStore(
    ZoneStoreContext,
    (s) => s.hoveringComponent === id
  );

  useEffect(() => {
    if (!ref.current) {
      return;
    }

    const el = ref.current as HTMLElement;

    const _onMouseOver = (e: Event) => {
      const userIsDragging = !!zoneStore.getState().draggedItem;

      if (userIsDragging) {
        // User is dragging, and dragging this item
        if (thisIsDragging) {
          setHover(true);
        } else {
          setHover(false);
        }
      } else {
        setHover(true);
      }

      e.stopPropagation();
    };

    const _onMouseOut = (e: Event) => {
      e.stopPropagation();

      setHover(false);
    };

    el.setAttribute("data-puck-component", id);
    el.setAttribute("data-puck-dnd", id);
    el.style.position = "relative";
    el.addEventListener("click", onClick);
    el.addEventListener("mouseover", _onMouseOver);
    el.addEventListener("mouseout", _onMouseOut);

    return () => {
      el.removeAttribute("data-puck-component");
      el.removeAttribute("data-puck-dnd");
      el.removeEventListener("click", onClick);
      el.removeEventListener("mouseover", _onMouseOver);
      el.removeEventListener("mouseout", _onMouseOut);
    };
  }, [
    ref,
    onClick,
    containsActiveZone,
    zoneCompound,
    id,
    thisIsDragging,
    inDroppableZone,
  ]);

  const [isVisible, setIsVisible] = useState(false);
  const [dragFinished, setDragFinished] = useState(true);
  const [_, startTransition] = useTransition();

  useEffect(() => {
    startTransition(() => {
      if (hover || indicativeHover || isSelected) {
        sync();
        setIsVisible(true);
        setThisWasDragging(false);
      } else {
        setIsVisible(false);
      }
    });
  }, [hover, indicativeHover, isSelected, iframe]);

  const [thisWasDragging, setThisWasDragging] = useState(false);

  const onDragFinished = useOnDragFinished((finished) => {
    if (finished) {
      startTransition(() => {
        sync();
        setDragFinished(true);
      });
    } else {
      setDragFinished(false);
    }
  });

  useEffect(() => {
    if (thisIsDragging) {
      setThisWasDragging(true);
    }
  }, [thisIsDragging]);

  useEffect(() => {
    if (thisWasDragging) return onDragFinished();
  }, [thisWasDragging, onDragFinished]);

  const syncActionsPosition = useCallback(
    (el: HTMLDivElement | null | undefined) => {
      if (el) {
        const view = el.ownerDocument.defaultView;

        if (view) {
          const rect = el.getBoundingClientRect();

          const diffLeft = rect.x;
          const exceedsBoundsLeft = diffLeft < 0;
          const diffTop = rect.y;
          const exceedsBoundsTop = diffTop < 0;

          // Modify position if it spills over frame
          if (exceedsBoundsLeft) {
            el.style.transformOrigin = "left top";
            el.style.left = "0px";
          }

          if (exceedsBoundsTop) {
            el.style.top = "12px";
            if (!exceedsBoundsLeft) {
              el.style.transformOrigin = "right top";
            }
          }
        }
      }
    },
    [zoom]
  );

  useEffect(() => {
    if (userDragAxis) {
      setDragAxis(userDragAxis);
      return;
    }

    if (ref.current) {
      const computedStyle = window.getComputedStyle(ref.current);

      if (
        computedStyle.display === "inline" ||
        computedStyle.display === "inline-block"
      ) {
        setDragAxis("x");

        return;
      }
    }

    setDragAxis(autoDragAxis);
  }, [ref, userDragAxis, autoDragAxis]);

  const parentAction = useMemo(
    () =>
      ctx?.areaId &&
      ctx?.areaId !== "root" && (
        <ActionBar.Action onClick={onSelectParent} label="Select parent">
          <CornerLeftUp size={16} />
        </ActionBar.Action>
      ),
    [ctx?.areaId]
  );

  const nextContextValue = useMemo<DropZoneContext>(
    () => ({
      ...ctx!,
      areaId: id,
      zoneCompound,
      index,
      depth: depth + 1,
      registerLocalZone,
      unregisterLocalZone,
    }),
    [
      ctx,
      id,
      zoneCompound,
      index,
      depth,
      registerLocalZone,
      unregisterLocalZone,
    ]
  );

  return (
    <DropZoneProvider value={nextContextValue}>
      {dragFinished &&
        isVisible &&
        createPortal(
          <div
            className={getClassName({
              isSelected,
              isDragging: thisIsDragging,
              hover: hover || indicativeHover,
            })}
            style={{ ...style }}
            data-puck-overlay
          >
            {debug}
            {isLoading && (
              <div className={getClassName("loadingOverlay")}>
                <Loader />
              </div>
            )}
            <div
              className={getClassName("actionsOverlay")}
              style={{
                top: actionsOverlayTop / zoom,
              }}
            >
              <div
                className={getClassName("actions")}
                style={{
                  transform: `scale(${1 / zoom}`,
                  top: actionsTop / zoom,
                  right: 0,
                  paddingLeft: actionsSide,
                  paddingRight: actionsSide,
                }}
                ref={syncActionsPosition}
              >
                <CustomActionBar
                  parentAction={parentAction}
                  label={DEBUG ? id : label}
                >
                  {permissions.duplicate && (
                    <ActionBar.Action onClick={onDuplicate} label="Duplicate">
                      <Copy size={16} />
                    </ActionBar.Action>
                  )}
                  {permissions.delete && (
                    <ActionBar.Action onClick={onDelete} label="Delete">
                      <Trash size={16} />
                    </ActionBar.Action>
                  )}
                </CustomActionBar>
              </div>
            </div>
            <div className={getClassName("overlay")} />
          </div>,
          portalEl || document.body
        )}
      {children(refSetter)}
    </DropZoneProvider>
  );
};



================================================
FILE: packages/core/components/DraggableComponent/styles.css
================================================
/* Prevent user from interacting with underlying component */
[data-puck-component] * {
  pointer-events: none;
  user-select: none;
  -webkit-user-select: none;
}

[data-puck-component] {
  cursor: grab;
  pointer-events: auto !important;
  user-select: none;
  -webkit-user-select: none;
}

[data-puck-dropzone] {
  pointer-events: auto !important; /* Ensure DropZones still capture pointer events inside data-puck-components so elementsFromPoint triggers */
}

[data-puck-disabled] {
  cursor: pointer;
}

/* Placeholder */
[data-dnd-placeholder] {
  background: var(--puck-color-azure-06) !important;
  border: none !important;
  color: #00000000 !important;
  opacity: 0.3 !important;
  outline: none !important;
  transition: none !important;
}

[data-dnd-placeholder] *,
[data-dnd-placeholder]::after,
[data-dnd-placeholder]::before {
  opacity: 0 !important;
}

[data-dnd-dragging][data-puck-component] {
  pointer-events: none !important;
  outline: 2px var(--puck-color-azure-09) solid !important;
  outline-offset: -2px !important;
}



================================================
FILE: packages/core/components/DraggableComponent/styles.module.css
================================================
.DraggableComponent {
  position: absolute;
  pointer-events: none;

  --overlay-background: color-mix(
    in srgb,
    var(--puck-color-azure-08) 30%,
    transparent
  );
}

.DraggableComponent-overlay {
  cursor: pointer;
  height: 100%;
  width: 100%;
  top: 0;
  outline: 2px var(--puck-color-azure-09) solid;
  outline-offset: -2px;
  position: absolute;
  pointer-events: none;
  box-sizing: border-box;
  z-index: 1;
}

.DraggableComponent:focus-visible > .DraggableComponent-overlay {
  outline: 1px solid var(--puck-color-azure-05);
}

.DraggableComponent-loadingOverlay {
  background: var(--puck-color-white);
  color: var(--puck-color-grey-03);
  border-radius: 4px;
  display: flex;
  padding: 8px;
  top: 8px;
  right: 8px;
  position: absolute;
  z-index: 1;
  pointer-events: all;
  box-sizing: border-box;
  opacity: 0.8;
  z-index: 1;
}

.DraggableComponent--hover:not(.DraggableComponent--isLocked)
  > .DraggableComponent-overlay {
  background: var(--overlay-background);
}

.DraggableComponent--hover > .DraggableComponent-overlay {
  outline: 2px var(--puck-color-azure-09) solid;
}

.DraggableComponent--isSelected > .DraggableComponent-overlay {
  outline-color: var(--puck-color-azure-07);
}

/* Won't work in FF */
.DraggableComponent:has(
    .DraggableComponent--hover > .DraggableComponent-overlay
  )
  > .DraggableComponent-overlay {
  display: none;
}

.DraggableComponent-actionsOverlay {
  position: sticky;
  opacity: 0;
  pointer-events: none;
  z-index: 2;
}

.DraggableComponent--isSelected .DraggableComponent-actionsOverlay {
  opacity: 1;
  pointer-events: auto;
}

.DraggableComponent-actions {
  position: absolute;
  width: auto;
  cursor: grab;
  display: flex;
  box-sizing: border-box;
  transform-origin: right top;
  min-height: 36px;
}



================================================
FILE: packages/core/components/DragIcon/index.tsx
================================================
import { getClassNameFactory } from "../../lib";

import styles from "./styles.module.css";

const getClassName = getClassNameFactory("DragIcon", styles);

export const DragIcon = ({ isDragDisabled }: { isDragDisabled?: boolean }) => (
  <div className={getClassName({ disabled: isDragDisabled })}>
    <svg viewBox="0 0 20 20" width="12" fill="currentColor">
      <path d="M7 2a2 2 0 1 0 .001 4.001A2 2 0 0 0 7 2zm0 6a2 2 0 1 0 .001 4.001A2 2 0 0 0 7 8zm0 6a2 2 0 1 0 .001 4.001A2 2 0 0 0 7 14zm6-8a2 2 0 1 0-.001-4.001A2 2 0 0 0 13 6zm0 2a2 2 0 1 0 .001 4.001A2 2 0 0 0 13 8zm0 6a2 2 0 1 0 .001 4.001A2 2 0 0 0 13 14z"></path>
    </svg>
  </div>
);



================================================
FILE: packages/core/components/DragIcon/styles.module.css
================================================
.DragIcon {
  color: var(--puck-color-grey-05);
  cursor: grab;
  padding: 4px;
  border-radius: 4px;
}

.DragIcon--disabled {
  cursor: no-drop;
}

@media (hover: hover) and (pointer: fine) {
  .DragIcon:not(.DragIcon--disabled):hover {
    color: var(--puck-color-azure-05);
    background-color: var(--puck-color-azure-12);
  }
}



================================================
FILE: packages/core/components/Drawer/index.tsx
================================================
import styles from "./styles.module.css";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { DragIcon } from "../DragIcon";
import { ReactElement, ReactNode, Ref, useMemo, useState } from "react";
import { generateId } from "../../lib/generate-id";
import { useDragListener } from "../DragDropContext";
import { useSafeId } from "../../lib/use-safe-id";
import { useDraggable, useDroppable } from "@dnd-kit/react";

const getClassName = getClassNameFactory("Drawer", styles);
const getClassNameItem = getClassNameFactory("DrawerItem", styles);

export const DrawerItemInner = ({
  children,
  name,
  label,
  dragRef,
  isDragDisabled,
}: {
  children?: (props: { children: ReactNode; name: string }) => ReactElement;
  name: string;
  label?: string;
  dragRef?: Ref<any>;
  isDragDisabled?: boolean;
}) => {
  const CustomInner = useMemo(
    () =>
      children ||
      (({ children }: { children: ReactNode; name: string }) => (
        <div className={getClassNameItem("default")}>{children}</div>
      )),
    [children]
  );

  return (
    <div
      className={getClassNameItem({ disabled: isDragDisabled })}
      ref={dragRef}
      onMouseDown={(e) => e.preventDefault()}
      data-testid={dragRef ? `drawer-item:${name}` : ""}
      data-puck-drawer-item
    >
      <CustomInner name={name}>
        <div className={getClassNameItem("draggableWrapper")}>
          <div className={getClassNameItem("draggable")}>
            <div className={getClassNameItem("name")}>{label ?? name}</div>
            <div className={getClassNameItem("icon")}>
              <DragIcon />
            </div>
          </div>
        </div>
      </CustomInner>
    </div>
  );
};

/**
 * Wrap `useDraggable`, remounting it when the `id` changes.
 *
 * Could be removed by remounting `useDraggable` upstream in dndkit on `id` changes.
 */
const DrawerItemDraggable = ({
  children,
  name,
  label,
  id,
  isDragDisabled,
}: {
  children?: (props: { children: ReactNode; name: string }) => ReactElement;
  name: string;
  label?: string;
  id: string;
  isDragDisabled?: boolean;
}) => {
  const { ref } = useDraggable({
    id,
    data: { componentType: name },
    disabled: isDragDisabled,
    type: "drawer",
  });

  return (
    <div className={getClassName("draggable")}>
      <div className={getClassName("draggableBg")}>
        <DrawerItemInner name={name} label={label}>
          {children}
        </DrawerItemInner>
      </div>
      <div className={getClassName("draggableFg")}>
        <DrawerItemInner
          name={name}
          label={label}
          dragRef={ref}
          isDragDisabled={isDragDisabled}
        >
          {children}
        </DrawerItemInner>
      </div>
    </div>
  );
};

const DrawerItem = ({
  name,
  children,
  id,
  label,
  index,
  isDragDisabled,
}: {
  name: string;
  children?: (props: { children: ReactNode; name: string }) => ReactElement;
  id?: string;
  label?: string;
  index?: number; // TODO deprecate
  isDragDisabled?: boolean;
}) => {
  const resolvedId = id || name;
  const [dynamicId, setDynamicId] = useState(generateId(resolvedId));

  if (typeof index !== "undefined") {
    console.error(
      "Warning: The `index` prop on Drawer.Item is deprecated and no longer required."
    );
  }

  useDragListener(
    "dragend",
    () => {
      setDynamicId(generateId(resolvedId));
    },
    [resolvedId]
  );

  return (
    <div key={dynamicId}>
      <DrawerItemDraggable
        name={name}
        label={label}
        id={dynamicId}
        isDragDisabled={isDragDisabled}
      >
        {children}
      </DrawerItemDraggable>
    </div>
  );
};

export const Drawer = ({
  children,
  droppableId,
  direction,
}: {
  children: ReactNode;
  droppableId?: string; // TODO deprecate
  direction?: "vertical" | "horizontal"; // TODO deprecate
}) => {
  if (droppableId) {
    console.error(
      "Warning: The `droppableId` prop on Drawer is deprecated and no longer required."
    );
  }

  if (direction) {
    console.error(
      "Warning: The `direction` prop on Drawer is deprecated and no longer required to achieve multi-directional dragging."
    );
  }

  const id = useSafeId();

  const { ref } = useDroppable({
    id,
    type: "void",
    collisionPriority: 0, // Never collide with this, but we use it so NestedDroppablePlugin respects the Drawer
  });

  return (
    <div
      className={getClassName()}
      ref={ref}
      data-puck-dnd={id}
      data-puck-drawer
      data-puck-dnd-void
    >
      {children}
    </div>
  );
};

Drawer.Item = DrawerItem;



================================================
FILE: packages/core/components/Drawer/styles.module.css
================================================
.Drawer {
  display: flex;
  flex-direction: column;
  font-family: var(--puck-font-family);
  gap: 12px;
}

.Drawer-draggable {
  position: relative;
}

.Drawer-draggableBg {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  pointer-events: none;
  z-index: -1;
}

.DrawerItem-draggable {
  background: var(--puck-color-white);
  cursor: grab;
  padding: 12px;
  display: flex;
  border: 1px var(--puck-color-grey-09) solid;
  border-radius: 4px;
  font-size: var(--puck-font-size-xxs);
  justify-content: space-between;
  align-items: center;
  transition: background-color 50ms ease-in, color 50ms ease-in;
}

.DrawerItem--disabled .DrawerItem-draggable {
  background: var(--puck-color-grey-11);
  color: var(--puck-color-grey-05);
  cursor: not-allowed; /** Move this out of inline styles */
}

.DrawerItem:focus-visible {
  outline: 0;
}

.Drawer:not(.Drawer--isDraggingFrom)
  .DrawerItem:focus-visible
  .DrawerItem-draggable {
  border-radius: 4px;
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
}

@media (hover: hover) and (pointer: fine) {
  .Drawer:not(.Drawer--isDraggingFrom)
    .DrawerItem:not(.DrawerItem--disabled)
    .DrawerItem-draggable:hover {
    background-color: var(--puck-color-azure-12);
    color: var(--puck-color-azure-04);
    transition: none;
  }
}

.DrawerItem-name {
  overflow-x: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}



================================================
FILE: packages/core/components/DropZone/context.tsx
================================================
import {
  PropsWithChildren,
  ReactNode,
  createContext,
  useCallback,
  useEffect,
  useMemo,
  useState,
} from "react";
import type { Draggable } from "@dnd-kit/dom";
import { useAppStore } from "../../store";
import { createStore, StoreApi } from "zustand";

export type PathData = Record<string, { path: string[]; label: string }>;

export type DropZoneContext = {
  areaId?: string;
  zoneCompound?: string;
  index?: number;
  registerZone?: (zoneCompound: string) => void;
  unregisterZone?: (zoneCompound: string) => void;
  mode?: "edit" | "render";
  depth: number;
  registerLocalZone?: (zone: string, active: boolean) => void; // A zone as it pertains to the current area
  unregisterLocalZone?: (zone: string) => void;
} | null;

export const dropZoneContext = createContext<DropZoneContext>(null);

export type Preview = {
  componentType: string;
  index: number;
  zone: string;
  props: Record<string, any>;
  type: "insert" | "move";
} | null;

export type ZoneStore = {
  zoneDepthIndex: Record<string, boolean>;
  areaDepthIndex: Record<string, boolean>;
  nextZoneDepthIndex: Record<string, boolean>;
  nextAreaDepthIndex: Record<string, boolean>;
  enabledIndex: Record<string, boolean>;
  previewIndex: Record<string, Preview>;
  draggedItem?: Draggable | null;
  hoveringComponent: string | null;
};

export const ZoneStoreContext = createContext<StoreApi<ZoneStore>>(
  createStore(() => ({
    zoneDepthIndex: {},
    nextZoneDepthIndex: {},
    areaDepthIndex: {},
    nextAreaDepthIndex: {},
    draggedItem: null,
    previewIndex: {},
    enabledIndex: {},
    hoveringComponent: null,
  }))
);

export const ZoneStoreProvider = ({
  children,
  store,
}: PropsWithChildren<{ store: StoreApi<ZoneStore> }>) => {
  return (
    <ZoneStoreContext.Provider value={store}>
      {children}
    </ZoneStoreContext.Provider>
  );
};

export const DropZoneProvider = ({
  children,
  value,
}: {
  children: ReactNode;
  value: DropZoneContext;
}) => {
  const dispatch = useAppStore((s) => s.dispatch);

  const registerZone = useCallback(
    (zoneCompound: string) => {
      dispatch({
        type: "registerZone",
        zone: zoneCompound,
      });
    },
    [dispatch]
  );

  const unregisterZone = useCallback(
    (zoneCompound: string) => {
      dispatch({
        type: "unregisterZone",
        zone: zoneCompound,
      });
    },
    [dispatch]
  );

  const memoValue = useMemo(
    () =>
      ({
        registerZone,
        unregisterZone,
        ...value,
      } as DropZoneContext),
    [value]
  );

  return (
    <>
      {memoValue && (
        <dropZoneContext.Provider value={memoValue}>
          {children}
        </dropZoneContext.Provider>
      )}
    </>
  );
};



================================================
FILE: packages/core/components/DropZone/index.tsx
================================================
import {
  CSSProperties,
  forwardRef,
  memo,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useRef,
} from "react";
import { DraggableComponent } from "../DraggableComponent";
import { setupZone } from "../../lib/data/setup-zone";
import {
  rootAreaId,
  rootDroppableId,
  rootZone,
} from "../../lib/root-droppable-id";
import { getClassNameFactory } from "../../lib";
import styles from "./styles.module.css";
import {
  DropZoneContext,
  DropZoneProvider,
  ZoneStoreContext,
  dropZoneContext,
} from "./context";
import { useAppStore, useAppStoreApi } from "../../store";
import { DropZoneProps } from "./types";
import {
  ComponentData,
  Config,
  DragAxis,
  Metadata,
  PuckContext,
} from "../../types";

import { useDroppable, UseDroppableInput } from "@dnd-kit/react";
import { DrawerItemInner } from "../Drawer";
import { pointerIntersection } from "@dnd-kit/collision";
import { UniqueIdentifier } from "@dnd-kit/abstract";
import { useMinEmptyHeight } from "./lib/use-min-empty-height";
import { assignRefs } from "../../lib/assign-refs";
import { useContentIdsWithPreview } from "./lib/use-content-with-preview";
import { useDragAxis } from "./lib/use-drag-axis";
import { useContextStore } from "../../lib/use-context-store";
import { useShallow } from "zustand/react/shallow";
import { renderContext } from "../Render";
import { useSlots } from "../../lib/use-slots";
import { ContextSlotRender, SlotRenderPure } from "../SlotRender";
import { expandNode } from "../../lib/data/flatten-node";

const getClassName = getClassNameFactory("DropZone", styles);

export { DropZoneProvider, dropZoneContext } from "./context";

const getRandomColor = () =>
  `#${Math.floor(Math.random() * 16777215).toString(16)}`;

const RENDER_DEBUG = false;

export type DropZoneDndData = {
  areaId?: string;
  depth: number;
  path: UniqueIdentifier[];
  isDroppableTarget: boolean;
};

export const DropZoneEditPure = (props: DropZoneProps) => (
  <DropZoneEdit {...props} />
);

const DropZoneChild = ({
  zoneCompound,
  componentId,
  index,
  dragAxis,
  collisionAxis,
  inDroppableZone,
}: {
  zoneCompound: string;
  componentId: string;
  index: number;
  dragAxis: DragAxis;
  collisionAxis?: DragAxis;
  inDroppableZone: boolean;
}) => {
  const metadata = useAppStore((s) => s.metadata);

  const ctx = useContext(dropZoneContext);
  const { depth = 1 } = ctx ?? {};

  const zoneStore = useContext(ZoneStoreContext);

  const nodeProps = useAppStore(
    useShallow((s) => {
      return s.state.indexes.nodes[componentId]?.flatData.props;
    })
  );

  const nodeType = useAppStore(
    (s) => s.state.indexes.nodes[componentId]?.data.type
  );

  const nodeReadOnly = useAppStore(
    useShallow((s) => s.state.indexes.nodes[componentId]?.data.readOnly)
  );

  const appStore = useAppStoreApi();

  const item = useMemo(() => {
    if (nodeProps) {
      const expanded = expandNode({
        type: nodeType,
        props: nodeProps,
      }) as ComponentData;

      return expanded;
    }

    const preview = zoneStore.getState().previewIndex[zoneCompound];

    if (componentId === preview?.props.id) {
      return {
        type: preview.componentType,
        props: preview.props,
        previewType: preview.type,
      };
    }

    return null;
  }, [appStore, componentId, zoneCompound, nodeType, nodeProps]);

  const componentConfig = useAppStore((s) =>
    item?.type ? s.config.components[item.type] : null
  );

  const puckProps: PuckContext = useMemo(
    () => ({
      renderDropZone: DropZoneEditPure,
      isEditing: true,
      dragRef: null,
      metadata: { ...metadata, ...componentConfig?.metadata },
    }),
    [metadata, componentConfig?.metadata]
  );

  const overrides = useAppStore((s) => s.overrides);
  const isLoading = useAppStore(
    (s) => s.componentState[componentId]?.loadingCount > 0
  );
  const isSelected = useAppStore(
    (s) => s.selectedItem?.props.id === componentId || false
  );

  let label = componentConfig?.label ?? item?.type.toString() ?? "Component";

  const renderPreview = useMemo(
    () =>
      function Preview() {
        return (
          <DrawerItemInner name={label}>
            {overrides.componentItem}
          </DrawerItemInner>
        );
      },
    [componentId, label, overrides]
  );

  const defaultsProps = useMemo(
    () => ({
      ...componentConfig?.defaultProps,
      ...item?.props,
      puck: puckProps,
      editMode: true, // DEPRECATED
    }),
    [componentConfig?.defaultProps, item?.props, puckProps]
  );

  const defaultedNode = useMemo(
    () => ({ type: item?.type ?? nodeType, props: defaultsProps }),
    [item?.type, nodeType, defaultsProps]
  );

  const config = useAppStore((s) => s.config);

  const defaultedPropsWithSlots = useSlots(
    config,
    defaultedNode,
    DropZoneEditPure,
    (slotProps) => (
      <ContextSlotRender componentId={componentId} zone={slotProps.zone} />
    ),
    nodeReadOnly,
    isLoading
  );

  if (!item) return;

  let Render = componentConfig
    ? componentConfig.render
    : () => (
        <div style={{ padding: 48, textAlign: "center" }}>
          No configuration for {item.type}
        </div>
      );

  let componentType = item.type as string;

  const isInserting =
    "previewType" in item ? item.previewType === "insert" : false;

  if (isInserting) {
    Render = renderPreview;
  }

  return (
    <DraggableComponent
      id={componentId}
      componentType={componentType}
      zoneCompound={zoneCompound}
      depth={depth + 1}
      index={index}
      isLoading={isLoading}
      isSelected={isSelected}
      label={label}
      autoDragAxis={dragAxis}
      userDragAxis={collisionAxis}
      inDroppableZone={inDroppableZone}
    >
      {(dragRef) =>
        componentConfig?.inline && !isInserting ? (
          <>
            <Render
              {...defaultedPropsWithSlots}
              puck={{
                ...defaultedPropsWithSlots.puck,
                dragRef,
              }}
            />
          </>
        ) : (
          <div ref={dragRef}>
            <Render {...defaultedPropsWithSlots} />
          </div>
        )
      }
    </DraggableComponent>
  );
};

const DropZoneChildMemo = memo(DropZoneChild);

export const DropZoneEdit = forwardRef<HTMLDivElement, DropZoneProps>(
  function DropZoneEditInternal(
    {
      zone,
      allow,
      disallow,
      style,
      className,
      minEmptyHeight: userMinEmptyHeight = 128,
      collisionAxis,
    },
    userRef
  ) {
    const ctx = useContext(dropZoneContext);

    const {
      // These all need setting via context
      areaId,
      depth = 0,
      registerLocalZone,
      unregisterLocalZone,
    } = ctx ?? {};

    const path = useAppStore(
      useShallow((s) => (areaId ? s.state.indexes.nodes[areaId]?.path : null))
    );

    let zoneCompound = rootDroppableId;

    if (areaId) {
      if (zone !== rootDroppableId) {
        zoneCompound = `${areaId}:${zone}`;
      }
    }

    const isRootZone =
      zoneCompound === rootDroppableId ||
      zone === rootDroppableId ||
      areaId === "root";

    const inNextDeepestArea = useContextStore(
      ZoneStoreContext,
      (s) => s.nextAreaDepthIndex[areaId || ""]
    );

    const zoneContentIds = useAppStore(
      useShallow((s) => {
        return s.state.indexes.zones[zoneCompound]?.contentIds;
      })
    );
    const zoneType = useAppStore(
      useShallow((s) => {
        return s.state.indexes.zones[zoneCompound]?.type;
      })
    );

    // Register and unregister zone on mount
    useEffect(() => {
      if (!zoneType || zoneType === "dropzone") {
        if (ctx?.registerZone) {
          ctx?.registerZone(zoneCompound);
        }

        return () => {
          if (ctx?.unregisterZone) {
            ctx?.unregisterZone(zoneCompound);
          }
        };
      }
    }, [zoneType]);

    useEffect(() => {
      if (zoneType === "dropzone") {
        if (zoneCompound !== rootDroppableId) {
          console.warn(
            "DropZones have been deprecated in favor of slot fields and will be removed in a future version of Puck. Please see the migration guide: https://www.puckeditor.com/docs/guides/migrations/dropzones-to-slots"
          );
        }
      }
    }, [zoneType]);

    const contentIds = useMemo(() => {
      return zoneContentIds || [];
    }, [zoneContentIds]);

    const ref = useRef<HTMLDivElement | null>(null);

    const acceptsTarget = useCallback(
      (componentType: string | null | undefined) => {
        if (!componentType) {
          return true;
        }

        if (disallow) {
          const defaultedAllow = allow || [];

          // remove any explicitly allowed items from disallow
          const filteredDisallow = (disallow || []).filter(
            (item) => defaultedAllow.indexOf(item) === -1
          );

          if (filteredDisallow.indexOf(componentType) !== -1) {
            return false;
          }
        } else if (allow) {
          if (allow.indexOf(componentType) === -1) {
            return false;
          }
        }

        return true;
      },
      [allow, disallow]
    );

    const targetAccepted = useContextStore(ZoneStoreContext, (s) => {
      const draggedComponentType = s.draggedItem?.data.componentType;
      return acceptsTarget(draggedComponentType);
    });

    const hoveringOverArea = inNextDeepestArea || isRootZone;

    const isEnabled = useContextStore(ZoneStoreContext, (s) => {
      let _isEnabled = true;
      const isDeepestZone = s.zoneDepthIndex[zoneCompound] ?? false;

      _isEnabled = isDeepestZone;

      if (_isEnabled) {
        _isEnabled = targetAccepted;
      }

      return _isEnabled;
    });

    useEffect(() => {
      if (registerLocalZone) {
        registerLocalZone(zoneCompound, targetAccepted || isEnabled);
      }

      return () => {
        if (unregisterLocalZone) {
          unregisterLocalZone(zoneCompound);
        }
      };
    }, [targetAccepted, isEnabled, zoneCompound]);

    const [contentIdsWithPreview, preview] = useContentIdsWithPreview(
      contentIds,
      zoneCompound
    );

    const isDropEnabled =
      isEnabled &&
      (preview
        ? contentIdsWithPreview.length === 1
        : contentIdsWithPreview.length === 0);

    const zoneStore = useContext(ZoneStoreContext);

    useEffect(() => {
      const { enabledIndex } = zoneStore.getState();
      zoneStore.setState({
        enabledIndex: { ...enabledIndex, [zoneCompound]: isEnabled },
      });
    }, [isEnabled, zoneStore, zoneCompound]);

    const droppableConfig: UseDroppableInput<DropZoneDndData> = {
      id: zoneCompound,
      collisionPriority: isEnabled ? depth : 0,
      disabled: !isDropEnabled,
      collisionDetector: pointerIntersection,
      type: "dropzone",
      data: {
        areaId,
        depth,
        isDroppableTarget: targetAccepted,
        path: path || [],
      },
    };

    const { ref: dropRef } = useDroppable(droppableConfig);

    const isAreaSelected = useAppStore(
      (s) => s?.selectedItem && areaId === s?.selectedItem.props.id
    );

    const [dragAxis] = useDragAxis(ref, collisionAxis);

    const [minEmptyHeight, isAnimating] = useMinEmptyHeight({
      zoneCompound,
      userMinEmptyHeight,
      ref,
    });

    return (
      <div
        className={`${getClassName({
          isRootZone,
          hoveringOverArea,
          isEnabled,
          isAreaSelected,
          hasChildren: contentIds.length > 0,
          isAnimating,
        })}${className ? ` ${className}` : ""}`}
        ref={(node) => {
          assignRefs<HTMLDivElement>([ref, dropRef, userRef], node);
        }}
        data-testid={`dropzone:${zoneCompound}`}
        data-puck-dropzone={zoneCompound}
        style={
          {
            ...style,
            "--min-empty-height": `${minEmptyHeight}px`,
            backgroundColor: RENDER_DEBUG
              ? getRandomColor()
              : style?.backgroundColor,
          } as CSSProperties
        }
      >
        {contentIdsWithPreview.map((componentId, i) => {
          return (
            <DropZoneChildMemo
              key={componentId}
              zoneCompound={zoneCompound}
              componentId={componentId}
              dragAxis={dragAxis}
              index={i}
              collisionAxis={collisionAxis}
              inDroppableZone={targetAccepted}
            />
          );
        })}
      </div>
    );
  }
);

const DropZoneRenderItem = ({
  config,
  item,
  metadata,
}: {
  config: Config;
  item: ComponentData;
  metadata: Metadata;
}) => {
  const Component = config.components[item.type];

  const props = useSlots(config, item, (slotProps) => (
    <SlotRenderPure {...slotProps} config={config} metadata={metadata} />
  ));

  const nextContextValue = useMemo<DropZoneContext>(
    () => ({
      areaId: props.id,
      depth: 1,
    }),
    [props]
  );

  return (
    <DropZoneProvider key={props.id} value={nextContextValue}>
      <Component.render
        {...props}
        puck={{
          ...props.puck,
          renderDropZone: DropZoneRenderPure,
          metadata: { ...metadata, ...Component.metadata },
        }}
      />
    </DropZoneProvider>
  );
};

export const DropZoneRenderPure = (props: DropZoneProps) => (
  <DropZoneRender {...props} />
);

const DropZoneRender = forwardRef<HTMLDivElement, DropZoneProps>(
  function DropZoneRenderInternal({ className, style, zone }, ref) {
    const ctx = useContext(dropZoneContext);
    const { areaId = "root" } = ctx || {};
    const { config, data, metadata } = useContext(renderContext);

    let zoneCompound = rootDroppableId;
    let content = data?.content || [];

    // Register zones if running Render mode inside editor (i.e. previewMode === "interactive")
    useEffect(() => {
      // Only register zones, not slots
      if (!content) {
        if (ctx?.registerZone) {
          ctx?.registerZone(zoneCompound);
        }

        return () => {
          if (ctx?.unregisterZone) {
            ctx?.unregisterZone(zoneCompound);
          }
        };
      }
    }, [content]);

    if (!data || !config) {
      return null;
    }

    if (areaId !== rootAreaId && zone !== rootZone) {
      zoneCompound = `${areaId}:${zone}`;
      content = setupZone(data, zoneCompound).zones[zoneCompound];
    }

    return (
      <div className={className} style={style} ref={ref}>
        {content.map((item) => {
          const Component = config.components[item.type];
          if (Component) {
            return (
              <DropZoneRenderItem
                key={item.props.id}
                config={config}
                item={item}
                metadata={metadata}
              />
            );
          }

          return null;
        })}
      </div>
    );
  }
);

export const DropZonePure = (props: DropZoneProps) => <DropZone {...props} />;

export const DropZone = forwardRef<HTMLDivElement, DropZoneProps>(
  function DropZone(props: DropZoneProps, ref) {
    const ctx = useContext(dropZoneContext);

    if (ctx?.mode === "edit") {
      return (
        <>
          <DropZoneEdit {...props} ref={ref} />
        </>
      );
    }

    return (
      <>
        <DropZoneRender {...props} ref={ref} />
      </>
    );
  }
);



================================================
FILE: packages/core/components/DropZone/styles.module.css
================================================
.DropZone {
  --resize-animation-ms: 150ms;

  position: relative;
  height: 100%;
  min-height: var(--min-empty-height);
  outline-offset: -2px;
  width: 100%;
}

.DropZone--hasChildren {
  min-height: 0;
}

.DropZone:empty {
  min-height: var(--min-empty-height);
}

/* We use global data-puck-dragging to avoid re-rendering DropZone */
[data-puck-entry]:not([data-puck-dragging]) .DropZone {
  transition: min-height var(--resize-animation-ms) ease-in;
}

.DropZone--isAreaSelected,
.DropZone--hoveringOverArea:not(.DropZone--isRootZone) {
  background: color-mix(in srgb, var(--puck-color-azure-09) 30%, transparent);
  outline: 2px dashed var(--puck-color-azure-08);
}

.DropZone:empty {
  background: color-mix(in srgb, var(--puck-color-azure-09) 30%, transparent);
  outline: 2px dashed var(--puck-color-azure-08);
}

.DropZone--isDestination {
  outline: 2px dashed var(--puck-color-azure-04) !important;
}

.DropZone--isDestination:not(.DropZone--isRootZone) {
  background: color-mix(
    in srgb,
    var(--puck-color-azure-09) 30%,
    transparent
  ) !important;
}

.DropZone-item {
  position: relative;
}

.DropZone-hitbox {
  position: absolute;
  bottom: -12px;
  height: 24px;
  width: 100%;
  z-index: 1;
}

[data-puck-dragging] .DropZone--isEnabled {
  outline: 2px dashed var(--puck-color-azure-06);
}

.DropZone > *:not([data-puck-component]) {
  opacity: 0;
}

/* Hide overlays if DropZone is animating, which happens during a resize */
body:has(.DropZone--isAnimating:empty) [data-puck-overlay] {
  opacity: 0 !important;
}



================================================
FILE: packages/core/components/DropZone/types.ts
================================================
import { CSSProperties } from "react";
import { Content, DragAxis } from "../../types";

export type DropZoneProps = {
  zone: string;
  allow?: string[];
  disallow?: string[];
  style?: CSSProperties;
  minEmptyHeight?: number;
  className?: string;
  collisionAxis?: DragAxis;
};



================================================
FILE: packages/core/components/DropZone/lib/use-content-with-preview.ts
================================================
import { Preview } from "./../context";
import { useContext, useEffect, useState } from "react";
import { useRenderedCallback } from "../../../lib/dnd/use-rendered-callback";
import { insert } from "../../../lib/data/insert";
import { ZoneStoreContext } from "../context";
import { useContextStore } from "../../../lib/use-context-store";
import { useAppStore } from "../../../store";

export const useContentIdsWithPreview = (
  contentIds: string[],
  zoneCompound: string
): [string[], Preview | undefined] => {
  const zoneStore = useContext(ZoneStoreContext);
  const preview = useContextStore(
    ZoneStoreContext,
    (s) => s.previewIndex[zoneCompound]
  );

  const isDragging = useAppStore((s) => s.state.ui.isDragging);

  const [contentIdsWithPreview, setContentIdsWithPreview] =
    useState(contentIds);
  const [localPreview, setLocalPreview] = useState<Preview | undefined>(
    preview
  );

  const updateContent = useRenderedCallback(
    (
      contentIds: string[],
      preview: Preview | undefined,
      isDragging: boolean,
      draggedItemId?: string,
      previewExists?: boolean
    ) => {
      // Preview is cleared but context hasn't yet caught up
      // This is necessary because Zustand clears the preview before the dispatcher finishes
      if (isDragging && !previewExists) {
        return;
      }

      if (preview) {
        if (preview.type === "insert") {
          setContentIdsWithPreview(
            insert(
              contentIds.filter((id) => id !== preview.props.id),
              preview.index,
              preview.props.id
            )
          );
        } else {
          setContentIdsWithPreview(
            insert(
              contentIds.filter((id) => id !== preview.props.id),
              preview.index,
              preview.props.id
            )
          );
        }
      } else {
        setContentIdsWithPreview(
          previewExists
            ? contentIds.filter((id) => id !== draggedItemId)
            : contentIds
        );
      }

      setLocalPreview(preview);
    },
    []
  );

  useEffect(() => {
    // We MUST explicitly pass these in, otherwise mobile dragging fails
    // due to hard-to-debug rendering race conditions. This must happen
    // within this callback (after preview has updated), and not inside
    // the renderedCallback.
    const s = zoneStore.getState();
    const draggedItemId = s.draggedItem?.id;
    const previewExists = Object.keys(s.previewIndex || {}).length > 0;

    updateContent(
      contentIds,
      preview,
      isDragging,
      draggedItemId,
      previewExists
    );
  }, [contentIds, preview, isDragging]);

  return [contentIdsWithPreview, localPreview];
};



================================================
FILE: packages/core/components/DropZone/lib/use-drag-axis.ts
================================================
import { RefObject, useCallback, useEffect, useState } from "react";
import { DragAxis } from "../../../types";
import { useAppStore } from "../../../store";

const GRID_DRAG_AXIS: DragAxis = "dynamic";
const FLEX_ROW_DRAG_AXIS: DragAxis = "x";
const DEFAULT_DRAG_AXIS: DragAxis = "y";

export const useDragAxis = (
  ref: RefObject<HTMLElement | null>,
  collisionAxis?: DragAxis
): [DragAxis, () => void] => {
  const status = useAppStore((s) => s.status);

  const [dragAxis, setDragAxis] = useState<DragAxis>(
    collisionAxis || DEFAULT_DRAG_AXIS
  );

  const calculateDragAxis = useCallback(() => {
    if (ref.current) {
      const computedStyle = window.getComputedStyle(ref.current);

      if (computedStyle.display === "grid") {
        setDragAxis(GRID_DRAG_AXIS);
      } else if (
        computedStyle.display === "flex" &&
        computedStyle.flexDirection === "row"
      ) {
        setDragAxis(FLEX_ROW_DRAG_AXIS);
      } else {
        setDragAxis(DEFAULT_DRAG_AXIS);
      }
    }
  }, [ref.current]);

  useEffect(() => {
    const onViewportChange = () => {
      calculateDragAxis();
    };

    window.addEventListener("viewportchange", onViewportChange);

    return () => {
      window.removeEventListener("viewportchange", onViewportChange);
    };
  }, []);

  useEffect(calculateDragAxis, [status, collisionAxis]);

  return [dragAxis, calculateDragAxis];
};



================================================
FILE: packages/core/components/DropZone/lib/use-min-empty-height.ts
================================================
import { RefObject, useEffect, useRef, useState } from "react";
import { ZoneStoreContext } from "./../context";
import { useContextStore } from "../../../lib/use-context-store";
import { AppStoreApi, useAppStoreApi } from "../../../store";
import { useOnDragFinished } from "../../../lib/dnd/use-on-drag-finished";

const getNumItems = (appStore: AppStoreApi, zoneCompound: string) =>
  appStore.getState().state.indexes.zones[zoneCompound].contentIds.length;

export const useMinEmptyHeight = ({
  zoneCompound,
  userMinEmptyHeight,
  ref,
}: {
  zoneCompound: string;
  userMinEmptyHeight: number;
  ref: RefObject<HTMLDivElement | null>;
}) => {
  const appStore = useAppStoreApi();
  const [prevHeight, setPrevHeight] = useState(0);
  const [isAnimating, setIsAnimating] = useState(false);
  const { draggedItem, isZone } = useContextStore(ZoneStoreContext, (s) => {
    return {
      draggedItem:
        s.draggedItem?.data.zone === zoneCompound ? s.draggedItem : null,
      isZone: s.draggedItem?.data.zone === zoneCompound,
    };
  });

  const numItems = useRef(0);

  const onDragFinished = useOnDragFinished(
    (finished) => {
      if (finished) {
        const newNumItems = getNumItems(appStore, zoneCompound);

        setPrevHeight(0);

        if (newNumItems || numItems.current === 0) {
          setIsAnimating(false);

          return;
        }

        const selectedItem = appStore.getState().selectedItem;
        const zones = appStore.getState().state.indexes.zones;
        const nodes = appStore.getState().nodes;

        nodes.nodes[selectedItem?.props.id]?.methods.hideOverlay();

        setTimeout(() => {
          const contentIds = zones[zoneCompound]?.contentIds || [];

          contentIds.forEach((contentId) => {
            const node = nodes.nodes[contentId];
            node?.methods.sync();
          });

          if (selectedItem) {
            setTimeout(() => {
              nodes.nodes[selectedItem.props.id]?.methods.sync();
              nodes.nodes[selectedItem.props.id]?.methods.showOverlay();
            }, 200);
          }

          setIsAnimating(false);
        }, 100);
      }
    },
    [appStore, prevHeight, zoneCompound]
  );

  useEffect(() => {
    if (draggedItem && ref.current) {
      if (isZone) {
        const rect = ref.current.getBoundingClientRect();

        numItems.current = getNumItems(appStore, zoneCompound);

        setPrevHeight(rect.height);
        setIsAnimating(true);

        return onDragFinished();
      }
    }
  }, [ref.current, draggedItem, onDragFinished]);

  return [prevHeight || userMinEmptyHeight, isAnimating];
};



================================================
FILE: packages/core/components/ExternalInput/index.tsx
================================================
import {
  useMemo,
  useEffect,
  useState,
  useCallback,
  isValidElement,
} from "react";
import styles from "./styles.module.css";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { ExternalField } from "../../types";
import { Link, Search, SlidersHorizontal, Unlock } from "lucide-react";
import { Modal } from "../Modal";
import { Heading } from "../Heading";
import { Loader } from "../Loader";
import { Button } from "../Button";
import { AutoFieldPrivate } from "../AutoField";
import { IconButton } from "../IconButton";

const getClassName = getClassNameFactory("ExternalInput", styles);
const getClassNameModal = getClassNameFactory("ExternalInputModal", styles);

const dataCache: Record<string, any> = {};

export const ExternalInput = ({
  field,
  onChange,
  value = null,
  name,
  id,
  readOnly,
}: {
  field: ExternalField;
  onChange: (value: any) => void;
  value: any;
  name?: string;
  id: string;
  readOnly?: boolean;
}) => {
  const {
    mapProp = (val: any) => val,
    mapRow = (val: any) => val,
    filterFields,
  } = field || {};

  const [data, setData] = useState<Record<string, any>[]>([]);
  const [isOpen, setOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  const hasFilterFields = !!filterFields;

  const [filters, setFilters] = useState(field.initialFilters || {});
  const [filtersToggled, setFiltersToggled] = useState(hasFilterFields);

  const mappedData = useMemo(() => {
    return data.map(mapRow);
  }, [data]);

  const keys = useMemo(() => {
    const validKeys: Set<string> = new Set();

    for (const item of mappedData) {
      for (const key of Object.keys(item)) {
        if (
          typeof item[key] === "string" ||
          typeof item[key] === "number" ||
          isValidElement(item[key])
        ) {
          validKeys.add(key);
        }
      }
    }

    return Array.from(validKeys);
  }, [mappedData]);

  const [searchQuery, setSearchQuery] = useState(field.initialQuery || "");

  const search = useCallback(
    async (query: string, filters: object) => {
      setIsLoading(true);

      const cacheKey = `${id}-${query}-${JSON.stringify(filters)}`;

      const listData =
        dataCache[cacheKey] || (await field.fetchList({ query, filters }));

      if (listData) {
        setData(listData);
        setIsLoading(false);

        dataCache[cacheKey] = listData;
      }
    },
    [id, field]
  );

  const Footer = useCallback(
    (props: { items: any[] }) =>
      field.renderFooter ? (
        field.renderFooter(props)
      ) : (
        <span className={getClassNameModal("footer")}>
          {props.items.length} result{props.items.length === 1 ? "" : "s"}
        </span>
      ),
    [field.renderFooter]
  );

  useEffect(() => {
    search(searchQuery, filters);
  }, []);

  return (
    <div
      className={getClassName({
        dataSelected: !!value,
        modalVisible: isOpen,
        readOnly,
      })}
      id={id}
    >
      <div className={getClassName("actions")}>
        <button
          type="button"
          onClick={() => setOpen(true)}
          className={getClassName("button")}
          disabled={readOnly}
        >
          {/* NB this is hardcoded to strapi for now */}
          {value ? (
            field.getItemSummary ? (
              field.getItemSummary(value)
            ) : (
              "External item"
            )
          ) : (
            <>
              <Link size="16" />
              <span>{field.placeholder}</span>
            </>
          )}
        </button>
        {value && (
          <button
            type="button"
            className={getClassName("detachButton")}
            onClick={() => {
              onChange(null);
            }}
            disabled={readOnly}
          >
            <Unlock size={16} />
          </button>
        )}
      </div>
      <Modal onClose={() => setOpen(false)} isOpen={isOpen}>
        <form
          className={getClassNameModal({
            isLoading,
            loaded: !isLoading,
            hasData: mappedData.length > 0,
            filtersToggled,
          })}
          onSubmit={(e) => {
            e.preventDefault();

            search(searchQuery, filters);
          }}
        >
          <div className={getClassNameModal("masthead")}>
            {field.showSearch ? (
              <div className={getClassNameModal("searchForm")}>
                <label className={getClassNameModal("search")}>
                  <span className={getClassNameModal("searchIconText")}>
                    Search
                  </span>
                  <div className={getClassNameModal("searchIcon")}>
                    <Search size="18" />
                  </div>
                  <input
                    className={getClassNameModal("searchInput")}
                    name="q"
                    type="search"
                    placeholder={field.placeholder}
                    onChange={(e) => {
                      setSearchQuery(e.currentTarget.value);
                    }}
                    autoComplete="off"
                    value={searchQuery}
                  ></input>
                </label>
                <div className={getClassNameModal("searchActions")}>
                  <Button type="submit" loading={isLoading} fullWidth>
                    Search
                  </Button>
                  {hasFilterFields && (
                    <div className={getClassNameModal("searchActionIcon")}>
                      <IconButton
                        title="Toggle filters"
                        onClick={(e) => {
                          e.preventDefault();
                          e.stopPropagation();
                          setFiltersToggled(!filtersToggled);
                        }}
                      >
                        <SlidersHorizontal size={20} />
                      </IconButton>
                    </div>
                  )}
                </div>
              </div>
            ) : (
              <Heading rank="2" size="xs">
                {field.placeholder || "Select data"}
              </Heading>
            )}
          </div>

          <div className={getClassNameModal("grid")}>
            {hasFilterFields && (
              <div className={getClassNameModal("filters")}>
                {hasFilterFields &&
                  Object.keys(filterFields).map((fieldName) => {
                    const filterField = filterFields[fieldName];
                    return (
                      <div
                        className={getClassNameModal("field")}
                        key={fieldName}
                      >
                        <AutoFieldPrivate
                          field={filterField}
                          name={fieldName}
                          id={`external_field_${fieldName}_filter`}
                          label={filterField.label || fieldName}
                          value={filters[fieldName]}
                          onChange={(value) => {
                            const newFilters = {
                              ...filters,
                              [fieldName]: value,
                            };

                            setFilters(newFilters);

                            search(searchQuery, newFilters);
                          }}
                        />
                      </div>
                    );
                  })}
              </div>
            )}

            <div className={getClassNameModal("tableWrapper")}>
              <table className={getClassNameModal("table")}>
                <thead className={getClassNameModal("thead")}>
                  <tr className={getClassNameModal("tr")}>
                    {keys.map((key) => (
                      <th
                        key={key}
                        className={getClassNameModal("th")}
                        style={{ textAlign: "left" }}
                      >
                        {key}
                      </th>
                    ))}
                  </tr>
                </thead>
                <tbody className={getClassNameModal("tbody")}>
                  {mappedData.map((item, i) => {
                    return (
                      <tr
                        key={i}
                        style={{ whiteSpace: "nowrap" }}
                        className={getClassNameModal("tr")}
                        onClick={() => {
                          onChange(mapProp(data[i]));

                          setOpen(false);
                        }}
                      >
                        {keys.map((key) => (
                          <td key={key} className={getClassNameModal("td")}>
                            {item[key]}
                          </td>
                        ))}
                      </tr>
                    );
                  })}
                </tbody>
              </table>

              <div className={getClassNameModal("loadingBanner")}>
                <Loader size={24} />
              </div>
            </div>
          </div>
          <div className={getClassNameModal("footerContainer")}>
            <Footer items={mappedData} />
          </div>
        </form>
      </Modal>
    </div>
  );
};



================================================
FILE: packages/core/components/ExternalInput/styles.module.css
================================================
.ExternalInput-actions {
  display: flex;
}

.ExternalInput-button {
  display: flex;
  gap: 8px;
  align-items: center;
  justify-content: center;
  background-color: var(--puck-color-white);
  border: 1px solid var(--puck-color-grey-09);
  border-radius: 4px;
  color: var(--puck-color-azure-04);
  padding: 12px 16px;
  font-weight: 500;
  white-space: nowrap;
  text-overflow: ellipsis;
  transition: background-color 50ms ease-in;
  position: relative;
  overflow: hidden;
  flex-grow: 1;
}

.ExternalInput--dataSelected .ExternalInput-button {
  color: var(--puck-color-grey-03);
  display: block;
  border-top-right-radius: 0px;
  border-bottom-right-radius: 0px;
}

.ExternalInput--readOnly .ExternalInput-button {
  background-color: var(--puck-color-grey-11);
}

.ExternalInput-detachButton {
  border: 1px solid var(--puck-color-grey-09);
  border-top-right-radius: 4px;
  border-bottom-right-radius: 4px;
  background-color: var(--puck-color-grey-12);
  color: var(--puck-color-grey-05);
  display: flex;
  gap: 8px;
  align-items: center;
  justify-content: center;
  padding: 8px 12px;
  position: relative;
  transition: background-color 50ms ease-in, color 50ms ease-in;
  margin-inline-start: -1px;
}

.ExternalInput-button:focus-visible,
.ExternalInput-detachButton:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
  z-index: 1;
}

@media (hover: hover) and (pointer: fine) {
  .ExternalInput:not(.ExternalInput--readOnly) .ExternalInput-button:hover,
  .ExternalInput:not(.ExternalInput--readOnly)
    .ExternalInput-detachButton:hover {
    background: var(--puck-color-azure-12);
    transition: none;
  }

  .ExternalInput:not(.ExternalInput--readOnly)
    .ExternalInput-detachButton:hover {
    color: var(--puck-color-azure-04);
  }
}

.ExternalInput:not(.ExternalInput--readOnly) .ExternalInput-button:active,
.ExternalInput:not(.ExternalInput--readOnly)
  .ExternalInput-detachButton:active {
  background: var(--puck-color-azure-11);
  transition: none;
}

.ExternalInputModal {
  color: var(--puck-color-black);
  display: grid;
  grid-template-rows: min-content minmax(128px, 100%) min-content;
  grid-template-columns: 100%;
  position: relative;
  min-height: 50dvh;
  max-height: 90dvh;
}

.ExternalInputModal-grid {
  display: flex;
  flex-direction: column;
}

@media (min-width: 458px) {
  .ExternalInputModal-grid {
    display: grid;
    grid-template-columns: 100%;
  }

  .ExternalInputModal--filtersToggled .ExternalInputModal-grid {
    grid-template-columns: 25% 75%;
  }
}

.ExternalInputModal-filters {
  border-bottom: 1px solid var(--puck-color-grey-09);
}

.ExternalInputModal--filtersToggled .ExternalInputModal-filters {
  display: none; /* Hide filters by default on smaller viewports */
}

@media (min-width: 458px) {
  .ExternalInputModal-filters {
    border-inline-end: 1px solid var(--puck-color-grey-09);
    display: none;
  }

  .ExternalInputModal--filtersToggled .ExternalInputModal-filters {
    display: block; /* Show filters by default on larger viewports */
  }
}

.ExternalInputModal-masthead {
  background-color: var(--puck-color-grey-12);
  border-bottom: 1px solid var(--puck-color-grey-09);
  display: flex;
  flex-wrap: wrap;
  gap: 24px;
  padding: 24px;
}

.ExternalInputModal-tableWrapper {
  position: relative;
  overflow-x: auto;
  overflow-y: auto;
  flex-grow: 1;
}

.ExternalInputModal-table {
  border-collapse: unset;
  border-spacing: 0px;
  color: var(--puck-color-grey-02);
  position: relative;
  z-index: 0;
  min-width: 100%;
}

.ExternalInputModal-thead {
  background-color: var(--puck-color-white);
  position: sticky;
  top: 0;
  z-index: 1;
}

.ExternalInputModal-th {
  border-bottom: 1px solid var(--puck-color-grey-09);
  color: var(--puck-color-grey-04);
  font-weight: 500;
  font-size: 14px;
  padding: 16px 24px;
}

.ExternalInputModal-td {
  border-bottom: 1px solid var(--puck-color-grey-10);
  padding: 16px 24px;
}

.ExternalInputModal-tr .ExternalInputModal-td:first-of-type {
  font-weight: 500;
  width: 1%; /* Prevent growing */
  white-space: nowrap; /* Prevent growing */
}

@media (hover: hover) and (pointer: fine) {
  .ExternalInputModal-tbody .ExternalInputModal-tr:hover {
    background: var(--puck-color-azure-12);
    color: var(--puck-color-azure-04);
    cursor: pointer;
    position: relative;
    margin-inline-start: -5px;
  }

  .ExternalInputModal-tbody
    .ExternalInputModal-tr:hover
    .ExternalInputModal-td:first-of-type {
    border-inline-start: 4px solid var(--puck-color-azure-04);
    padding-inline-start: 20px;
  }
}

.ExternalInputModal-tbody
  .ExternalInputModal-tr:last-of-type
  .ExternalInputModal-td {
  border-bottom: none;
}

.ExternalInputModal-tableWrapper {
  display: none;
}

.ExternalInputModal--hasData .ExternalInputModal-tableWrapper {
  display: block;
}

.ExternalInputModal-loadingBanner {
  display: none;
  background-color: color-mix(
    in srgb,
    var(--puck-color-white) 90%,
    transparent
  );
  padding: 64px;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.ExternalInputModal--isLoading .ExternalInputModal-loadingBanner {
  display: flex;
}

.ExternalInputModal-searchForm {
  display: flex;
  flex-wrap: wrap;
  gap: 12px;
  flex-grow: 1;
}

@media (min-width: 458px) {
  .ExternalInputModal-searchForm {
    flex-wrap: nowrap;
  }
}

.ExternalInputModal-search {
  display: flex;
  background: var(--puck-color-white);
  border-width: 1px;
  border-style: solid;
  border-color: var(--puck-color-grey-09);
  border-radius: 4px;
  flex-grow: 1;
  transition: border-color 50ms ease-in;
}

.ExternalInputModal-search:focus-within {
  border-color: var(--puck-color-grey-05);
  outline: 2px solid var(--puck-color-azure-05);
  transition: none;
}

@media (hover: hover) and (pointer: fine) {
  .ExternalInputModal-search:hover {
    border-color: var(--puck-color-grey-05);
    transition: none;
  }
}

.ExternalInputModal-searchIcon {
  align-items: center;
  background: var(--puck-color-grey-12);
  border-bottom-left-radius: 4px;
  border-top-left-radius: 4px;
  border-inline-end: 1px solid var(--puck-color-grey-09);
  color: var(--puck-color-grey-07);
  display: flex;
  justify-content: center;
  padding: 12px 15px;
  transition: color 50ms ease-in;
}

.ExternalInputModal-search:focus-within .ExternalInputModal-searchIcon {
  color: var(--puck-color-grey-04);
  transition: none;
}

@media (hover: hover) and (pointer: fine) {
  .ExternalInputModal-search:hover .ExternalInputModal-searchIcon {
    color: var(--puck-color-grey-04);
    transition: none;
  }
}

.ExternalInputModal-searchIconText {
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.ExternalInputModal-searchInput {
  border: none;
  border-radius: 4px;
  background: var(--puck-color-white);
  font-family: inherit;
  font-size: 14px;
  padding: 12px 15px;
  width: 100%;
}

.ExternalInputModal-searchInput:focus {
  outline: 0;
}

.ExternalInputModal-searchActions {
  display: flex;
  gap: 8px;
  height: 44px;
  width: 100%;
}

@media (min-width: 458px) {
  .ExternalInputModal-searchActions {
    width: auto;
  }
}

.ExternalInputModal-searchActionIcon {
  align-self: center;
}

.ExternalInputModal-footerContainer {
  background-color: var(--puck-color-grey-12);
  border-top: 1px solid var(--puck-color-grey-09);
  color: var(--puck-color-grey-04);
  padding: 16px;
}

.ExternalInputModal-footer {
  font-weight: 500;
  font-size: 14px;
  text-align: right;
}

.ExternalInputModal-field {
  color: var(--puck-color-grey-04);
  margin: 16px;
  margin-bottom: 12px;
  display: block;
}



================================================
FILE: packages/core/components/Heading/index.tsx
================================================
import { ReactNode } from "react";
import styles from "./styles.module.css";
import getClassNameFactory from "../../lib/get-class-name-factory";

const getClassName = getClassNameFactory("Heading", styles);

export type HeadingProps = {
  children: ReactNode;
  rank?: "1" | "2" | "3" | "4" | "5" | "6";
  size?: "xxxxl" | "xxxl" | "xxl" | "xl" | "l" | "m" | "s" | "xs";
};

export const Heading = ({ children, rank, size = "m" }: HeadingProps) => {
  const Tag: any = rank ? `h${rank}` : "span";

  return (
    <Tag
      className={getClassName({
        [size]: true,
      })}
    >
      {children}
    </Tag>
  );
};



================================================
FILE: packages/core/components/Heading/styles.module.css
================================================
.Heading {
  display: block;
  color: var(--puck-color-black);
  font-weight: 700;
  margin: 0;
}

.Heading b {
  font-weight: 700;
}

.Heading--xxxxl {
  font-size: var(--puck-font-size-xxxxl);
  letter-spacing: 0.08ch;
  font-weight: 800;
}

.Heading--xxxl {
  font-size: var(--puck-font-size-xxxl);
}

.Heading--xxl {
  font-size: var(--puck-font-size-xxl);
}

.Heading--xl {
  font-size: var(--puck-font-size-xl);
}

.Heading--l {
  font-size: var(--puck-font-size-l);
}

.Heading--m {
  font-size: var(--puck-font-size-m);
}

.Heading--s {
  font-size: var(--puck-font-size-s);
}

.Heading--xs {
  font-size: var(--puck-font-size-xs);
}



================================================
FILE: packages/core/components/IconButton/IconButton.module.css
================================================
.IconButton {
  align-items: center;
  background: transparent;
  border: none;
  border-radius: 4px;
  color: currentColor;
  display: flex;
  font-family: var(--puck-font-family);
  justify-content: center;
  padding: 4px;
  transition: background-color 50ms ease-in, color 50ms ease-in;
}

.IconButton:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: -2px;
}

@media (hover: hover) and (pointer: fine) {
  .IconButton:hover:not(.IconButton--disabled) {
    background: var(--puck-color-azure-12);
    color: var(--puck-color-azure-04);
    cursor: pointer;
    transition: none;
  }
}

.IconButton:active {
  background: var(--puck-color-azure-11);
  transition: none;
}

.IconButton-title {
  clip: rect(0 0 0 0);
  clip-path: inset(100%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.IconButton--disabled {
  color: var(--puck-color-grey-07);
}



================================================
FILE: packages/core/components/IconButton/IconButton.tsx
================================================
import { ReactNode, SyntheticEvent, useState } from "react";
import styles from "./IconButton.module.css";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { Loader } from "../Loader";

const getClassName = getClassNameFactory("IconButton", styles);

export const IconButton = ({
  children,
  href,
  onClick,
  variant = "primary",
  type,
  disabled,
  tabIndex,
  newTab,
  fullWidth,
  title,
}: {
  children: ReactNode;
  href?: string;
  onClick?: (e: SyntheticEvent) => void | Promise<void>;
  variant?: "primary" | "secondary";
  type?: "button" | "submit" | "reset";
  disabled?: boolean;
  tabIndex?: number;
  newTab?: boolean;
  fullWidth?: boolean;
  title: string;
}) => {
  const [loading, setLoading] = useState(false);

  const ElementType = href ? "a" : "button";

  const el = (
    <ElementType
      className={getClassName({
        primary: variant === "primary",
        secondary: variant === "secondary",
        disabled,
        fullWidth,
      })}
      onClick={(e) => {
        if (!onClick) return;

        setLoading(true);
        Promise.resolve(onClick(e)).then(() => {
          setLoading(false);
        });
      }}
      type={type}
      disabled={disabled || loading}
      tabIndex={tabIndex}
      target={newTab ? "_blank" : undefined}
      rel={newTab ? "noreferrer" : undefined}
      href={href}
      title={title}
    >
      <span className={getClassName("title")}>{title}</span>
      {children}
      {loading && (
        <>
          &nbsp;&nbsp;
          <Loader size={14} />
        </>
      )}
    </ElementType>
  );

  return el;
};



================================================
FILE: packages/core/components/IconButton/index.ts
================================================
export * from "./IconButton";



================================================
FILE: packages/core/components/LayerTree/index.tsx
================================================
/* eslint-disable react-hooks/rules-of-hooks */
import styles from "./styles.module.css";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { ComponentConfig } from "../../types";
import { ItemSelector } from "../../lib/data/get-item";
import { scrollIntoView } from "../../lib/scroll-into-view";
import { ChevronDown, LayoutGrid, Layers, Type } from "lucide-react";
import { rootDroppableId } from "../../lib/root-droppable-id";
import { useCallback, useContext } from "react";
import { dropZoneContext, ZoneStoreContext } from "../DropZone/context";
import { getFrame } from "../../lib/get-frame";
import { onScrollEnd } from "../../lib/on-scroll-end";
import { useAppStore } from "../../store";
import { useShallow } from "zustand/react/shallow";
import { useContextStore } from "../../lib/use-context-store";

const getClassName = getClassNameFactory("LayerTree", styles);
const getClassNameLayer = getClassNameFactory("Layer", styles);

const Layer = ({
  index,
  itemId,
  zoneCompound,
}: {
  index: number;
  itemId: string;
  zoneCompound: string;
}) => {
  const ctx = useContext(dropZoneContext);

  const config = useAppStore((s) => s.config);
  const itemSelector = useAppStore((s) => s.state.ui.itemSelector);
  const dispatch = useAppStore((s) => s.dispatch);

  const setItemSelector = useCallback(
    (itemSelector: ItemSelector | null) => {
      dispatch({ type: "setUi", ui: { itemSelector } });
    },
    [dispatch]
  );

  const selecedItemId = useAppStore((s) => s.selectedItem?.props.id);

  const isSelected =
    selecedItemId === itemId ||
    (itemSelector && itemSelector.zone === rootDroppableId && !zoneCompound);

  // eslint-disable-next-line react-hooks/rules-of-hooks
  const nodeData = useAppStore((s) => s.state.indexes.nodes[itemId]);

  // const zonesForItem = findZonesForArea(data, itemId);
  const zonesForItem = useAppStore(
    useShallow((s) =>
      Object.keys(s.state.indexes.zones).filter(
        (z) => z.split(":")[0] === itemId
      )
    )
  );
  const containsZone = zonesForItem.length > 0;

  const zoneStore = useContext(ZoneStoreContext);
  const isHovering = useContextStore(
    ZoneStoreContext,
    (s) => s.hoveringComponent === itemId
  );

  const childIsSelected = useAppStore((s) => {
    const selectedData = s.state.indexes.nodes[s.selectedItem?.props.id];

    return (
      selectedData?.path.some((candidate) => {
        const [candidateId] = candidate.split(":");

        return candidateId === itemId;
      }) ?? false
    );
  });

  const componentConfig: ComponentConfig | undefined =
    config.components[nodeData.data.type];
  const label = componentConfig?.["label"] ?? nodeData.data.type.toString();

  return (
    <li
      className={getClassNameLayer({
        isSelected,
        isHovering,
        containsZone,
        childIsSelected,
      })}
    >
      <div className={getClassNameLayer("inner")}>
        <button
          type="button"
          className={getClassNameLayer("clickable")}
          onClick={() => {
            if (isSelected) {
              setItemSelector(null);
              return;
            }

            const frame = getFrame();

            const el = frame?.querySelector(
              `[data-puck-component="${itemId}"]`
            );

            if (!el) {
              setItemSelector({
                index,
                zone: zoneCompound,
              });
              return;
            }

            scrollIntoView(el as HTMLElement);

            onScrollEnd(frame, () => {
              setItemSelector({
                index,
                zone: zoneCompound,
              });
            });
          }}
          onMouseEnter={(e) => {
            e.stopPropagation();
            zoneStore.setState({ hoveringComponent: itemId });
          }}
          onMouseLeave={(e) => {
            e.stopPropagation();
            zoneStore.setState({ hoveringComponent: null });
          }}
        >
          {containsZone && (
            <div
              className={getClassNameLayer("chevron")}
              title={isSelected ? "Collapse" : "Expand"}
            >
              <ChevronDown size="12" />
            </div>
          )}
          <div className={getClassNameLayer("title")}>
            <div className={getClassNameLayer("icon")}>
              {nodeData.data.type === "Text" ||
              nodeData.data.type === "Heading" ? (
                <Type size="16" />
              ) : (
                <LayoutGrid size="16" />
              )}
            </div>
            <div className={getClassNameLayer("name")}>{label}</div>
          </div>
        </button>
      </div>
      {containsZone &&
        zonesForItem.map((subzone) => (
          <div key={subzone} className={getClassNameLayer("zones")}>
            <LayerTree zoneCompound={subzone} />
          </div>
        ))}
    </li>
  );
};

export const LayerTree = ({
  label: _label,
  zoneCompound,
}: {
  label?: string;
  zoneCompound: string;
}) => {
  const label = _label ?? zoneCompound.split(":")[1];

  const contentIds = useAppStore(
    useShallow((s) =>
      zoneCompound ? s.state.indexes.zones[zoneCompound]?.contentIds ?? [] : []
    )
  );

  return (
    <>
      {label && (
        <div className={getClassName("zoneTitle")}>
          <div className={getClassName("zoneIcon")}>
            <Layers size="16" />
          </div>
          {label}
        </div>
      )}
      <ul className={getClassName()}>
        {contentIds.length === 0 && (
          <div className={getClassName("helper")}>No items</div>
        )}
        {contentIds.map((itemId, i) => {
          return (
            <Layer
              index={i}
              itemId={itemId}
              zoneCompound={zoneCompound}
              key={itemId}
            />
          );
        })}
      </ul>
    </>
  );
};



================================================
FILE: packages/core/components/LayerTree/styles.module.css
================================================
.LayerTree {
  color: var(--puck-color-grey-03);
  font-family: var(--puck-font-family);
  font-size: var(--puck-font-size-xxs);
  margin: 0;
  position: relative;
  list-style: none;
  padding: 0;
}

.LayerTree-zoneTitle {
  color: var(--puck-color-grey-05);
  font-size: var(--puck-font-size-xxxs);
  text-transform: uppercase;
}

.LayerTree-helper {
  text-align: center;
  color: var(--puck-color-grey-07);
  margin: 8px 4px;
}

.Layer {
  position: relative;
  border: 1px solid transparent;
  border-radius: 4px;
}

.Layer-inner {
  border: 1px solid transparent;
  border-radius: 4px;
  transition: color 50ms ease-in;
}

.Layer--containsZone > .Layer-inner {
  padding-inline-start: 0;
}

.Layer-clickable {
  align-items: center;
  background: none;
  border: 0;
  border-radius: 4px;
  color: inherit;
  cursor: pointer;
  display: flex;
  font: inherit;
  padding-inline-start: 12px;
  padding-inline-end: 4px;
  width: 100%;
}

.Layer-clickable:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
  position: relative;
  z-index: 1;
}

@media (hover: hover) and (pointer: fine) {
  .Layer:not(.Layer--isSelected) > .Layer-inner:hover {
    border-color: var(--puck-color-azure-10);
    background: var(--puck-color-azure-11);
    color: var(--puck-color-azure-04);
    transition: none;
  }
}

.Layer--isSelected {
  border-color: var(--puck-color-azure-08);
}

.Layer--isSelected > .Layer-inner {
  background: var(--puck-color-azure-10);
}

.Layer--isSelected > .Layer-inner > .Layer-clickable > .Layer-chevron,
.Layer--childIsSelected > .Layer-inner > .Layer-clickable > .Layer-chevron {
  transform: scaleY(-1);
}

.Layer-zones {
  display: none;
  margin-inline-start: 12px;
}

.Layer--isSelected > .Layer-zones,
.Layer--childIsSelected > .Layer-zones {
  display: block;
}

.Layer-zones > .LayerTree {
  margin-inline-start: 12px;
}

.Layer-title,
.LayerTree-zoneTitle {
  display: flex;
  gap: 8px;
  align-items: center;
  margin: 8px 4px;
  overflow-x: hidden;
}

.Layer-name {
  overflow-x: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.Layer-icon {
  color: var(--puck-color-rose-07);
  margin-top: 4px;
}

.Layer-zoneIcon {
  color: var(--puck-color-grey-08);
  margin-top: 4px;
}



================================================
FILE: packages/core/components/Loader/index.tsx
================================================
import type { JSX } from "react";
import { getClassNameFactory } from "../../lib";
import styles from "./styles.module.css";

const getClassName = getClassNameFactory("Loader", styles);

export const Loader = ({
  color,
  size = 16,
  ...props
}: {
  color?: string;
  size?: number;
} & JSX.IntrinsicAttributes) => {
  return (
    <span
      className={getClassName()}
      style={{
        width: size,
        height: size,
        color,
      }}
      aria-label="loading"
      {...props}
    />
  );
};



================================================
FILE: packages/core/components/Loader/styles.module.css
================================================
@keyframes loader-animation {
  0% {
    transform: rotate(0deg) scale(1);
  }
  50% {
    transform: rotate(180deg) scale(0.8);
  }
  100% {
    transform: rotate(360deg) scale(1);
  }
}

.Loader {
  background: transparent;
  border-radius: 100%;
  border: 2px solid currentColor;
  border-bottom-color: transparent;
  display: inline-block;
  animation: loader-animation 1s 0s infinite linear;
  animation-fill-mode: both;
}



================================================
FILE: packages/core/components/MenuBar/index.tsx
================================================
import { Dispatch, ReactElement, SetStateAction } from "react";
import { Undo2Icon, Redo2Icon } from "lucide-react";

import { IconButton } from "../IconButton/IconButton";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { PuckAction } from "../../reducer";
import type { Data } from "../../types";

import styles from "./styles.module.css";
import { useAppStore } from "../../store";

const getClassName = getClassNameFactory("MenuBar", styles);

export function MenuBar<UserData extends Data>({
  menuOpen = false,
  renderHeaderActions,
  setMenuOpen,
}: {
  dispatch: (action: PuckAction) => void;
  onPublish?: (data: UserData) => void;
  menuOpen: boolean;
  renderHeaderActions?: () => ReactElement;
  setMenuOpen: Dispatch<SetStateAction<boolean>>;
}) {
  const back = useAppStore((s) => s.history.back);
  const forward = useAppStore((s) => s.history.forward);
  const hasFuture = useAppStore((s) => s.history.hasFuture());
  const hasPast = useAppStore((s) => s.history.hasPast());

  return (
    <div
      className={getClassName({ menuOpen })}
      onClick={(event) => {
        const element = event.target as HTMLElement;

        if (window.matchMedia("(min-width: 638px)").matches) {
          return;
        }
        if (
          element.tagName === "A" &&
          element.getAttribute("href")?.startsWith("#")
        ) {
          setMenuOpen(false);
        }
      }}
    >
      <div className={getClassName("inner")}>
        <div className={getClassName("history")}>
          <IconButton title="undo" disabled={!hasPast} onClick={back}>
            <Undo2Icon size={21} />
          </IconButton>
          <IconButton title="redo" disabled={!hasFuture} onClick={forward}>
            <Redo2Icon size={21} />
          </IconButton>
        </div>
        <>{renderHeaderActions && renderHeaderActions()}</>
      </div>
    </div>
  );
}



================================================
FILE: packages/core/components/MenuBar/styles.module.css
================================================
.MenuBar {
  background-color: var(--puck-color-white);
  border-bottom: 1px solid var(--puck-color-grey-09);
  display: none;
  left: 0;
  margin-top: 1px;
  padding: 8px 16px;
  position: absolute;
  right: 0;
  top: 100%;
  z-index: 2;
}

.MenuBar--menuOpen {
  display: block;
}

@media (min-width: 638px) {
  .MenuBar {
    border: none;
    display: block;
    margin-top: 0;
    overflow-y: visible;
    padding: 0;
    position: static;
  }
}

.MenuBar-inner {
  align-items: center;
  display: flex;
  flex-wrap: wrap;
  gap: 8px 16px;
  justify-content: flex-end;
}

@media (min-width: 638px) {
  .MenuBar-inner {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
  }
}

.MenuBar-history {
  display: flex;
}



================================================
FILE: packages/core/components/Modal/index.tsx
================================================
import { ReactNode, useEffect, useState } from "react";
import getClassNameFactory from "../../lib/get-class-name-factory";
import styles from "./styles.module.css";
import { createPortal } from "react-dom";

const getClassName = getClassNameFactory("Modal", styles);

export const Modal = ({
  children,
  onClose,
  isOpen,
}: {
  children: ReactNode;
  onClose: () => void;
  isOpen: boolean;
}) => {
  const [rootEl, setRootEl] = useState<any>(null);

  useEffect(() => {
    setRootEl(document.getElementById("puck-portal-root"));
  }, []);

  if (!rootEl) {
    return <div />;
  }

  return createPortal(
    <div className={getClassName({ isOpen })} onClick={onClose}>
      <div
        className={getClassName("inner")}
        onClick={(e) => e.stopPropagation()}
      >
        {children}
      </div>
    </div>,
    rootEl
  );
};



================================================
FILE: packages/core/components/Modal/styles.module.css
================================================
.Modal {
  background: color-mix(in srgb, var(--puck-color-black) 75%, transparent);
  display: none;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  bottom: 0;
  right: 0;
  z-index: 1;
  padding: 32px;
}

.Modal--isOpen {
  display: flex;
}

.Modal-inner {
  width: 100%;
  max-width: 1024px;
  border-radius: 8px;
  overflow: hidden;
  background: var(--puck-color-white);
  display: flex;
  flex-direction: column;
  max-height: 90dvh;
}



================================================
FILE: packages/core/components/OutlineList/index.tsx
================================================
import styles from "./styles.module.css";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { ReactNode, SyntheticEvent } from "react";

const getClassName = getClassNameFactory("OutlineList", styles);
const getClassNameItem = getClassNameFactory("OutlineListItem", styles);

export const OutlineList = ({ children }: { children: ReactNode }) => {
  return <ul className={getClassName()}>{children}</ul>;
};

// eslint-disable-next-line react/display-name
OutlineList.Clickable = ({ children }: { children: ReactNode }) => (
  <div className={getClassNameItem({ clickable: true })}>{children}</div>
);

// eslint-disable-next-line react/display-name
OutlineList.Item = ({
  children,
  onClick,
}: {
  children: ReactNode;
  onClick?: (e: SyntheticEvent) => void;
}) => {
  return (
    <li
      className={getClassNameItem({ clickable: !!onClick })}
      onClick={onClick}
    >
      {children}
    </li>
  );
};



================================================
FILE: packages/core/components/OutlineList/styles.module.css
================================================
.OutlineList {
  color: var(--puck-color-grey-03);
  font-family: var(--puck-font-family);
  margin: 0;
  padding-inline-start: 16px;
  position: relative;
  list-style: none;
}

.OutlineList::before {
  background: var(--puck-color-grey-08);
  position: absolute;
  left: -1px;
  top: 0px;
  width: 1px;
  height: calc(100% - 9px);
  content: "";
}

.OutlineList:dir(rtl)::before {
  left: unset;
  right: -1px;
}

.OutlineListItem {
  position: relative;
  margin-bottom: 4px;
}

.OutlineListItem::before {
  background: var(--puck-color-grey-08);
  position: absolute;
  left: -17px;
  top: 9px;
  width: 13px;
  height: 1px;
  content: "";
}

.OutlineListItem:dir(rtl)::before {
  left: unset;
  right: -17px;
}

.OutlineListItem--clickable {
  cursor: pointer;
  transition: color 50ms ease-in;
}

.OutlineListItem--clickable:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
}

@media (hover: hover) and (pointer: fine) {
  .OutlineListItem--clickable:hover {
    color: var(--puck-color-azure-04);
    transition: none;
  }
}

.OutlineListItem--clickable:active {
  color: var(--puck-color-azure-03);
  transition: none;
}

.OutlineListItem > .OutlineList {
  margin: 8px 0;
}



================================================
FILE: packages/core/components/Puck/index.tsx
================================================
/* eslint-disable react-hooks/rules-of-hooks */
import {
  Context,
  createContext,
  PropsWithChildren,
  ReactElement,
  ReactNode,
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";

import type {
  UiState,
  IframeConfig,
  OnAction,
  Overrides,
  Permissions,
  Plugin,
  InitialHistory,
  UserGenerics,
  Config,
  Data,
  Metadata,
} from "../../types";

import { SidebarSection } from "../SidebarSection";

import { PuckAction } from "../../reducer";
import getClassNameFactory from "../../lib/get-class-name-factory";
import {
  createAppStore,
  defaultAppState,
  useAppStore,
  appStoreContext,
  AppStore,
} from "../../store";
import styles from "./styles.module.css";
import { Fields } from "./components/Fields";
import { Components } from "./components/Components";
import { Preview } from "./components/Preview";
import { Outline } from "./components/Outline";
import { Canvas } from "./components/Canvas";
import { defaultViewports } from "../ViewportControls/default-viewports";
import { Viewports } from "../../types";
import { DragDropContext } from "../DragDropContext";
import { useLoadedOverrides } from "../../lib/use-loaded-overrides";
import { DefaultOverride } from "../DefaultOverride";
import { useInjectGlobalCss } from "../../lib/use-inject-css";
import { usePreviewModeHotkeys } from "../../lib/use-preview-mode-hotkeys";
import { useRegisterHistorySlice } from "../../store/slices/history";
import { useRegisterPermissionsSlice } from "../../store/slices/permissions";
import { monitorHotkeys, useMonitorHotkeys } from "../../lib/use-hotkey";
import { getFrame } from "../../lib/get-frame";
import {
  UsePuckStoreContext,
  useRegisterUsePuckStore,
} from "../../lib/use-puck";
import { walkAppState } from "../../lib/data/walk-app-state";
import { PrivateAppState } from "../../types/Internal";
import fdeq from "fast-deep-equal";
import { Header } from "./components/Header";

const getClassName = getClassNameFactory("Puck", styles);
const getLayoutClassName = getClassNameFactory("PuckLayout", styles);

const FieldSideBar = () => {
  const title = useAppStore((s) =>
    s.selectedItem
      ? s.config.components[s.selectedItem.type]?.["label"] ??
        s.selectedItem.type.toString()
      : "Page"
  );

  return (
    <SidebarSection noPadding noBorderTop showBreadcrumbs title={title}>
      <Fields />
    </SidebarSection>
  );
};

type PuckProps<
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
> = {
  children?: ReactNode;
  config: UserConfig;
  data: Partial<G["UserData"] | Data>;
  ui?: Partial<UiState>;
  onChange?: (data: G["UserData"]) => void;
  onPublish?: (data: G["UserData"]) => void;
  onAction?: OnAction<G["UserData"]>;
  permissions?: Partial<Permissions>;
  plugins?: Plugin[];
  overrides?: Partial<Overrides>;
  renderHeader?: (props: {
    children: ReactNode;
    dispatch: (action: PuckAction) => void;
    state: G["UserAppState"];
  }) => ReactElement;
  renderHeaderActions?: (props: {
    state: G["UserAppState"];
    dispatch: (action: PuckAction) => void;
  }) => ReactElement;
  headerTitle?: string;
  headerPath?: string;
  viewports?: Viewports;
  iframe?: IframeConfig;
  dnd?: {
    disableAutoScroll?: boolean;
  };
  initialHistory?: InitialHistory;
  metadata?: Metadata;
};

const propsContext = createContext<Partial<PuckProps>>({});

function PropsProvider<UserConfig extends Config = Config>(
  props: PuckProps<UserConfig>
) {
  return (
    <propsContext.Provider value={props as PuckProps}>
      {props.children}
    </propsContext.Provider>
  );
}

export const usePropsContext = () =>
  useContext<PuckProps>(propsContext as Context<PuckProps>);

function PuckProvider<
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
>({ children }: PropsWithChildren) {
  const {
    config,
    data: initialData,
    ui: initialUi,
    onChange,
    permissions = {},
    plugins,
    overrides,
    viewports = defaultViewports,
    iframe: _iframe,
    initialHistory: _initialHistory,
    metadata,
    onAction,
  } = usePropsContext();

  const iframe: IframeConfig = useMemo(
    () => ({
      enabled: true,
      waitForStyles: true,
      ..._iframe,
    }),
    [_iframe]
  );

  const [generatedAppState] = useState<G["UserAppState"]>(() => {
    const initial = { ...defaultAppState.ui, ...initialUi };

    let clientUiState: Partial<G["UserAppState"]["ui"]> = {};

    if (typeof window !== "undefined") {
      // Hide side bars on mobile
      if (window.matchMedia("(max-width: 638px)").matches) {
        clientUiState = {
          ...clientUiState,
          leftSideBarVisible: false,
          rightSideBarVisible: false,
        };
      }

      const viewportWidth = window.innerWidth;

      const viewportDifferences = Object.entries(viewports)
        .map(([key, value]) => ({
          key,
          diff: Math.abs(viewportWidth - value.width),
        }))
        .sort((a, b) => (a.diff > b.diff ? 1 : -1));

      const closestViewport = viewportDifferences[0].key as any;

      if (iframe.enabled) {
        clientUiState = {
          ...clientUiState,
          viewports: {
            ...initial.viewports,

            current: {
              ...initial.viewports.current,
              height:
                initialUi?.viewports?.current?.height ||
                viewports[closestViewport]?.height ||
                "auto",
              width:
                initialUi?.viewports?.current?.width ||
                viewports[closestViewport]?.width,
            },
          },
        };
      }
    }

    // DEPRECATED
    if (
      Object.keys(initialData?.root || {}).length > 0 &&
      !initialData?.root?.props
    ) {
      console.error(
        "Warning: Defining props on `root` is deprecated. Please use `root.props`, or republish this page to migrate automatically."
      );
    }

    // Deprecated
    const rootProps = initialData?.root?.props || initialData?.root || {};

    const defaultedRootProps = {
      ...config.root?.defaultProps,
      ...rootProps,
    };

    const newAppState = {
      ...defaultAppState,
      data: {
        ...initialData,
        root: { ...initialData?.root, props: defaultedRootProps },
        content: initialData.content || [],
      },
      ui: {
        ...initial,
        ...clientUiState,
        // Store categories under componentList on state to allow render functions and plugins to modify
        componentList: config.categories
          ? Object.entries(config.categories).reduce(
              (acc, [categoryName, category]) => {
                return {
                  ...acc,
                  [categoryName]: {
                    title: category.title,
                    components: category.components,
                    expanded: category.defaultExpanded,
                    visible: category.visible,
                  },
                };
              },
              {}
            )
          : {},
      },
    } as G["UserAppState"];

    return walkAppState(newAppState, config);
  });

  const { appendData = true } = _initialHistory || {};

  const [blendedHistories] = useState(
    [
      ...(_initialHistory?.histories || []),
      ...(appendData ? [{ state: generatedAppState }] : []),
    ].map((history) => {
      // Inject default data to enable partial history injections
      let newState = { ...generatedAppState, ...history.state };

      // The history generally doesn't include the indexes, so calculate them for each state item
      if (!(history.state as PrivateAppState).indexes) {
        newState = walkAppState(newState, config);
      }

      return {
        ...history,
        state: newState,
      };
    })
  );

  const initialHistoryIndex =
    _initialHistory?.index || blendedHistories.length - 1;
  const initialAppState = blendedHistories[initialHistoryIndex].state;

  // Load all plugins into the overrides
  const loadedOverrides = useLoadedOverrides({
    overrides: overrides,
    plugins: plugins,
  });

  const generateAppStore = useCallback(
    (state?: PrivateAppState) => {
      return {
        state,
        config,
        plugins: plugins || [],
        overrides: loadedOverrides,
        viewports,
        iframe,
        onAction,
        metadata,
      };
    },
    [
      initialAppState,
      config,
      plugins,
      loadedOverrides,
      viewports,
      iframe,
      onAction,
      metadata,
    ]
  );

  const [appStore] = useState(() =>
    createAppStore(generateAppStore(initialAppState))
  );

  useEffect(() => {
    if (process.env.NODE_ENV !== "production") {
      (window as any).__PUCK_INTERNAL_DO_NOT_USE = { appStore };
    }
  }, [appStore]);

  useEffect(() => {
    const state = appStore.getState().state;

    appStore.setState({
      ...generateAppStore(state),
    });
  }, [config, plugins, loadedOverrides, viewports, iframe, onAction, metadata]);

  useRegisterHistorySlice(appStore, {
    histories: blendedHistories,
    index: initialHistoryIndex,
    initialAppState,
  });

  const previousData = useRef<Data>(null);

  useEffect(() => {
    appStore.subscribe(
      (s) => s.state.data,
      (data) => {
        if (onChange) {
          if (fdeq(data, previousData.current)) return;

          onChange(data as G["UserData"]);

          previousData.current = data;
        }
      }
    );
  }, []);

  useRegisterPermissionsSlice(appStore, permissions);

  const uPuckStore = useRegisterUsePuckStore(appStore);

  useEffect(() => {
    const { resolveAndCommitData } = appStore.getState();

    resolveAndCommitData();
  }, []);

  return (
    <appStoreContext.Provider value={appStore}>
      <UsePuckStoreContext.Provider value={uPuckStore}>
        {children}
      </UsePuckStoreContext.Provider>
    </appStoreContext.Provider>
  );
}

function PuckLayout<
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
>({ children }: PropsWithChildren) {
  const {
    iframe: _iframe,
    dnd,
    initialHistory: _initialHistory,
  } = usePropsContext();

  const iframe: IframeConfig = useMemo(
    () => ({
      enabled: true,
      waitForStyles: true,
      ..._iframe,
    }),
    [_iframe]
  );

  useInjectGlobalCss(iframe.enabled);

  const leftSideBarVisible = useAppStore((s) => s.state.ui.leftSideBarVisible);
  const rightSideBarVisible = useAppStore(
    (s) => s.state.ui.rightSideBarVisible
  );

  const dispatch = useAppStore((s) => s.dispatch);

  useEffect(() => {
    if (!window.matchMedia("(min-width: 638px)").matches) {
      dispatch({
        type: "setUi",
        ui: {
          leftSideBarVisible: false,
          rightSideBarVisible: false,
        },
      });
    }

    const handleResize = () => {
      if (!window.matchMedia("(min-width: 638px)").matches) {
        dispatch({
          type: "setUi",
          ui: (ui: UiState) => ({
            ...ui,
            ...(ui.rightSideBarVisible ? { leftSideBarVisible: false } : {}),
          }),
        });
      }
    };

    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  const overrides = useAppStore((s) => s.overrides);

  const CustomPuck = useMemo(
    () => overrides.puck || DefaultOverride,
    [overrides]
  );

  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  const ready = useAppStore((s) => s.status === "READY");

  useMonitorHotkeys();

  useEffect(() => {
    if (ready && iframe.enabled) {
      const frameDoc = getFrame();

      if (frameDoc) {
        return monitorHotkeys(frameDoc);
      }
    }
  }, [ready, iframe.enabled]);

  usePreviewModeHotkeys();

  return (
    <div className={`Puck ${getClassName()}`}>
      <DragDropContext disableAutoScroll={dnd?.disableAutoScroll}>
        <CustomPuck>
          {children || (
            <div
              className={getLayoutClassName({
                leftSideBarVisible,
                mounted,
                rightSideBarVisible,
              })}
            >
              <div className={getLayoutClassName("inner")}>
                <Header />
                <div className={getLayoutClassName("leftSideBar")}>
                  <SidebarSection title="Components" noBorderTop>
                    <Components />
                  </SidebarSection>
                  <SidebarSection title="Outline">
                    <Outline />
                  </SidebarSection>
                </div>
                <Canvas />
                <div className={getLayoutClassName("rightSideBar")}>
                  <FieldSideBar />
                </div>
              </div>
            </div>
          )}
        </CustomPuck>
      </DragDropContext>
      <div id="puck-portal-root" className={getClassName("portal")} />
    </div>
  );
}

export function Puck<
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
>(props: PuckProps<UserConfig>) {
  return (
    <PropsProvider {...props}>
      <PuckProvider {...props}>
        <PuckLayout {...props} />
      </PuckProvider>
    </PropsProvider>
  );
}

Puck.Components = Components;
Puck.Fields = Fields;
Puck.Outline = Outline;
Puck.Preview = Preview;



================================================
FILE: packages/core/components/Puck/styles.module.css
================================================
/*
 * Puck's responsive layout uses minimum viewport widths slightly _below_ common
 * framework/device breakpoints, and ensures that the width of the resulting
 * Puck page preview (zoomed at 75%) is slightly _above_ common framework/device
 * breakpoints. This can help alleviate some of the pain when editing responsive
 * pages in a preview area that is narrower than the reported viewport width.
 *
 * Viewport | Puck page @ zoom 0.75
 * --------------------------------
 * -        | 322px
 * 766px    | 322px
 * 990px    | 604px
 * 1022px   | 646px
 * 1198px   | 801px
 * 1398px   | 1025px
 * 1598px   | 1212px
 */

.Puck {
  --puck-space-px: 16px;
  font-family: var(--puck-font-family);
  overflow-x: hidden;
}

@media (min-width: 766px) {
  .Puck {
    overflow-x: auto;
  }
}

.Puck-portal {
  position: relative;
  z-index: 2;
}

/* Puck Layout */

.PuckLayout-inner {
  --puck-frame-width: auto;
  --puck-side-bar-width: 0px;
  display: grid;
  grid-template-areas: "header header header" "left editor right";
  grid-template-columns: 0 var(--puck-frame-width) 0;
  grid-template-rows: min-content auto;
  height: 100dvh;
  position: relative;
  z-index: 0;
}

.PuckLayout--mounted .PuckLayout-inner {
  --puck-side-bar-width: 186px;
}

.PuckLayout--leftSideBarVisible .PuckLayout-inner {
  grid-template-columns:
    var(--puck-side-bar-width) var(--puck-frame-width)
    0;
}

.PuckLayout--rightSideBarVisible .PuckLayout-inner {
  grid-template-columns:
    0 var(--puck-frame-width)
    var(--puck-side-bar-width);
}

.PuckLayout--leftSideBarVisible.PuckLayout--rightSideBarVisible
  .PuckLayout-inner {
  grid-template-columns:
    var(--puck-side-bar-width) var(--puck-frame-width)
    var(--puck-side-bar-width);
}

@media (min-width: 458px) {
  .PuckLayout-mounted .PuckLayout-inner {
    --puck-frame-width: minmax(266px, auto);
  }
}

@media (min-width: 638px) {
  .PuckLayout .PuckLayout-inner {
    --puck-side-bar-width: minmax(186px, 250px);
  }
}

@media (min-width: 766px) {
  .PuckLayout .PuckLayout-inner {
    --puck-frame-width: auto;
  }
}

@media (min-width: 990px) {
  .PuckLayout .PuckLayout-inner {
    --puck-side-bar-width: 256px;
  }
}

@media (min-width: 1198px) {
  .PuckLayout .PuckLayout-inner {
    --puck-side-bar-width: 274px;
  }
}

@media (min-width: 1398px) {
  .PuckLayout .PuckLayout-inner {
    --puck-side-bar-width: 290px;
  }
}

@media (min-width: 1598px) {
  .PuckLayout .PuckLayout-inner {
    --puck-side-bar-width: 320px;
  }
}

.PuckLayout-leftSideBar {
  background: var(--puck-color-grey-12);
  border-inline-end: 1px solid var(--puck-color-grey-09);
  display: flex;
  flex-direction: column;
  grid-area: left;
  overflow-y: auto;
}

.PuckLayout-rightSideBar {
  background: var(--puck-color-white);
  border-inline-start: 1px solid var(--puck-color-grey-09);
  display: flex;
  flex-direction: column;
  grid-area: right;
  overflow-y: auto;
}



================================================
FILE: packages/core/components/Puck/__tests__/index.tsx
================================================
import { act, render, screen } from "@testing-library/react";
import { Config } from "../../../types";
import "@testing-library/jest-dom";

jest.mock("../styles.module.css");
jest.mock("@dnd-kit/react");

Object.defineProperty(window, "matchMedia", {
  writable: true,
  value: (query: string) => ({
    matches: false, // default → desktop
    media: query,
    onchange: null,
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    addListener: jest.fn(), // ⬅️ legacy APIs some libs still call
    removeListener: jest.fn(),
    dispatchEvent: jest.fn(),
  }),
});

jest.mock("@dnd-kit/react", () => {
  const original = jest.requireActual("@dnd-kit/react");
  return {
    ...original,
    // Provider becomes a no-op wrapper
    DragDropProvider: ({ children }: { children: React.ReactNode }) => (
      <>{children}</>
    ),

    // Hooks return dummy objects so destructuring works
    useDroppable: () => ({
      ref: () => undefined,
      setNodeRef: () => undefined,
      isOver: false,
    }),
    useDraggable: () => ({
      attributes: {},
      listeners: {},
      setNodeRef: () => undefined,
      isDragging: false,
    }),
  };
});

class ResizeObserver {
  observe() {}
  unobserve() {}
  disconnect() {}
}
(global as any).ResizeObserver = ResizeObserver;

type PuckInternal = {
  appStore: AppStoreApi;
};

const getInternal = () => {
  return (window as any).__PUCK_INTERNAL_DO_NOT_USE as PuckInternal;
};

import { Puck } from "../index";
import { AppStoreApi } from "../../../store";

describe("Puck", () => {
  const componentARender = jest.fn(() => null);
  const componentBRender = jest.fn(() => null);
  const rootRender = jest.fn(() => null);

  const config: Config = {
    root: {
      render: ({ children }) => {
        rootRender();
        return <div>Root{children}</div>;
      },
    },
    components: {
      componentA: {
        render: () => {
          componentARender();
          return <div>Component A</div>;
        },
      },
      componentB: {
        render: () => {
          componentBRender();
          return <div>Component A</div>;
        },
      },
    },
  };

  afterEach(() => {
    rootRender.mockClear();
    componentARender.mockClear();
    componentBRender.mockClear();
  });

  // flush any queued state updates
  const flush = () => act(async () => {});

  it("root renders", async () => {
    render(<Puck config={config} data={{}} iframe={{ enabled: false }} />);

    await flush();

    expect(rootRender).toHaveBeenCalled();
    expect(screen.getByText("Root")).toBeInTheDocument();
  });

  it("should generate the correct state on mount", async () => {
    render(<Puck config={config} data={{}} iframe={{ enabled: false }} />);

    await flush();

    const { appStore } = getInternal();

    expect(appStore.getState()).toMatchSnapshot();
  });

  it("should index slots on mount", async () => {
    render(
      <Puck
        config={{
          root: {
            fields: {
              content: { type: "slot" },
            },
          },
          components: {},
        }}
        data={{
          root: {
            props: {
              content: [],
            },
          },
        }}
        iframe={{ enabled: false }}
      />
    );

    await flush();

    const { appStore } = getInternal();

    expect(appStore.getState().state.indexes).toMatchInlineSnapshot(`
      {
        "nodes": {
          "root": {
            "data": {
              "props": {
                "content": [],
                "id": "root",
              },
              "type": "root",
            },
            "flatData": {
              "props": {
                "content": null,
                "id": "root",
              },
              "type": "root",
            },
            "parentId": null,
            "path": [],
            "zone": "",
          },
        },
        "zones": {
          "root:content": {
            "contentIds": [],
            "type": "slot",
          },
          "root:default-zone": {
            "contentIds": [],
            "type": "root",
          },
        },
      }
    `);
  });
});



================================================
FILE: packages/core/components/Puck/__tests__/__snapshots__/index.tsx.snap
================================================
// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Puck should generate the correct state on mount 1`] = `
{
  "componentState": {},
  "config": {
    "components": {
      "componentA": {
        "render": [Function],
      },
      "componentB": {
        "render": [Function],
      },
    },
    "root": {
      "render": [Function],
    },
  },
  "dispatch": [Function],
  "fields": {
    "fields": {
      "title": {
        "type": "text",
      },
    },
    "id": undefined,
    "lastResolvedData": {},
    "loading": false,
  },
  "getComponentConfig": [Function],
  "history": {
    "back": [Function],
    "currentHistory": [Function],
    "forward": [Function],
    "hasFuture": [Function],
    "hasPast": [Function],
    "histories": [
      {
        "state": {
          "data": {
            "content": [],
            "root": {
              "props": {},
            },
            "zones": {},
          },
          "indexes": {
            "nodes": {
              "root": {
                "data": {
                  "props": {
                    "id": "root",
                  },
                  "type": "root",
                },
                "flatData": {
                  "props": {
                    "id": "root",
                  },
                  "type": "root",
                },
                "parentId": null,
                "path": [],
                "zone": "",
              },
            },
            "zones": {
              "root:default-zone": {
                "contentIds": [],
                "type": "root",
              },
            },
          },
          "ui": {
            "arrayState": {},
            "componentList": {},
            "field": {
              "focus": null,
            },
            "isDragging": false,
            "itemSelector": null,
            "leftSideBarVisible": true,
            "previewMode": "edit",
            "rightSideBarVisible": true,
            "viewports": {
              "controlsVisible": true,
              "current": {
                "height": "auto",
                "width": 360,
              },
              "options": [],
            },
          },
        },
      },
    ],
    "index": 0,
    "initialAppState": {
      "data": {
        "content": [],
        "root": {
          "props": {},
        },
        "zones": {},
      },
      "indexes": {
        "nodes": {
          "root": {
            "data": {
              "props": {
                "id": "root",
              },
              "type": "root",
            },
            "flatData": {
              "props": {
                "id": "root",
              },
              "type": "root",
            },
            "parentId": null,
            "path": [],
            "zone": "",
          },
        },
        "zones": {
          "root:default-zone": {
            "contentIds": [],
            "type": "root",
          },
        },
      },
      "ui": {
        "arrayState": {},
        "componentList": {},
        "field": {
          "focus": null,
        },
        "isDragging": false,
        "itemSelector": null,
        "leftSideBarVisible": true,
        "previewMode": "edit",
        "rightSideBarVisible": true,
        "viewports": {
          "controlsVisible": true,
          "current": {
            "height": "auto",
            "width": 360,
          },
          "options": [],
        },
      },
    },
    "nextHistory": [Function],
    "prevHistory": [Function],
    "record": [Function],
    "setHistories": [Function],
    "setHistoryIndex": [Function],
  },
  "iframe": {
    "enabled": false,
    "waitForStyles": true,
  },
  "metadata": undefined,
  "nodes": {
    "nodes": {},
    "registerNode": [Function],
    "unregisterNode": [Function],
  },
  "onAction": undefined,
  "overrides": {},
  "pendingLoadTimeouts": {},
  "permissions": {
    "cache": {},
    "getPermissions": [Function],
    "globalPermissions": {
      "delete": true,
      "drag": true,
      "duplicate": true,
      "edit": true,
      "insert": true,
    },
    "refreshPermissions": [Function],
    "resolvePermissions": [Function],
    "resolvedPermissions": {},
  },
  "plugins": [],
  "resolveAndCommitData": [Function],
  "resolveComponentData": [Function],
  "selectedItem": null,
  "setComponentLoading": [Function],
  "setComponentState": [Function],
  "setStatus": [Function],
  "setUi": [Function],
  "setZoomConfig": [Function],
  "state": {
    "data": {
      "content": [],
      "root": {
        "props": {},
      },
      "zones": {},
    },
    "indexes": {
      "nodes": {
        "root": {
          "data": {
            "props": {
              "id": "root",
            },
            "type": "root",
          },
          "flatData": {
            "props": {
              "id": "root",
            },
            "type": "root",
          },
          "parentId": null,
          "path": [],
          "zone": "",
        },
      },
      "zones": {
        "root:default-zone": {
          "contentIds": [],
          "type": "root",
        },
      },
    },
    "ui": {
      "arrayState": {},
      "componentList": {},
      "field": {
        "focus": null,
      },
      "isDragging": false,
      "itemSelector": null,
      "leftSideBarVisible": false,
      "previewMode": "edit",
      "rightSideBarVisible": false,
      "viewports": {
        "controlsVisible": true,
        "current": {
          "height": "auto",
          "width": 360,
        },
        "options": [],
      },
    },
  },
  "status": "READY",
  "unsetComponentLoading": [Function],
  "viewports": [
    {
      "height": "auto",
      "icon": "Smartphone",
      "label": "Small",
      "width": 360,
    },
    {
      "height": "auto",
      "icon": "Tablet",
      "label": "Medium",
      "width": 768,
    },
    {
      "height": "auto",
      "icon": "Monitor",
      "label": "Large",
      "width": 1280,
    },
  ],
  "zoomConfig": {
    "autoZoom": NaN,
    "rootHeight": 0,
    "zoom": NaN,
  },
}
`;



================================================
FILE: packages/core/components/Puck/components/Canvas/index.tsx
================================================
import { getBox } from "css-box-model";
import {
  ReactNode,
  useCallback,
  useEffect,
  useMemo,
  useRef,
  useState,
} from "react";
import { useAppStore } from "../../../../store";
import { ViewportControls } from "../../../ViewportControls";
import styles from "./styles.module.css";
import { getClassNameFactory } from "../../../../lib";
import { Preview } from "../Preview";
import { getZoomConfig } from "../../../../lib/get-zoom-config";
import { UiState } from "../../../../types";
import { Loader } from "../../../Loader";
import { useShallow } from "zustand/react/shallow";

const getClassName = getClassNameFactory("PuckCanvas", styles);

const ZOOM_ON_CHANGE = true;

export const Canvas = () => {
  const {
    dispatch,
    overrides,
    setUi,
    zoomConfig,
    setZoomConfig,
    status,
    iframe,
  } = useAppStore(
    useShallow((s) => ({
      dispatch: s.dispatch,
      overrides: s.overrides,
      setUi: s.setUi,
      zoomConfig: s.zoomConfig,
      setZoomConfig: s.setZoomConfig,
      status: s.status,
      iframe: s.iframe,
    }))
  );
  const { leftSideBarVisible, rightSideBarVisible, viewports } = useAppStore(
    useShallow((s) => ({
      leftSideBarVisible: s.state.ui.leftSideBarVisible,
      rightSideBarVisible: s.state.ui.rightSideBarVisible,
      viewports: s.state.ui.viewports,
    }))
  );

  const frameRef = useRef<HTMLDivElement>(null);

  const [showTransition, setShowTransition] = useState(false);

  const defaultRender = useMemo<
    React.FunctionComponent<{ children?: ReactNode }>
  >(() => {
    const PuckDefault = ({ children }: { children?: ReactNode }) => (
      <>{children}</>
    );

    return PuckDefault;
  }, []);

  const CustomPreview = useMemo(
    () => overrides.preview || defaultRender,
    [overrides]
  );

  const getFrameDimensions = useCallback(() => {
    if (frameRef.current) {
      const frame = frameRef.current;

      const box = getBox(frame);

      return { width: box.contentBox.width, height: box.contentBox.height };
    }

    return { width: 0, height: 0 };
  }, [frameRef]);

  const resetAutoZoom = useCallback(
    (newViewports: UiState["viewports"] = viewports) => {
      if (frameRef.current) {
        setZoomConfig(
          getZoomConfig(
            newViewports?.current,
            frameRef.current,
            zoomConfig.zoom
          )
        );
      }
    },
    [frameRef, zoomConfig, viewports]
  );

  // Auto zoom
  useEffect(() => {
    setShowTransition(false);
    resetAutoZoom(viewports);
  }, [frameRef, leftSideBarVisible, rightSideBarVisible]);

  // Constrain height
  useEffect(() => {
    const { height: frameHeight } = getFrameDimensions();

    if (viewports.current.height === "auto") {
      setZoomConfig({
        ...zoomConfig,
        rootHeight: frameHeight / zoomConfig.zoom,
      });
    }
  }, [zoomConfig.zoom]);

  // Zoom whenever state changes, even if external driver
  useEffect(() => {
    if (ZOOM_ON_CHANGE) {
      setShowTransition(true);
      resetAutoZoom(viewports);
    }
  }, [viewports.current.width]);

  // Resize based on window size
  useEffect(() => {
    const cb = () => {
      setShowTransition(false);
      resetAutoZoom();
    };

    window.addEventListener("resize", cb);

    return () => {
      window.removeEventListener("resize", cb);
    };
  }, []);

  const [showLoader, setShowLoader] = useState(false);

  useEffect(() => {
    setTimeout(() => {
      setShowLoader(true);
    }, 500);
  }, []);

  return (
    <div
      className={getClassName({
        ready: status === "READY" || !iframe.enabled || !iframe.waitForStyles,
        showLoader,
      })}
      onClick={() =>
        dispatch({
          type: "setUi",
          ui: { itemSelector: null },
          recordHistory: true,
        })
      }
    >
      {viewports.controlsVisible && iframe.enabled && (
        <div className={getClassName("controls")}>
          <ViewportControls
            autoZoom={zoomConfig.autoZoom}
            zoom={zoomConfig.zoom}
            onViewportChange={(viewport) => {
              setShowTransition(true);

              const uiViewport = {
                ...viewport,
                height: viewport.height || "auto",
                zoom: zoomConfig.zoom,
              };

              const newUi: Partial<UiState> = {
                viewports: { ...viewports, current: uiViewport },
                itemSelector: null,
              };

              setUi(newUi);

              if (ZOOM_ON_CHANGE) {
                resetAutoZoom({ ...viewports, current: uiViewport });
              }
            }}
            onZoom={(zoom) => {
              setShowTransition(true);

              setZoomConfig({ ...zoomConfig, zoom });
            }}
          />
        </div>
      )}
      <div className={getClassName("inner")} ref={frameRef}>
        <div
          className={getClassName("root")}
          style={{
            width: iframe.enabled ? viewports.current.width : "100%",
            height: zoomConfig.rootHeight,
            transform: iframe.enabled ? `scale(${zoomConfig.zoom})` : undefined,
            transition: showTransition
              ? "width 150ms ease-out, height 150ms ease-out, transform 150ms ease-out"
              : "",
            overflow: iframe.enabled ? undefined : "auto",
          }}
          suppressHydrationWarning // Suppress hydration warning as frame is not visible until after load
          id="puck-canvas-root"
          onTransitionEnd={() => {
            window.dispatchEvent(
              new CustomEvent("viewportchange", {
                bubbles: true,
                cancelable: false,
              })
            );
          }}
        >
          <CustomPreview>
            <Preview />
          </CustomPreview>
        </div>
        <div className={getClassName("loader")}>
          <Loader size={24} />
        </div>
      </div>
    </div>
  );
};



================================================
FILE: packages/core/components/Puck/components/Canvas/styles.module.css
================================================
.PuckCanvas {
  background: var(--puck-color-grey-11);
  display: flex;
  grid-area: editor;
  flex-direction: column;
  padding: var(--puck-space-px);
  overflow: auto;
}

@media (min-width: 1198px) {
  .PuckCanvas {
    padding: calc(var(--puck-space-px) * 1.5);
    padding-top: var(--puck-space-px);
  }

  .PuckCanvas:not(.PuckCanvas:has(.PuckCanvas-controls)) {
    padding-top: calc(var(--puck-space-px) * 1.5);
  }
}

.PuckCanvas-inner {
  display: flex;
  height: 100%;
  justify-content: center;
  min-width: 358px;
  position: relative;
  width: 100%;
}

.PuckCanvas-root {
  background: white;
  border: 1px solid var(--puck-color-grey-09);
  box-sizing: content-box;
  min-width: 321px;
  position: absolute;
  pointer-events: none;
  transform-origin: top;
  top: 0;
  bottom: 0;
  opacity: 0;
}

@media (min-width: 1198px) {
  .PuckCanvas-root {
    min-width: unset;
  }
}

@media (prefers-reduced-motion: reduce) {
  .PuckCanvas-root {
    transition: none !important;
  }
}

.PuckCanvas--ready .PuckCanvas-root {
  pointer-events: unset;
  opacity: 1;
}

.PuckCanvas-loader {
  align-items: center;
  color: var(--puck-color-grey-06);
  display: flex;
  height: 100%;
  justify-content: center;
  transition: opacity 250ms ease-out;
  opacity: 0;
}

.PuckCanvas--showLoader .PuckCanvas-loader {
  opacity: 1;
}

.PuckCanvas--showLoader.PuckCanvas--ready .PuckCanvas-loader {
  opacity: 0;
  height: 0;
  transition: none;
}



================================================
FILE: packages/core/components/Puck/components/Components/index.tsx
================================================
import { useComponentList } from "../../../../lib/use-component-list";
import { useAppStore } from "../../../../store";
import { ComponentList } from "../../../ComponentList";
import { useMemo } from "react";

export const Components = () => {
  const overrides = useAppStore((s) => s.overrides);

  const componentList = useComponentList();

  const Wrapper = useMemo(() => overrides.components || "div", [overrides]);

  return (
    <Wrapper>
      {componentList ? componentList : <ComponentList id="all" />}
    </Wrapper>
  );
};



================================================
FILE: packages/core/components/Puck/components/Fields/index.tsx
================================================
import { Loader } from "../../../Loader";
import { rootDroppableId } from "../../../../lib/root-droppable-id";
import { UiState } from "../../../../types";
import { AutoFieldPrivate } from "../../../AutoField";
import { AppStore, useAppStore, useAppStoreApi } from "../../../../store";

import styles from "./styles.module.css";
import { getClassNameFactory } from "../../../../lib";
import { memo, ReactNode, useCallback, useMemo } from "react";
import { ItemSelector } from "../../../../lib/data/get-item";
import { useRegisterFieldsSlice } from "../../../../store/slices/fields";
import { useShallow } from "zustand/react/shallow";
import { StoreApi } from "zustand";

const getClassName = getClassNameFactory("PuckFields", styles);

const DefaultFields = ({
  children,
}: {
  children: ReactNode;
  isLoading: boolean;
  itemSelector?: ItemSelector | null;
}) => {
  return <>{children}</>;
};

const createOnChange =
  (fieldName: string, appStore: StoreApi<AppStore>) =>
  async (value: any, updatedUi?: Partial<UiState>) => {
    let currentProps;

    const { dispatch, state, selectedItem, resolveComponentData } =
      appStore.getState();

    const { data, ui } = state;
    const { itemSelector } = ui;

    // DEPRECATED
    const rootProps = data.root.props || data.root;

    if (selectedItem) {
      currentProps = selectedItem.props;
    } else {
      currentProps = rootProps;
    }

    const newProps = {
      ...currentProps,
      [fieldName]: value,
    };

    if (selectedItem && itemSelector) {
      dispatch({
        type: "replace",
        destinationIndex: itemSelector.index,
        destinationZone: itemSelector.zone || rootDroppableId,
        data: (
          await resolveComponentData(
            { ...selectedItem, props: newProps },
            "replace"
          )
        ).node,
        ui: updatedUi,
      });
    } else {
      if (data.root.props) {
        dispatch({
          type: "replaceRoot",
          root: (
            await resolveComponentData(
              { ...data.root, props: newProps },
              "replace"
            )
          ).node,
          ui: { ...ui, ...updatedUi },
          recordHistory: true,
        });
      } else {
        // DEPRECATED
        dispatch({
          type: "setData",
          data: { root: newProps },
        });
      }
    }
  };

const FieldsChild = ({ fieldName }: { fieldName: string }) => {
  const field = useAppStore((s) => s.fields.fields[fieldName]);
  const isReadOnly = useAppStore(
    (s) =>
      ((s.selectedItem
        ? s.selectedItem.readOnly
        : s.state.data.root.readOnly) || {})[fieldName]
  );

  const value = useAppStore((s) => {
    // DEPRECATED
    const rootProps = s.state.data.root.props || s.state.data.root;

    return s.selectedItem
      ? s.selectedItem.props[fieldName]
      : rootProps[fieldName];
  });

  const id = useAppStore((s) => {
    if (!field) return null;

    return s.selectedItem
      ? `${s.selectedItem.props.id}_${field.type}_${fieldName}`
      : `root_${field.type}_${fieldName}`;
  });

  const permissions = useAppStore(
    useShallow((s) => {
      const { selectedItem, permissions } = s;

      return selectedItem
        ? permissions.getPermissions({ item: selectedItem })
        : permissions.getPermissions({ root: true });
    })
  );

  const appStore = useAppStoreApi();

  const onChange = useCallback(createOnChange(fieldName, appStore), [
    fieldName,
  ]);

  const { visible = true } = field ?? {};

  if (!field || !id || !visible) return null;

  if (field.type === "slot") return null;

  return (
    <div key={id} className={getClassName("field")}>
      <AutoFieldPrivate
        field={field}
        name={fieldName}
        id={id}
        readOnly={!permissions.edit || isReadOnly}
        value={value}
        onChange={onChange}
      />
    </div>
  );
};

const FieldsChildMemo = memo(FieldsChild);

const FieldsInternal = ({ wrapFields = true }: { wrapFields?: boolean }) => {
  const overrides = useAppStore((s) => s.overrides);
  const componentResolving = useAppStore((s) => {
    const loadingCount = s.selectedItem
      ? s.componentState[s.selectedItem.props.id]?.loadingCount
      : s.componentState["root"]?.loadingCount;

    return (loadingCount ?? 0) > 0;
  });
  const itemSelector = useAppStore(useShallow((s) => s.state.ui.itemSelector));
  const id = useAppStore((s) => s.selectedItem?.props.id);
  const appStore = useAppStoreApi();
  useRegisterFieldsSlice(appStore, id);

  const fieldsLoading = useAppStore((s) => s.fields.loading);
  const fieldNames = useAppStore(
    useShallow((s) => {
      if (s.fields.id === id) {
        return Object.keys(s.fields.fields);
      }

      return [];
    })
  );

  const isLoading = fieldsLoading || componentResolving;

  const Wrapper = useMemo(() => overrides.fields || DefaultFields, [overrides]);

  return (
    <form
      className={getClassName({ wrapFields })}
      onSubmit={(e) => {
        e.preventDefault();
      }}
    >
      <Wrapper isLoading={isLoading} itemSelector={itemSelector}>
        {fieldNames.map((fieldName) => (
          <FieldsChildMemo key={fieldName} fieldName={fieldName} />
        ))}
      </Wrapper>
      {isLoading && (
        <div className={getClassName("loadingOverlay")}>
          <div className={getClassName("loadingOverlayInner")}>
            <Loader size={16} />
          </div>
        </div>
      )}
    </form>
  );
};

export const Fields = memo(FieldsInternal);



================================================
FILE: packages/core/components/Puck/components/Fields/styles.module.css
================================================
.PuckFields {
  position: relative;
  font-family: var(--puck-font-family);
}

.PuckFields--isLoading {
  min-height: 48px; /* Ensure there is sufficient room for loader if no fields */
}

.PuckFields-loadingOverlay {
  background: var(--puck-color-white);
  display: flex;
  justify-content: flex-end;
  align-items: flex-start;
  height: 100%;
  width: 100%;
  top: 0px;
  position: absolute;
  z-index: 1;
  pointer-events: all;
  box-sizing: border-box;
  opacity: 0.8;
}

.PuckFields-loadingOverlayInner {
  display: flex;
  padding: 16px;
  position: sticky;
  top: 0;
}

.PuckFields-field * {
  box-sizing: border-box;
}

.PuckFields--wrapFields .PuckFields-field {
  color: var(--puck-color-grey-04);
  padding: 16px;
  padding-bottom: 12px;
  display: block;
}

.PuckFields--wrapFields .PuckFields-field + .PuckFields-field {
  border-top: 1px solid var(--puck-color-grey-09);
  margin-top: 8px;
}



================================================
FILE: packages/core/components/Puck/components/Header/index.tsx
================================================
import { memo, useCallback, useMemo, useState } from "react";
import { useAppStore, useAppStoreApi } from "../../../../store";
import {
  ChevronDown,
  ChevronUp,
  Globe,
  PanelLeft,
  PanelRight,
} from "lucide-react";
import { Heading } from "../../../Heading";
import { IconButton } from "../../../IconButton/IconButton";
import { MenuBar } from "../../../MenuBar";
import { Button } from "../../../Button";
import { Config, Overrides, UserGenerics } from "../../../../types";
import { DefaultOverride } from "../../../DefaultOverride";
import { usePropsContext } from "../..";
import { getClassNameFactory } from "../../../../lib";
import styles from "./styles.module.css";

const getClassName = getClassNameFactory("PuckHeader", styles);

const HeaderInner = <
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
>() => {
  const {
    onPublish,
    renderHeader,
    renderHeaderActions,
    headerTitle,
    headerPath,
    iframe: _iframe,
  } = usePropsContext();

  const dispatch = useAppStore((s) => s.dispatch);
  const appStore = useAppStoreApi();

  // DEPRECATED
  const defaultHeaderRender = useMemo((): Overrides["header"] => {
    if (renderHeader) {
      console.warn(
        "`renderHeader` is deprecated. Please use `overrides.header` and the `usePuck` hook instead"
      );

      const RenderHeader = ({ actions, ...props }: any) => {
        const Comp = renderHeader!;

        const appState = useAppStore((s) => s.state);

        return (
          <Comp {...props} dispatch={dispatch} state={appState}>
            {actions}
          </Comp>
        );
      };

      return RenderHeader;
    }

    return DefaultOverride;
  }, [renderHeader]);

  // DEPRECATED
  const defaultHeaderActionsRender = useMemo((): Overrides["headerActions"] => {
    if (renderHeaderActions) {
      console.warn(
        "`renderHeaderActions` is deprecated. Please use `overrides.headerActions` and the `usePuck` hook instead."
      );

      const RenderHeader = (props: any) => {
        const Comp = renderHeaderActions!;

        const appState = useAppStore((s) => s.state);

        return <Comp {...props} dispatch={dispatch} state={appState}></Comp>;
      };

      return RenderHeader;
    }

    return DefaultOverride;
  }, [renderHeader]);

  const CustomHeader = useAppStore(
    (s) => s.overrides.header || defaultHeaderRender
  );

  const CustomHeaderActions = useAppStore(
    (s) => s.overrides.headerActions || defaultHeaderActionsRender
  );

  const [menuOpen, setMenuOpen] = useState(false);

  const rootTitle = useAppStore((s) => {
    const rootData = s.state.indexes.nodes["root"]?.data as G["UserRootProps"];

    return rootData.props.title ?? "";
  });

  const leftSideBarVisible = useAppStore((s) => s.state.ui.leftSideBarVisible);
  const rightSideBarVisible = useAppStore(
    (s) => s.state.ui.rightSideBarVisible
  );

  const toggleSidebars = useCallback(
    (sidebar: "left" | "right") => {
      const widerViewport = window.matchMedia("(min-width: 638px)").matches;
      const sideBarVisible =
        sidebar === "left" ? leftSideBarVisible : rightSideBarVisible;
      const oppositeSideBar =
        sidebar === "left" ? "rightSideBarVisible" : "leftSideBarVisible";

      dispatch({
        type: "setUi",
        ui: {
          [`${sidebar}SideBarVisible`]: !sideBarVisible,
          ...(!widerViewport ? { [oppositeSideBar]: false } : {}),
        },
      });
    },
    [dispatch, leftSideBarVisible, rightSideBarVisible]
  );

  return (
    <CustomHeader
      actions={
        <>
          <CustomHeaderActions>
            <Button
              onClick={() => {
                const data = appStore.getState().state.data;
                onPublish && onPublish(data as G["UserData"]);
              }}
              icon={<Globe size="14px" />}
            >
              Publish
            </Button>
          </CustomHeaderActions>
        </>
      }
    >
      <header
        className={getClassName({ leftSideBarVisible, rightSideBarVisible })}
      >
        <div className={getClassName("inner")}>
          <div className={getClassName("toggle")}>
            <div className={getClassName("leftSideBarToggle")}>
              <IconButton
                onClick={() => {
                  toggleSidebars("left");
                }}
                title="Toggle left sidebar"
              >
                <PanelLeft focusable="false" />
              </IconButton>
            </div>
            <div className={getClassName("rightSideBarToggle")}>
              <IconButton
                onClick={() => {
                  toggleSidebars("right");
                }}
                title="Toggle right sidebar"
              >
                <PanelRight focusable="false" />
              </IconButton>
            </div>
          </div>
          <div className={getClassName("title")}>
            <Heading rank="2" size="xs">
              {headerTitle || rootTitle || "Page"}
              {headerPath && (
                <>
                  {" "}
                  <code className={getClassName("path")}>{headerPath}</code>
                </>
              )}
            </Heading>
          </div>
          <div className={getClassName("tools")}>
            <div className={getClassName("menuButton")}>
              <IconButton
                onClick={() => {
                  return setMenuOpen(!menuOpen);
                }}
                title="Toggle menu bar"
              >
                {menuOpen ? (
                  <ChevronUp focusable="false" />
                ) : (
                  <ChevronDown focusable="false" />
                )}
              </IconButton>
            </div>
            <MenuBar<G["UserData"]>
              dispatch={dispatch}
              onPublish={onPublish}
              menuOpen={menuOpen}
              renderHeaderActions={() => (
                <CustomHeaderActions>
                  <Button
                    onClick={() => {
                      const data = appStore.getState().state
                        .data as G["UserData"];
                      onPublish && onPublish(data);
                    }}
                    icon={<Globe size="14px" />}
                  >
                    Publish
                  </Button>
                </CustomHeaderActions>
              )}
              setMenuOpen={setMenuOpen}
            />
          </div>
        </div>
      </header>
    </CustomHeader>
  );
};

export const Header = memo(HeaderInner);



================================================
FILE: packages/core/components/Puck/components/Header/styles.module.css
================================================
.PuckHeader {
  background: var(--puck-color-white);
  border-bottom: 1px solid var(--puck-color-grey-09);
  color: var(--puck-color-black);
  grid-area: header;
  position: relative;
  max-width: 100vw;
}

.PuckHeader-inner {
  align-items: end;
  display: grid;
  gap: var(--puck-space-px);
  grid-template-areas: "left middle right";
  grid-template-columns: 1fr auto 1fr;
  grid-template-rows: auto;
  padding: var(--puck-space-px);
}

.PuckHeader-toggle {
  color: var(--puck-color-grey-05);
  display: flex;
  margin-inline-start: -4px;
  padding-top: 2px;
}

.PuckHeader--rightSideBarVisible .PuckHeader-rightSideBarToggle,
.PuckHeader--leftSideBarVisible .PuckHeader-leftSideBarToggle {
  color: var(--puck-color-black);
}

.PuckHeader-title {
  align-self: center;
}

.PuckHeader-path {
  font-family: var(--puck-font-family-monospaced);
  font-size: var(--puck-font-size-xxs);
  font-weight: normal;
  word-break: break-all;
}

.PuckHeader-tools {
  display: flex;
  gap: 16px;
  justify-content: flex-end;
}

.PuckHeader-menuButton {
  color: var(--puck-color-grey-05);
  margin-inline-start: -4px;
}

.PuckHeader--menuOpen .PuckHeader-menuButton {
  color: var(--puck-color-black);
}

@media (min-width: 638px) {
  .PuckHeader-menuButton {
    display: none;
  }
}



================================================
FILE: packages/core/components/Puck/components/Outline/index.tsx
================================================
import { LayerTree } from "../../../LayerTree";
import { useAppStore } from "../../../../store";
import { useMemo } from "react";
import { findZonesForArea } from "../../../../lib/data/find-zones-for-area";
import { useShallow } from "zustand/react/shallow";

export const Outline = () => {
  const outlineOverride = useAppStore((s) => s.overrides.outline);

  const rootZones = useAppStore(
    useShallow((s) => findZonesForArea(s.state, "root"))
  );

  const Wrapper = useMemo(() => outlineOverride || "div", [outlineOverride]);
  return (
    <Wrapper>
      {rootZones.map((zoneCompound) => (
        <LayerTree
          key={zoneCompound}
          label={rootZones.length === 1 ? "" : zoneCompound.split(":")[1]}
          zoneCompound={zoneCompound}
        />
      ))}
    </Wrapper>
  );
};



================================================
FILE: packages/core/components/Puck/components/Preview/index.tsx
================================================
import { DropZoneEditPure, DropZonePure } from "../../../DropZone";
import { rootDroppableId } from "../../../../lib/root-droppable-id";
import { RefObject, useCallback, useEffect, useRef, useMemo } from "react";
import { useAppStore } from "../../../../store";
import AutoFrame, { autoFrameContext } from "../../../AutoFrame";
import styles from "./styles.module.css";
import { getClassNameFactory } from "../../../../lib";
import { DefaultRootRenderProps } from "../../../../types";
import { Render } from "../../../Render";
import { BubbledPointerEvent } from "../../../../lib/bubble-pointer-event";
import { useSlots } from "../../../../lib/use-slots";

const getClassName = getClassNameFactory("PuckPreview", styles);

type PageProps = DefaultRootRenderProps;

const useBubbleIframeEvents = (ref: RefObject<HTMLIFrameElement | null>) => {
  const status = useAppStore((s) => s.status);

  useEffect(() => {
    if (ref.current && status === "READY") {
      const iframe = ref.current;

      const handlePointerMove = (event: PointerEvent) => {
        const evt = new BubbledPointerEvent("pointermove", {
          ...event,
          bubbles: true,
          cancelable: false,
          clientX: event.clientX,
          clientY: event.clientY,
          originalTarget: event.target,
        });

        iframe.dispatchEvent(evt as any);
      };

      const register = () => {
        unregister();

        // Add event listeners
        iframe.contentDocument?.addEventListener(
          "pointermove",
          handlePointerMove,
          {
            capture: true,
          }
        );
      };

      const unregister = () => {
        // Clean up event listeners
        iframe.contentDocument?.removeEventListener(
          "pointermove",
          handlePointerMove
        );
      };

      register();

      return () => {
        unregister();
      };
    }
  }, [status]);
};

export const Preview = ({ id = "puck-preview" }: { id?: string }) => {
  const dispatch = useAppStore((s) => s.dispatch);
  const root = useAppStore((s) => s.state.data.root);
  const config = useAppStore((s) => s.config);
  const setStatus = useAppStore((s) => s.setStatus);
  const iframe = useAppStore((s) => s.iframe);
  const overrides = useAppStore((s) => s.overrides);
  const metadata = useAppStore((s) => s.metadata);
  const renderData = useAppStore((s) =>
    s.state.ui.previewMode === "edit" ? null : s.state.data
  );

  const Page = useCallback<React.FC<PageProps>>(
    (pageProps) => {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      const propsWithSlots = useSlots(
        config,
        { type: "root", props: pageProps },
        DropZoneEditPure
      );

      return config.root?.render ? (
        config.root?.render({
          id: "puck-root",
          ...propsWithSlots,
        })
      ) : (
        <>{propsWithSlots.children}</>
      );
    },
    [config]
  );

  const Frame = useMemo(() => overrides.iframe, [overrides]);

  // DEPRECATED
  const rootProps = root.props || root;

  const ref = useRef<HTMLIFrameElement>(null);

  useBubbleIframeEvents(ref);

  const inner = !renderData ? (
    <Page
      {...rootProps}
      puck={{
        renderDropZone: DropZonePure,
        isEditing: true,
        dragRef: null,
        metadata,
      }}
      editMode={true} // DEPRECATED
    >
      <DropZonePure zone={rootDroppableId} />
    </Page>
  ) : (
    <Render data={renderData} config={config} />
  );

  useEffect(() => {
    if (!iframe.enabled) {
      setStatus("READY");
    }
  }, [iframe.enabled]);

  return (
    <div
      className={getClassName()}
      id={id}
      data-puck-preview
      onClick={() => {
        dispatch({ type: "setUi", ui: { itemSelector: null } });
      }}
    >
      {iframe.enabled ? (
        <AutoFrame
          id="preview-frame"
          className={getClassName("frame")}
          data-rfd-iframe
          onReady={() => {
            setStatus("READY");
          }}
          onNotReady={() => {
            setStatus("MOUNTED");
          }}
          frameRef={ref}
        >
          <autoFrameContext.Consumer>
            {({ document }) => {
              if (Frame) {
                return <Frame document={document}>{inner}</Frame>;
              }

              return inner;
            }}
          </autoFrameContext.Consumer>
        </AutoFrame>
      ) : (
        <div
          id="preview-frame"
          className={getClassName("frame")}
          ref={ref}
          data-puck-entry
        >
          {inner}
        </div>
      )}
    </div>
  );
};



================================================
FILE: packages/core/components/Puck/components/Preview/styles.module.css
================================================
.PuckPreview {
  position: relative;
  height: 100%;
}

.PuckPreview-frame {
  border: none;
  height: 100%;
  width: 100%;
}



================================================
FILE: packages/core/components/Render/index.tsx
================================================
"use client";

import { rootZone } from "../../lib/root-droppable-id";
import { useSlots } from "../../lib/use-slots";
import { Config, Data, Metadata, UserGenerics } from "../../types";
import {
  DropZonePure,
  DropZoneProvider,
  DropZoneRenderPure,
} from "../DropZone";
import React, { useMemo } from "react";
import { SlotRender } from "../SlotRender";
import { DropZoneContext } from "../DropZone/context";

export const renderContext = React.createContext<{
  config: Config;
  data: Data;
  metadata: Metadata;
}>({
  config: { components: {} },
  data: { root: {}, content: [] },
  metadata: {},
});

export function Render<
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
>({
  config,
  data,
  metadata = {},
}: {
  config: UserConfig;
  data: Partial<G["UserData"] | Data>;
  metadata?: Metadata;
}) {
  const defaultedData = {
    ...data,
    root: data.root || {},
    content: data.content || [],
  };

  // DEPRECATED
  const rootProps =
    "props" in defaultedData.root
      ? defaultedData.root.props
      : defaultedData.root;
  const title = rootProps?.title || "";

  const pageProps = {
    ...rootProps,
    puck: {
      renderDropZone: DropZonePure,
      isEditing: false,
      dragRef: null,
      metadata: metadata,
    },
    title,
    editMode: false,
    id: "puck-root",
  };

  const propsWithSlots = useSlots(
    config,
    { type: "root", props: pageProps },
    (props) => <SlotRender {...props} config={config} metadata={metadata} />
  );

  const nextContextValue = useMemo<DropZoneContext>(
    () => ({
      mode: "render",
      depth: 0,
    }),
    []
  );

  if (config.root?.render) {
    return (
      <renderContext.Provider value={{ config, data: defaultedData, metadata }}>
        <DropZoneProvider value={nextContextValue}>
          <config.root.render {...propsWithSlots}>
            <DropZoneRenderPure zone={rootZone} />
          </config.root.render>
        </DropZoneProvider>
      </renderContext.Provider>
    );
  }

  return (
    <renderContext.Provider value={{ config, data: defaultedData, metadata }}>
      <DropZoneProvider value={nextContextValue}>
        <DropZoneRenderPure zone={rootZone} />
      </DropZoneProvider>
    </renderContext.Provider>
  );
}



================================================
FILE: packages/core/components/ServerRender/index.tsx
================================================
import { CSSProperties } from "react";
import {
  rootAreaId,
  rootDroppableId,
  rootZone,
} from "../../lib/root-droppable-id";
import { setupZone } from "../../lib/data/setup-zone";
import { Config, Data, Metadata, UserGenerics } from "../../types";
import { useSlots } from "../../lib/use-slots";
import { SlotRenderPure } from "../SlotRender/server";

type DropZoneRenderProps = {
  zone: string;
  data: Data;
  config: Config;
  areaId?: string;
  style?: CSSProperties;
  metadata?: Metadata;
};

export function DropZoneRender({
  zone,
  data,
  areaId = "root",
  config,
  metadata = {},
}: DropZoneRenderProps) {
  let zoneCompound = rootDroppableId;
  let content = data?.content || [];

  if (!data || !config) {
    return null;
  }

  if (areaId !== rootAreaId && zone !== rootZone) {
    zoneCompound = `${areaId}:${zone}`;
    content = setupZone(data, zoneCompound).zones[zoneCompound];
  }

  return (
    <>
      {content.map((item) => {
        const Component = config.components[item.type];

        const props = {
          ...item.props,
          puck: {
            renderDropZone: ({ zone }: { zone: string }) => (
              <DropZoneRender
                zone={zone}
                data={data}
                areaId={item.props.id}
                config={config}
                metadata={metadata}
              />
            ),
            metadata,
            dragRef: null,
            isEditing: false,
          },
        };

        const renderItem = { ...item, props };

        // eslint-disable-next-line react-hooks/rules-of-hooks
        const propsWithSlots = useSlots(config, renderItem, (props) => (
          <SlotRenderPure {...props} config={config} metadata={metadata} />
        ));

        if (Component) {
          return (
            <Component.render key={renderItem.props.id} {...propsWithSlots} />
          );
        }

        return null;
      })}
    </>
  );
}

export function Render<
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
>({
  config,
  data,
  metadata = {},
}: {
  config: UserConfig;
  data: G["UserData"];
  metadata?: Metadata;
}) {
  // DEPRECATED
  const rootProps = "props" in data.root ? data.root.props : data.root;

  const title = rootProps.title || "";

  const props = {
    ...rootProps,
    puck: {
      renderDropZone: ({ zone }: { zone: string }) => (
        <DropZoneRender
          zone={zone}
          data={data}
          config={config}
          metadata={metadata}
        />
      ),
      isEditing: false,
      dragRef: null,
      metadata,
    },
    title,
    editMode: false,
    id: "puck-root",
  };

  const propsWithSlots = useSlots(config, { type: "root", props }, (props) => (
    <SlotRenderPure {...props} config={config} metadata={metadata} />
  ));

  if (config.root?.render) {
    return (
      <config.root.render {...propsWithSlots}>
        <DropZoneRender
          config={config}
          data={data}
          zone={rootZone}
          metadata={metadata}
        />
      </config.root.render>
    );
  }

  return (
    <DropZoneRender
      config={config}
      data={data}
      zone={rootZone}
      metadata={metadata}
    />
  );
}



================================================
FILE: packages/core/components/SidebarSection/index.tsx
================================================
import { ReactNode } from "react";
import styles from "./styles.module.css";
import getClassNameFactory from "../../lib/get-class-name-factory";
import { Heading } from "../Heading";
import { ChevronRight } from "lucide-react";
import { useBreadcrumbs } from "../../lib/use-breadcrumbs";
import { useAppStore } from "../../store";
import { Loader } from "../Loader";

const getClassName = getClassNameFactory("SidebarSection", styles);

export const SidebarSection = ({
  children,
  title,
  background,
  showBreadcrumbs,
  noBorderTop,
  noPadding,
  isLoading,
}: {
  children: ReactNode;
  title: ReactNode;
  background?: string;
  showBreadcrumbs?: boolean;
  noBorderTop?: boolean;
  noPadding?: boolean;
  isLoading?: boolean | null;
}) => {
  const setUi = useAppStore((s) => s.setUi);
  const breadcrumbs = useBreadcrumbs(1);

  return (
    <div
      className={getClassName({ noBorderTop, noPadding })}
      style={{ background }}
    >
      <div className={getClassName("title")}>
        <div className={getClassName("breadcrumbs")}>
          {showBreadcrumbs
            ? breadcrumbs.map((breadcrumb, i) => (
                <div key={i} className={getClassName("breadcrumb")}>
                  <button
                    type="button"
                    className={getClassName("breadcrumbLabel")}
                    onClick={() => setUi({ itemSelector: breadcrumb.selector })}
                  >
                    {breadcrumb.label}
                  </button>
                  <ChevronRight size={16} />
                </div>
              ))
            : null}
          <div className={getClassName("heading")}>
            <Heading rank="2" size="xs">
              {title}
            </Heading>
          </div>
        </div>
      </div>
      <div className={getClassName("content")}>{children}</div>
      {isLoading && (
        <div className={getClassName("loadingOverlay")}>
          <Loader size={32} />
        </div>
      )}
    </div>
  );
};



================================================
FILE: packages/core/components/SidebarSection/styles.module.css
================================================
.SidebarSection {
  display: flex;
  position: relative;
  flex-direction: column;
  color: var(--puck-color-black);
}

.SidebarSection:last-of-type {
  flex-grow: 1;
}

.SidebarSection-title {
  background: var(--puck-color-white);
  padding: 16px;
  border-bottom: 1px solid var(--puck-color-grey-09);
  border-top: 1px solid var(--puck-color-grey-09);
  overflow-x: auto;
}

.SidebarSection--noBorderTop > .SidebarSection-title {
  border-top: 0px;
}

.SidebarSection-content {
  padding: 16px;
}

.SidebarSection--noPadding > .SidebarSection-content {
  padding: 0px;
}

.SidebarSection--noPadding > .SidebarSection-content:last-child {
  padding-bottom: 4px;
}

.SidebarSection:last-of-type .SidebarSection-content {
  border-bottom: none;
  flex-grow: 1;
}

.SidebarSection-breadcrumbLabel {
  background: none;
  border: 0;
  border-radius: 2px;
  color: var(--puck-color-azure-04);
  cursor: pointer;
  font: inherit;
  flex-shrink: 0;
  padding: 0;
  transition: color 50ms ease-in;
}

.SidebarSection-breadcrumbLabel:focus-visible {
  outline: 2px solid var(--puck-color-azure-05);
  outline-offset: 2px;
}

@media (hover: hover) and (pointer: fine) {
  .SidebarSection-breadcrumbLabel:hover {
    color: var(--puck-color-azure-03);
    transition: none;
  }
}

.SidebarSection-breadcrumbLabel:active {
  color: var(--puck-color-azure-02);
  transition: none;
}

.SidebarSection-breadcrumbs {
  align-items: center;
  display: flex;
  gap: 4px;
}

.SidebarSection-breadcrumb {
  align-items: center;
  display: flex;
  gap: 4px;
}

.SidebarSection-heading {
  padding-inline-end: 16px;
}

.SidebarSection-loadingOverlay {
  background: var(--puck-color-white);
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
  width: 100%;
  top: 0;
  position: absolute;
  z-index: 1;
  pointer-events: all;
  box-sizing: border-box;
  opacity: 0.8;
}



================================================
FILE: packages/core/components/SlotRender/index.tsx
================================================
"use client";

import { useShallow } from "zustand/react/shallow";
import { useAppStore } from "../../store";
import { SlotRenderPure } from "./server";
export * from "./server";

export const ContextSlotRender = ({
  componentId,
  zone,
}: {
  componentId: string;
  zone: string;
}) => {
  const config = useAppStore((s) => s.config);
  const metadata = useAppStore((s) => s.metadata);
  const slotContent = useAppStore(
    useShallow((s) => {
      const indexes = s.state.indexes;

      const contentIds =
        indexes.zones[`${componentId}:${zone}`]?.contentIds ?? [];

      return contentIds.map((contentId) => indexes.nodes[contentId].flatData);
    })
  );

  return (
    <SlotRenderPure
      content={slotContent}
      zone={zone}
      config={config}
      metadata={metadata}
    />
  );
};



================================================
FILE: packages/core/components/SlotRender/server.tsx
================================================
import { forwardRef } from "react";
import { DropZoneProps } from "../DropZone/types";
import { ComponentData, Config, Content, Metadata, Slot } from "../../types";
import { useSlots } from "../../lib/use-slots";
import { DropZoneRender } from "../ServerRender";

type SlotRenderProps = DropZoneProps & {
  content: Content;
  config: Config;
  metadata: Metadata;
};

export const SlotRenderPure = (props: SlotRenderProps) => (
  <SlotRender {...props} />
);

const Item = ({
  config,
  item,
  metadata,
}: {
  config: Config;
  item: ComponentData;
  metadata: Metadata;
}) => {
  const Component = config.components[item.type];

  // eslint-disable-next-line react-hooks/rules-of-hooks
  const props = useSlots(config, item, (slotProps) => (
    <SlotRenderPure {...slotProps} config={config} metadata={metadata} />
  ));

  return (
    <Component.render
      {...props}
      puck={{
        ...props.puck,
        renderDropZone: DropZoneRender,
        metadata: metadata || {},
      }}
    />
  );
};

/**
 * Render a slot.
 *
 * Replacement for DropZoneRender
 */
export const SlotRender = forwardRef<HTMLDivElement, SlotRenderProps>(
  function SlotRenderInternal(
    { className, style, content, config, metadata },
    ref
  ) {
    return (
      <div className={className} style={style} ref={ref}>
        {content.map((item) => {
          if (!config.components[item.type]) {
            return null;
          }

          return (
            <Item
              key={item.props.id}
              config={config}
              item={item}
              metadata={metadata}
            />
          );
        })}
      </div>
    );
  }
);



================================================
FILE: packages/core/components/Sortable/index.tsx
================================================
import { DragDropProvider } from "@dnd-kit/react";
import { PropsWithChildren, ReactNode } from "react";
import { useSensors } from "../../lib/dnd/use-sensors";
import { createDynamicCollisionDetector } from "../../lib/dnd/collision/dynamic";
import "./styles.css";
import { useSortable } from "@dnd-kit/react/sortable";

export const SortableProvider = ({
  children,
  onDragStart,
  onDragEnd,
  onMove,
}: PropsWithChildren<{
  onDragStart: (id: string) => void;
  onDragEnd: () => void;
  onMove: (moveData: { source: number; target: number }) => void;
}>) => {
  const sensors = useSensors({
    mouse: { distance: { value: 5 } },
  });

  return (
    <DragDropProvider
      sensors={sensors}
      onDragStart={(event) =>
        onDragStart(event.operation.source?.id.toString() ?? "")
      }
      onDragOver={(event, manager) => {
        event.preventDefault();

        const { operation } = event;
        const { source, target } = operation;

        if (!source || !target) return;

        let sourceIndex = source.data.index;
        let targetIndex = target.data.index;

        const collisionData = manager.collisionObserver.collisions[0]?.data;

        if (sourceIndex !== targetIndex && source.id !== target.id) {
          const collisionPosition =
            collisionData?.direction === "up" ? "before" : "after";

          if (targetIndex >= sourceIndex) {
            targetIndex = targetIndex - 1;
          }

          if (collisionPosition === "after") {
            targetIndex = targetIndex + 1;
          }

          onMove({
            source: sourceIndex,
            target: targetIndex,
          });
        }
      }}
      onDragEnd={() => {
        setTimeout(() => {
          // Delay until animation finished
          onDragEnd();
        }, 250);
      }}
    >
      {children}
    </DragDropProvider>
  );
};

export const Sortable = ({
  id,
  index,
  disabled,
  children,
  type = "item",
}: {
  id: string;
  index: number;
  disabled?: boolean;
  children: (props: {
    isDragging: boolean;
    isDropping: boolean;
    ref: (element: Element | null) => void;
    handleRef: (element: Element | null) => void;
  }) => ReactNode;
  type?: string;
}) => {
  const {
    ref: sortableRef,
    isDragging,
    isDropping,
    handleRef,
  } = useSortable({
    id,
    type,
    index,
    disabled,
    data: { index },
    collisionDetector: createDynamicCollisionDetector("y"),
  });

  return children({ isDragging, isDropping, ref: sortableRef, handleRef });
};



================================================
FILE: packages/core/components/Sortable/styles.css
================================================
[data-dnd-placeholder] * {
  opacity: 0 !important;
}

[data-dnd-placeholder] {
  background: var(--puck-color-azure-09) !important;
  border: none !important;
  color: #00000000 !important;
  opacity: 0.3 !important;
  outline: none !important;
  transition: none !important;
}



================================================
FILE: packages/core/components/ViewportControls/default-viewports.ts
================================================
import { Viewports } from "../../types";

export const defaultViewports: Required<Viewports> = [
  { width: 360, height: "auto", icon: "Smartphone", label: "Small" },
  { width: 768, height: "auto", icon: "Tablet", label: "Medium" },
  { width: 1280, height: "auto", icon: "Monitor", label: "Large" },
];



================================================
FILE: packages/core/components/ViewportControls/index.tsx
================================================
import { Monitor, Smartphone, Tablet, ZoomIn, ZoomOut } from "lucide-react";
import { IconButton } from "../IconButton";
import { useAppStore } from "../../store";
import { ReactNode, useEffect, useMemo, useState } from "react";
import { getClassNameFactory } from "../../lib";

import styles from "./styles.module.css";
import { Viewport } from "../../types";

const icons = {
  Smartphone: <Smartphone size={16} />,
  Tablet: <Tablet size={16} />,
  Monitor: <Monitor size={16} />,
};

const getClassName = getClassNameFactory("ViewportControls", styles);
const getClassNameButton = getClassNameFactory("ViewportButton", styles);

const ViewportButton = ({
  children,
  height = "auto",
  title,
  width,
  onClick,
}: {
  children: ReactNode;
  height?: number | "auto";
  title: string;
  width: number;
  onClick: (viewport: Viewport) => void;
}) => {
  const viewports = useAppStore((s) => s.state.ui.viewports);

  const [isActive, setIsActive] = useState(false);

  // We use an effect so this doesn't cause hydration warnings with SSR
  useEffect(() => {
    setIsActive(width === viewports.current.width);
  }, [width, viewports.current.width]);

  return (
    <span className={getClassNameButton({ isActive })}>
      <IconButton
        title={title}
        disabled={isActive}
        onClick={(e) => {
          e.stopPropagation();
          onClick({ width, height });
        }}
      >
        <span className={getClassNameButton("inner")}>{children}</span>
      </IconButton>
    </span>
  );
};

// Based on Chrome dev tools
const defaultZoomOptions = [
  { label: "25%", value: 0.25 },
  { label: "50%", value: 0.5 },
  { label: "75%", value: 0.75 },
  { label: "100%", value: 1 },
  { label: "125%", value: 1.25 },
  { label: "150%", value: 1.5 },
  { label: "200%", value: 2 },
];

export const ViewportControls = ({
  autoZoom,
  zoom,
  onViewportChange,
  onZoom,
}: {
  autoZoom: number;
  zoom: number;
  onViewportChange: (viewport: Viewport) => void;
  onZoom: (zoom: number) => void;
}) => {
  const viewports = useAppStore((s) => s.viewports);

  const defaultsContainAutoZoom = defaultZoomOptions.find(
    (option) => option.value === autoZoom
  );

  const zoomOptions = useMemo(
    () =>
      [
        ...defaultZoomOptions,
        ...(defaultsContainAutoZoom
          ? []
          : [
              {
                value: autoZoom,
                label: `${(autoZoom * 100).toFixed(0)}% (Auto)`,
              },
            ]),
      ]
        .filter((a) => a.value <= autoZoom)
        .sort((a, b) => (a.value > b.value ? 1 : -1)),
    [autoZoom]
  );

  return (
    <div className={getClassName()}>
      {viewports.map((viewport, i) => (
        <ViewportButton
          key={i}
          height={viewport.height}
          width={viewport.width}
          title={
            viewport.label
              ? `Switch to ${viewport.label} viewport`
              : "Switch viewport"
          }
          onClick={onViewportChange}
        >
          {typeof viewport.icon === "string"
            ? icons[viewport.icon as keyof typeof icons] || viewport.icon
            : viewport.icon || icons.Smartphone}
        </ViewportButton>
      ))}
      <div className={getClassName("divider")} />
      <IconButton
        title="Zoom viewport out"
        disabled={zoom <= zoomOptions[0]?.value}
        onClick={(e) => {
          e.stopPropagation();
          onZoom(
            zoomOptions[
              Math.max(
                zoomOptions.findIndex((option) => option.value === zoom) - 1,
                0
              )
            ].value
          );
        }}
      >
        <ZoomOut size={16} />
      </IconButton>
      <IconButton
        title="Zoom viewport in"
        disabled={zoom >= zoomOptions[zoomOptions.length - 1]?.value}
        onClick={(e) => {
          e.stopPropagation();

          onZoom(
            zoomOptions[
              Math.min(
                zoomOptions.findIndex((option) => option.value === zoom) + 1,
                zoomOptions.length - 1
              )
            ].value
          );
        }}
      >
        <ZoomIn size={16} />
      </IconButton>
      <div className={getClassName("divider")} />
      <select
        className={getClassName("zoomSelect")}
        value={zoom.toString()}
        onChange={(e) => {
          onZoom(parseFloat(e.currentTarget.value));
        }}
      >
        {zoomOptions.map((option) => (
          <option
            key={option.label}
            value={option.value}
            label={option.label}
          />
        ))}
      </select>
    </div>
  );
};



================================================
FILE: packages/core/components/ViewportControls/styles.module.css
================================================
.ViewportControls {
  display: flex;
  background: var(--puck-color-grey-11);
  box-sizing: border-box;
  border-inline-start: 2px solid var(--puck-color-grey-11);
  justify-content: center;
  gap: 8px;
  min-width: 358px;
  padding-bottom: 16px;
  padding-inline-start: var(--puck-space-px);
  padding-inline-end: var(--puck-space-px);
  z-index: 1;
}

.ViewportControls-divider {
  border-inline-end: 1px solid var(--puck-color-grey-09);
  margin-inline-start: 8px;
  margin-inline-end: 8px;
}

.ViewportControls-zoomSelect {
  appearance: none; /* Safari */
  background: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='100' height='100' fill='%23c3c3c3'><polygon points='0,0 100,0 50,50'/></svg>")
    no-repeat;
  background-size: 10px;
  background-position: calc(100% - 12px) calc(50% + 3px);
  background-repeat: no-repeat;
  border: 0;
  font-size: var(--puck-font-size-xxxs);
  padding: 0;
  width: 96px;
}

.ViewportControls-zoomSelect:dir(rtl) {
  background-position: 12px calc(50% + 3px);
}

.ViewportButton--isActive .ViewportButton-inner {
  color: var(--puck-color-azure-04);
}



================================================
FILE: packages/core/lib/accumulate-transform.ts
================================================
export function accumulateTransform(el: HTMLElement) {
  let matrix = new DOMMatrixReadOnly();
  let n: HTMLElement | null = el.parentElement;

  while (n && n !== document.documentElement) {
    const t = getComputedStyle(n).transform;
    if (t && t !== "none") {
      matrix = new DOMMatrixReadOnly(t).multiply(matrix);
    }
    n = n.parentElement;
  }

  return { scaleX: matrix.a, scaleY: matrix.d };
}



================================================
FILE: packages/core/lib/assign-refs.ts
================================================
export type Ref<ElementType = HTMLElement> =
  | React.RefObject<ElementType | null>
  | React.ForwardedRef<ElementType | null>
  | ((element: ElementType | null) => void);

export function assignRef<ElementType = HTMLElement>(
  ref: Ref<ElementType>,
  node: ElementType | null
) {
  if (typeof ref === "function") {
    ref(node);
  } else if (ref && typeof ref === "object" && "current" in ref) {
    ref.current = node;
  }
}

export function assignRefs<ElementType = HTMLElement>(
  refs: Ref<ElementType>[],
  node: ElementType | null
) {
  refs.forEach((ref) => {
    assignRef<ElementType>(ref, node);
  });
}



================================================
FILE: packages/core/lib/bubble-pointer-event.ts
================================================
export interface BubbledPointerEventType extends PointerEvent {
  originalTarget: EventTarget | null;
}

// Necessary to enable server build
const BaseEvent = typeof PointerEvent !== "undefined" ? PointerEvent : Event;

export class BubbledPointerEvent extends BaseEvent {
  _originalTarget: EventTarget | null = null;

  constructor(
    type: string,
    data: PointerEvent & { originalTarget: EventTarget | null }
  ) {
    super(type, data);
    this.originalTarget = data.originalTarget;
  }

  // Necessary for Firefox
  set originalTarget(target: EventTarget | null) {
    this._originalTarget = target;
  }

  // Necessary for Firefox
  get originalTarget() {
    return this._originalTarget;
  }
}



================================================
FILE: packages/core/lib/filter-data-attrs.ts
================================================
const dataAttrRe = /^(data-.*)$/;

export const filterDataAttrs = (props: Record<string, any>) => {
  let filteredProps: Record<string, any> = {};

  for (const prop in props) {
    if (
      Object.prototype.hasOwnProperty.call(props, prop) &&
      dataAttrRe.test(prop)
    ) {
      filteredProps[prop] = props[prop];
    }
  }

  return filteredProps;
};



================================================
FILE: packages/core/lib/filter.ts
================================================
export const filter = (obj: Record<any, any>, validKeys: string[]) => {
  return validKeys.reduce((acc, item) => {
    if (typeof obj[item] !== "undefined") {
      return { ...acc, [item]: obj[item] };
    }

    return acc;
  }, {});
};



================================================
FILE: packages/core/lib/generate-id.ts
================================================
import { v4 as uuidv4 } from "uuid";

export const generateId = (type?: string | number) =>
  type ? `${type}-${uuidv4()}` : uuidv4();



================================================
FILE: packages/core/lib/get-changed.ts
================================================
import { ComponentData } from "../types";
import fdeq from "fast-deep-equal";

export const getChanged = (
  newItem: Omit<Partial<ComponentData<any>>, "type"> | undefined,
  oldItem: Omit<Partial<ComponentData<any>>, "type"> | null | undefined
) => {
  return newItem
    ? Object.keys(newItem.props || {}).reduce((acc, item) => {
        const newItemProps = newItem?.props || {};
        const oldItemProps = oldItem?.props || {};

        return {
          ...acc,
          [item]: !fdeq(oldItemProps[item], newItemProps[item]),
        };
      }, {})
    : {};
};



================================================
FILE: packages/core/lib/get-class-name-factory.ts
================================================
import classnames from "classnames";

type OptionsObj = Record<string, any>;
type Options = string | OptionsObj;

export const getGlobalClassName = (rootClass: string, options: Options) => {
  if (typeof options === "string") {
    return `${rootClass}-${options}`;
  } else {
    const mappedOptions: Options = {};
    for (let option in options) {
      mappedOptions[`${rootClass}--${option}`] = options[option];
    }

    return classnames({
      [rootClass]: true,
      ...mappedOptions,
    });
  }
};

const getClassNameFactory =
  (
    rootClass: string,
    styles: Record<string, string>,
    config: { baseClass?: string } = { baseClass: "" }
  ) =>
  (options: Options = {}) => {
    if (typeof options === "string") {
      const descendant = options;

      const style = styles[`${rootClass}-${descendant}`];

      if (style) {
        return config.baseClass + styles[`${rootClass}-${descendant}`] || "";
      }

      return "";
    } else if (typeof options === "object") {
      const modifiers = options;

      const prefixedModifiers: OptionsObj = {};

      for (let modifier in modifiers) {
        prefixedModifiers[styles[`${rootClass}--${modifier}`]] =
          modifiers[modifier];
      }

      const c = styles[rootClass];

      return (
        config.baseClass +
        classnames({
          [c]: !!c, // only apply the class if it exists
          ...prefixedModifiers,
        })
      );
    } else {
      return config.baseClass + styles[rootClass] || "";
    }
  };

export default getClassNameFactory;



================================================
FILE: packages/core/lib/get-deep-dir.ts
================================================
type Dir = "ltr" | "rtl";

export function getDeepDir(el: Element | null | undefined) {
  function findDir(node: Element | null): Dir {
    if (!node) return "ltr";

    const d = node.getAttribute("dir") as Dir | "";

    return d || findDir(node.parentElement);
  }

  return el ? findDir(el) : "ltr";
}



================================================
FILE: packages/core/lib/get-deep-scroll-position.ts
================================================
export function getDeepScrollPosition(element: HTMLElement) {
  let totalScroll = {
    x: 0,
    y: 0,
  };

  let current: HTMLElement | null = element;

  while (current && current !== document.documentElement) {
    const parent: HTMLElement | null = current.parentElement;

    if (parent) {
      totalScroll.x += parent.scrollLeft;
      totalScroll.y += parent.scrollTop;
    }

    current = parent;
  }

  return totalScroll;
}



================================================
FILE: packages/core/lib/get-frame.ts
================================================
export const getFrame = () => {
  if (typeof window === "undefined") return;

  let frameEl: Element | Document | null | undefined =
    document.querySelector("#preview-frame");

  if (frameEl?.tagName === "IFRAME") {
    return (frameEl as HTMLIFrameElement)!.contentDocument || document;
  }

  return frameEl?.ownerDocument || document;
};



================================================
FILE: packages/core/lib/get-zone-id.ts
================================================
import { rootDroppableId } from "./root-droppable-id";

export const getZoneId = (zoneCompound?: string) => {
  if (!zoneCompound) {
    return [];
  }

  if (zoneCompound && zoneCompound.indexOf(":") > -1) {
    return zoneCompound.split(":");
  }

  return [rootDroppableId, zoneCompound];
};



================================================
FILE: packages/core/lib/get-zoom-config.ts
================================================
import { getBox } from "css-box-model";
import { AppState } from "../types";

const RESET_ZOOM_SMALLER_THAN_FRAME = true;

export const getZoomConfig = (
  uiViewport: AppState["ui"]["viewports"]["current"],
  frame: HTMLElement,
  zoom: number
) => {
  const box = getBox(frame);

  const { width: frameWidth, height: frameHeight } = box.contentBox;

  const viewportHeight =
    uiViewport.height === "auto" ? frameHeight : uiViewport.height;

  let rootHeight = 0;
  let autoZoom = 1;

  if (uiViewport.width > frameWidth || viewportHeight > frameHeight) {
    const widthZoom = Math.min(frameWidth / uiViewport.width, 1);
    const heightZoom = Math.min(frameHeight / viewportHeight, 1);

    zoom = widthZoom;

    if (widthZoom < heightZoom) {
      rootHeight = viewportHeight / zoom;
    } else {
      rootHeight = viewportHeight;
      zoom = heightZoom;
    }

    autoZoom = zoom;
  } else {
    if (RESET_ZOOM_SMALLER_THAN_FRAME) {
      autoZoom = 1;
      zoom = 1;
      rootHeight = viewportHeight;
    }
  }

  return { autoZoom, rootHeight, zoom };
};



================================================
FILE: packages/core/lib/global-position.ts
================================================
interface Position {
  x: number;
  y: number;
}

export class GlobalPosition {
  target: Element;
  original: Position;
  private scaleFactor: number = 1;
  private frameEl: HTMLIFrameElement | null = null;
  private frameRect: DOMRect | null = null;

  constructor(target: Element, original: Position) {
    this.target = target;
    this.original = original;

    this.frameEl = document.querySelector("iframe#preview-frame");

    if (this.frameEl) {
      this.frameRect = this.frameEl.getBoundingClientRect();

      this.scaleFactor =
        this.frameRect.width / (this.frameEl.contentWindow?.innerWidth || 1);
    }
  }

  get x() {
    return this.original.x;
  }

  get y() {
    return this.original.y;
  }

  get global() {
    if (document !== this.target.ownerDocument && this.frameRect) {
      return {
        x: this.x * this.scaleFactor + this.frameRect.left,
        y: this.y * this.scaleFactor + this.frameRect.top,
      };
    }

    return this.original;
  }

  get frame() {
    if (document === this.target.ownerDocument && this.frameRect) {
      return {
        x: (this.x - this.frameRect.left) / this.scaleFactor,
        y: (this.y - this.frameRect.top) / this.scaleFactor,
      };
    }

    return this.original;
  }
}



================================================
FILE: packages/core/lib/index.ts
================================================
export * from "./filter";
export { default as getClassNameFactory } from "./get-class-name-factory";
export * from "./data/reorder";
export * from "./data/replace";



================================================
FILE: packages/core/lib/insert-component.ts
================================================
import { InsertAction } from "../reducer";
import { insertAction } from "../reducer/actions/insert";
import { AppStore } from "../store";
import { generateId } from "./generate-id";
import { getItem } from "./data/get-item";

// Makes testing easier without mocks
export const insertComponent = async (
  componentType: string,
  zone: string,
  index: number,
  appStore: AppStore
) => {
  // Reuse newData so ID retains parity between dispatch and resolver
  const id = generateId(componentType);

  const insertActionData: InsertAction = {
    type: "insert",
    componentType,
    destinationIndex: index,
    destinationZone: zone,
    id,
  };

  const { state, dispatch, resolveComponentData } = appStore;

  const insertedState = insertAction(state, insertActionData, appStore);

  // Dispatch the insert, immediately
  dispatch({
    ...insertActionData, // Dispatch insert rather set, as user's may rely on this via onAction

    // We must always record history here so the insert is added to user history
    // If the user has defined a resolveData method, they will end up with 2 history
    // entries on insert - one for the initial insert, and one when the data resolves
    recordHistory: true,
  });

  const itemSelector = {
    index,
    zone,
  };

  // Select the item, immediately
  dispatch({ type: "setUi", ui: { itemSelector } });

  const itemData = getItem(itemSelector, insertedState);

  if (itemData) {
    // Run any resolvers, async
    const resolved = await resolveComponentData(itemData, "insert");

    if (resolved.didChange) {
      dispatch({
        type: "replace",
        destinationZone: itemSelector.zone,
        destinationIndex: itemSelector.index,
        data: resolved.node,
      });
    }
  }
};



================================================
FILE: packages/core/lib/is-ios.ts
================================================
export const isIos = () =>
  [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod",
  ].includes(navigator.platform) ||
  // iPad on iOS 13 detection
  (navigator.userAgent.includes("Mac") && "ontouchend" in document);



================================================
FILE: packages/core/lib/load-overrides.ts
================================================
import { Overrides, Plugin } from "../types";

export const loadOverrides = ({
  overrides,
  plugins,
}: {
  overrides?: Partial<Overrides>;
  plugins?: Plugin[];
}) => {
  const collected: Partial<Overrides> = { ...overrides };

  plugins?.forEach((plugin) => {
    Object.keys(plugin.overrides).forEach((_overridesType) => {
      const overridesType = _overridesType as keyof Plugin["overrides"];

      if (overridesType === "fieldTypes") {
        const fieldTypes = plugin.overrides.fieldTypes!;
        Object.keys(fieldTypes).forEach((fieldType) => {
          collected.fieldTypes = collected.fieldTypes || {};

          const childNode = collected.fieldTypes[fieldType];

          const Comp = (props: any) =>
            fieldTypes[fieldType]!({
              ...props,
              children: childNode ? childNode(props) : props.children,
            });

          collected.fieldTypes[fieldType] = Comp;
        });

        return;
      }

      const childNode = collected[overridesType];

      const Comp = (props: any) =>
        plugin.overrides[overridesType]!({
          ...props,
          children: childNode ? childNode(props) : props.children,
        });

      collected[overridesType] = Comp;
    });
  });

  return collected;
};



================================================
FILE: packages/core/lib/migrate.ts
================================================
import { defaultAppState } from "../store/default-app-state";
import { ComponentData, Config, Data } from "../types";
import { walkAppState } from "./data/walk-app-state";

type Migration = (
  props: Data & { [key: string]: any },
  config?: Config
) => Data;

const migrations: Migration[] = [
  // Migrate root to root.props
  (data) => {
    const rootProps = data.root.props || data.root;

    if (Object.keys(data.root).length > 0 && !data.root.props) {
      console.warn(
        "Migration applied: Root props moved from `root` to `root.props`."
      );

      return {
        ...data,
        root: {
          props: {
            ...rootProps,
          },
        },
      };
    }

    return data;
  },

  // Migrate zones to slots
  (data, config) => {
    if (!config) return data;

    console.log("Migrating DropZones to slots...");

    const updatedItems: Record<string, ComponentData> = {};
    const appState = { ...defaultAppState, data };
    const { indexes } = walkAppState(appState, config);

    const deletedCompounds: string[] = [];

    walkAppState(appState, config, (content, zoneCompound, zoneType) => {
      if (zoneType === "dropzone") {
        const [id, slotName] = zoneCompound.split(":");

        const nodeData = indexes.nodes[id].data;
        const componentType = nodeData.type;

        const configForComponent =
          id === "root" ? config.root : config.components[componentType];

        if (configForComponent?.fields?.[slotName]?.type === "slot") {
          // Migrate this to slot
          updatedItems[id] = {
            ...nodeData,
            props: {
              ...nodeData.props,
              ...updatedItems[id]?.props,
              [slotName]: content,
            },
          };

          deletedCompounds.push(zoneCompound);
        }

        return content;
      }

      return content;
    });

    const updated = walkAppState(
      appState,
      config,
      (content) => content,
      (item) => {
        return updatedItems[item.props.id] ?? item;
      }
    );

    deletedCompounds.forEach((zoneCompound) => {
      const [_, propName] = zoneCompound.split(":");
      console.log(
        `✓ Success: Migrated "${zoneCompound}" from DropZone to slot field "${propName}"`
      );
      delete updated.data.zones?.[zoneCompound];
    });

    Object.keys(updated.data.zones ?? {}).forEach((zoneCompound) => {
      const [_, propName] = zoneCompound.split(":");

      throw new Error(
        `Could not migrate DropZone "${zoneCompound}" to slot field. No slot exists with the name "${propName}".`
      );
    });

    delete updated.data.zones;

    return updated.data;
  },
];

export function migrate(data: Data, config?: Config): Data {
  return migrations?.reduce(
    (acc, migration) => migration(acc, config),
    data
  ) as Data;
}



================================================
FILE: packages/core/lib/on-scroll-end.ts
================================================
export const onScrollEnd = (
  frame: Document | Element | null | undefined,
  cb: () => void
) => {
  let scrollTimeout: NodeJS.Timeout;

  const callback = function () {
    clearTimeout(scrollTimeout);
    scrollTimeout = setTimeout(function () {
      cb();

      frame?.removeEventListener("scroll", callback);
    }, 50);
  };

  frame?.addEventListener("scroll", callback);

  // Abort if no scroll timeout was configured after 50ms
  setTimeout(() => {
    if (!scrollTimeout) {
      cb();
    }
  }, 50);
};



================================================
FILE: packages/core/lib/plugin-debug.tsx
================================================
/* eslint-disable react-hooks/rules-of-hooks */
import { createUsePuck } from "./use-puck";
import { Plugin } from "../types";
import { ActionBar } from "../components/ActionBar";
import { IconButton } from "../components/IconButton";
import { LogsIcon } from "lucide-react";

const usePuck = createUsePuck();

export const debugPlugin: Plugin = {
  overrides: {
    actionBar: ({ children, parentAction }) => {
      const item = usePuck((s) => s.selectedItem);
      return (
        <ActionBar>
          <ActionBar.Group>
            {parentAction}
            <ActionBar.Label label={item?.props.id} />
          </ActionBar.Group>

          <ActionBar.Group>{children}</ActionBar.Group>
          <ActionBar.Group>
            <ActionBar.Action onClick={() => console.log(item)}>
              <LogsIcon />
            </ActionBar.Action>
          </ActionBar.Group>
        </ActionBar>
      );
    },
    headerActions: ({ children }) => {
      const appState = usePuck((s) => s.appState);

      return (
        <>
          <IconButton
            onClick={() => {
              // No way to get appState without re-rendering
              console.log(appState);
            }}
            title="Log state"
          >
            <LogsIcon />
          </IconButton>
          {children}
        </>
      );
    },
  },
};



================================================
FILE: packages/core/lib/resolve-all-data.ts
================================================
import {
  ComponentData,
  Config,
  Content,
  Data,
  DefaultComponentProps,
  DefaultRootFieldProps,
  Metadata,
  RootData,
} from "../types";
import { resolveComponentData } from "./resolve-component-data";
import { defaultData } from "./data/default-data";
import { toComponent } from "./data/to-component";
import { mapSlots } from "./data/map-slots";

export async function resolveAllData<
  Props extends DefaultComponentProps = DefaultComponentProps,
  RootProps extends Record<string, any> = DefaultRootFieldProps
>(
  data: Partial<Data>,
  config: Config,
  metadata: Metadata = {},
  onResolveStart?: (item: ComponentData) => void,
  onResolveEnd?: (item: ComponentData) => void
) {
  const defaultedData = defaultData(data);

  const resolveNode = async <T extends ComponentData | RootData>(_node: T) => {
    const node = toComponent(_node);

    onResolveStart?.(node);

    const resolved = (
      await resolveComponentData(
        node,
        config,
        metadata,
        () => {},
        () => {},
        "force"
      )
    ).node as T;

    const resolvedDeep = (await mapSlots(
      resolved,
      processContent,
      config
    )) as T;

    onResolveEnd?.(toComponent(resolvedDeep));

    return resolvedDeep;
  };

  const processContent = async (content: Content) => {
    return Promise.all(content.map(resolveNode));
  };

  const processZones = async () => {
    const zones = data.zones ?? {};

    Object.entries(zones).forEach(async ([zoneKey, content]) => {
      zones[zoneKey] = await Promise.all(content.map(resolveNode));
    });

    return zones;
  };

  const dynamic: Data = {
    root: await resolveNode(defaultedData.root),
    content: await processContent(defaultedData.content),
    zones: await processZones(),
  };

  Object.keys(defaultedData.zones ?? {}).forEach(async (zoneKey) => {
    const content = defaultedData.zones![zoneKey];
    dynamic.zones![zoneKey] = await processContent(content);
  }, {});

  return dynamic as Data<Props, RootProps>;
}



================================================
FILE: packages/core/lib/resolve-component-data.ts
================================================
import {
  ComponentData,
  Config,
  Metadata,
  ResolveDataTrigger,
  RootDataWithProps,
} from "../types";
import { mapSlots } from "./data/map-slots";
import { getChanged } from "./get-changed";
import fdeq from "fast-deep-equal";

export const cache: {
  lastChange: Record<string, any>;
} = { lastChange: {} };

export const resolveComponentData = async <
  T extends ComponentData | RootDataWithProps
>(
  item: T,
  config: Config,
  metadata: Metadata = {},
  onResolveStart?: (item: T) => void,
  onResolveEnd?: (item: T) => void,
  trigger: ResolveDataTrigger = "replace"
) => {
  const configForItem =
    "type" in item && item.type !== "root"
      ? config.components[item.type]
      : config.root;

  const resolvedItem: T = {
    ...item,
  };

  const shouldRunResolver = configForItem?.resolveData && item.props;

  const id = "id" in item.props ? item.props.id : "root";

  if (shouldRunResolver) {
    const { item: oldItem = null, resolved = {} } = cache.lastChange[id] || {};

    if (item && fdeq(item, oldItem)) {
      return { node: resolved, didChange: false };
    }

    const changed = getChanged(item, oldItem) as any;

    if (onResolveStart) {
      onResolveStart(item);
    }

    const { props: resolvedProps, readOnly = {} } =
      await configForItem.resolveData!(item, {
        changed,
        lastData: oldItem,
        metadata: { ...metadata, ...configForItem.metadata },
        trigger,
      });

    resolvedItem.props = {
      ...item.props,
      ...resolvedProps,
    };

    if (Object.keys(readOnly).length) {
      resolvedItem.readOnly = readOnly;
    }
  }

  let itemWithResolvedChildren = await mapSlots(
    resolvedItem,
    async (content) => {
      return await Promise.all(
        content.map(
          async (childItem) =>
            (
              await resolveComponentData(
                childItem as T,
                config,
                metadata,
                onResolveStart,
                onResolveEnd,
                trigger
              )
            ).node
        )
      );
    },

    config
  );

  if (shouldRunResolver && onResolveEnd) {
    onResolveEnd(resolvedItem);
  }

  cache.lastChange[id] = {
    item: item,
    resolved: itemWithResolvedChildren,
  };

  return {
    node: itemWithResolvedChildren,
    didChange: !fdeq(item, itemWithResolvedChildren),
  };
};



================================================
FILE: packages/core/lib/resolve-permissions.ts
================================================
import {
  AppState,
  ComponentData,
  Config,
  Data,
  ExtractPropsFromConfig,
  ExtractRootPropsFromConfig,
  Permissions,
} from "../types";

export const resolvePermissions = <
  UserConfig extends Config = Config,
  UserProps extends ExtractPropsFromConfig<UserConfig> = ExtractPropsFromConfig<UserConfig>,
  UserRootProps extends ExtractRootPropsFromConfig<UserConfig> = ExtractRootPropsFromConfig<UserConfig>,
  UserData extends Data<UserProps, UserRootProps> | Data = Data<
    UserProps,
    UserRootProps
  >
>({
  data,
  lastData,
  config,
  changed,
  lastPermissions,
  permissions,
  appState,
}: {
  data: UserData["content"][0] | undefined;
  lastData: UserData["content"][0] | null;
  config: UserConfig;
  changed: Record<string, boolean>;
  lastPermissions: Partial<Permissions>;
  permissions: Partial<Permissions>;
  appState: AppState<UserData>;
}) => {
  const componentConfig = data ? config.components[data.type] : null;

  if (data && lastData && componentConfig?.resolvePermissions) {
    return componentConfig.resolvePermissions(data, {
      changed,
      lastPermissions,
      permissions,
      appState,
      lastData,
    });
  }

  return {};
};



================================================
FILE: packages/core/lib/root-droppable-id.ts
================================================
export const rootAreaId = "root";
export const rootZone = "default-zone";
export const rootDroppableId = `${rootAreaId}:${rootZone}`;



================================================
FILE: packages/core/lib/safe-json-parse.ts
================================================
export const safeJsonParse = <T = any>(str: string) => {
  try {
    const jsonValue: T = JSON.parse(str);
    return jsonValue;
  } catch {
    return str;
  }
};



================================================
FILE: packages/core/lib/scroll-into-view.ts
================================================
export const scrollIntoView = (el: HTMLElement) => {
  const oldStyle = { ...el.style };

  el.style.scrollMargin = "256px";

  if (el) {
    el?.scrollIntoView({ behavior: "smooth" });

    el.style.scrollMargin = oldStyle.scrollMargin || "";
  }
};



================================================
FILE: packages/core/lib/throttle.ts
================================================
export function timeout(callback: () => void, duration: number): () => void {
  const id = setTimeout(callback, duration);

  return () => clearTimeout(id);
}

export function throttle<T extends (...args: any[]) => any>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void {
  const time = () => performance.now();
  let cancel: (() => void) | undefined;
  let lastRan = 0; // Start with 0 to indicate it hasn't run yet

  return function (this: any, ...args: Parameters<T>) {
    const now = time();
    const context = this;

    if (now - lastRan >= limit) {
      // If enough time has passed, run the function immediately
      func.apply(context, args);
      lastRan = now;
    } else {
      // Otherwise, schedule it to run after the remaining time
      cancel?.(); // Cancel any previously scheduled call
      cancel = timeout(() => {
        func.apply(context, args);
        lastRan = time();
      }, limit - (now - lastRan));
    }
  };
}



================================================
FILE: packages/core/lib/transform-props.ts
================================================
import { walkTree } from "./data/walk-tree";
import {
  Config,
  Data,
  DefaultComponentProps,
  DefaultRootFieldProps,
} from "../types";
import { defaultData } from "./data/default-data";

type PropTransform<
  Props extends DefaultComponentProps = DefaultComponentProps,
  RootProps extends DefaultComponentProps = DefaultRootFieldProps
> = Partial<
  {
    [ComponentName in keyof Props]: (
      props: Props[ComponentName] & { [key: string]: any }
    ) => Props[ComponentName];
  } & { root: (props: RootProps & { [key: string]: any }) => RootProps }
>;

export function transformProps<
  Props extends DefaultComponentProps = DefaultComponentProps,
  RootProps extends DefaultComponentProps = DefaultRootFieldProps
>(
  data: Partial<Data>,
  propTransforms: PropTransform<Props, RootProps>,
  config: Config = { components: {} }
): Data {
  const mapItem = (item: any) => {
    if (propTransforms[item.type]) {
      return {
        ...item,
        props: {
          id: item.props.id,
          ...propTransforms[item.type]!(item.props as any),
        },
      };
    }

    return item;
  };

  const defaultedData = defaultData(data);

  // DEPRECATED - handle legacy root props
  const rootProps = defaultedData.root.props || defaultedData.root;
  let newRoot = { ...defaultedData.root };
  if (propTransforms["root"]) {
    newRoot.props = propTransforms["root"](rootProps as any);
  }

  const dataWithUpdatedRoot = { ...defaultedData, root: newRoot };

  const updatedData = walkTree(dataWithUpdatedRoot, config, (content) =>
    content.map(mapItem)
  );

  // DEPRECATED - handle legacy root props
  if (!defaultedData.root.props) {
    updatedData.root = updatedData.root.props as any;
  }

  return updatedData;
}



================================================
FILE: packages/core/lib/use-breadcrumbs.ts
================================================
import { useMemo } from "react";
import { useAppStore, useAppStoreApi } from "../store";
import { ItemSelector } from "./data/get-item";

export type Breadcrumb = {
  label: string;
  selector: ItemSelector | null;
  zoneCompound?: string;
};

export const useBreadcrumbs = (renderCount?: number) => {
  const selectedId = useAppStore((s) => s.selectedItem?.props.id);
  const config = useAppStore((s) => s.config);
  const path = useAppStore((s) => s.state.indexes.nodes[selectedId]?.path);
  const appStore = useAppStoreApi();

  return useMemo<Breadcrumb[]>(() => {
    const breadcrumbs =
      path?.map((zoneCompound) => {
        const [componentId] = zoneCompound.split(":");

        if (componentId === "root") {
          return {
            label: "Page",
            selector: null,
          };
        }

        const node = appStore.getState().state.indexes.nodes[componentId];
        const parentId = node.path[node.path.length - 1];
        const contentIds =
          appStore.getState().state.indexes.zones[parentId]?.contentIds || [];
        const index = contentIds.indexOf(componentId);

        const label = node
          ? config.components[node.data.type]?.label ?? node.data.type
          : "Component";

        return {
          label,
          selector: node
            ? {
                index,
                zone: node.path[node.path.length - 1],
              }
            : null,
        };
      }) || [];

    if (renderCount) {
      return breadcrumbs.slice(breadcrumbs.length - renderCount);
    }

    return breadcrumbs;
  }, [path, renderCount]);
};



================================================
FILE: packages/core/lib/use-component-list.tsx
================================================
import { ReactNode, useEffect, useState } from "react";
import { ComponentList } from "../components/ComponentList";
import { useAppStore } from "../store";

export const useComponentList = () => {
  const [componentList, setComponentList] = useState<ReactNode[]>();
  const config = useAppStore((s) => s.config);
  const uiComponentList = useAppStore((s) => s.state.ui.componentList);

  useEffect(() => {
    if (Object.keys(uiComponentList).length > 0) {
      const matchedComponents: string[] = [];

      let _componentList: ReactNode[];

      _componentList = Object.entries(uiComponentList).map(
        ([categoryKey, category]) => {
          if (category.visible === false || !category.components) {
            return null;
          }

          return (
            <ComponentList
              id={categoryKey}
              key={categoryKey}
              title={category.title || categoryKey}
            >
              {category.components.map((componentName, i) => {
                matchedComponents.push(componentName as string);

                const componentConf = config.components[componentName] || {};

                return (
                  <ComponentList.Item
                    key={componentName}
                    label={(componentConf["label"] ?? componentName) as string}
                    name={componentName as string}
                    index={i}
                  />
                );
              })}
            </ComponentList>
          );
        }
      );

      const remainingComponents = Object.keys(config.components).filter(
        (component) => matchedComponents.indexOf(component) === -1
      );

      if (
        remainingComponents.length > 0 &&
        !uiComponentList.other?.components &&
        uiComponentList.other?.visible !== false
      ) {
        _componentList.push(
          <ComponentList
            id="other"
            key="other"
            title={uiComponentList.other?.title || "Other"}
          >
            {remainingComponents.map((componentName, i) => {
              const componentConf = config.components[componentName] || {};

              return (
                <ComponentList.Item
                  key={componentName}
                  name={componentName as string}
                  label={(componentConf["label"] ?? componentName) as string}
                  index={i}
                />
              );
            })}
          </ComponentList>
        );
      }

      setComponentList(_componentList);
    }
  }, [config.categories, config.components, uiComponentList]);

  return componentList;
};



================================================
FILE: packages/core/lib/use-context-store.ts
================================================
import { Context, useContext } from "react";
import { StoreApi, useStore } from "zustand";
import { useShallow } from "zustand/react/shallow";

type ExtractState<S> = S extends {
  getState: () => infer T;
}
  ? T
  : never;

/**
 * Use a Zustand store via context
 */
export function useContextStore<T, U>(
  context: Context<StoreApi<T>>,
  selector: (s: ExtractState<StoreApi<T>>) => U
): U {
  const store = useContext(context);

  if (!store) {
    throw new Error("useContextStore must be used inside context");
  }

  return useStore<StoreApi<T>, U>(store, useShallow(selector));
}



================================================
FILE: packages/core/lib/use-frame.ts
================================================
import { useEffect, useState } from "react";
import { getFrame } from "./get-frame";

export const useFrame = () => {
  const [el, setEl] = useState<Document>();

  useEffect(() => {
    const frame = getFrame();

    if (frame) {
      setEl(frame);
    }
  }, []);

  return el;
};



================================================
FILE: packages/core/lib/use-hotkey.ts
================================================
import { useEffect } from "react";
import { create } from "zustand";
import { subscribeWithSelector } from "zustand/middleware";

const keys = [
  "ctrl",
  "meta",
  "shift",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
] as const;

type KeyStrict = (typeof keys)[number];
type KeyMapStrict = Partial<Record<KeyStrict, boolean>>;
type KeyMap = Partial<Record<string, boolean>>;
type KeyCodeMap = Record<string, KeyStrict>;

const keyCodeMap: KeyCodeMap = {
  ControlLeft: "ctrl",
  ControlRight: "ctrl",
  MetaLeft: "meta",
  MetaRight: "meta",
  ShiftLeft: "shift",
  ShiftRight: "shift",
  KeyA: "a",
  KeyB: "b",
  KeyC: "c",
  KeyD: "d",
  KeyE: "e",
  KeyF: "f",
  KeyG: "g",
  KeyH: "h",
  KeyI: "i",
  KeyJ: "j",
  KeyK: "k",
  KeyL: "l",
  KeyM: "m",
  KeyN: "n",
  KeyO: "o",
  KeyP: "p",
  KeyQ: "q",
  KeyR: "r",
  KeyS: "s",
  KeyT: "t",
  KeyU: "u",
  KeyV: "v",
  KeyW: "w",
  KeyX: "x",
  KeyY: "y",
  KeyZ: "z",
};

const useHotkeyStore = create<{
  held: KeyMap;
  hold: (key: string) => void;
  release: (key: string) => void;
  reset: (held?: KeyMapStrict) => void;
  triggers: Record<string, { combo: KeyMapStrict; cb: Function }>;
}>()(
  subscribeWithSelector((set) => ({
    held: {},
    hold: (key) =>
      set((s) => (s.held[key] ? s : { held: { ...s.held, [key]: true } })),
    release: (key) =>
      set((s) => (s.held[key] ? { held: { ...s.held, [key]: false } } : s)),
    reset: (held = {}) => set(() => ({ held })),
    triggers: {},
  }))
);

export const monitorHotkeys = (doc: Document) => {
  const onKeyDown = (e: KeyboardEvent) => {
    const key = keyCodeMap[e.code];

    if (key) {
      useHotkeyStore.getState().hold(key);

      const { held, triggers } = useHotkeyStore.getState();

      Object.values(triggers).forEach(({ combo, cb }) => {
        const conditionMet =
          Object.entries(combo).every(
            ([key, value]) => value === !!held[key]
          ) &&
          Object.entries(held).every(
            ([key, value]) => value === !!(combo as KeyMap)[key]
          );

        if (conditionMet) {
          e.preventDefault();
          cb();
        }
      });

      // Only retain hold on modifiers
      if (key !== "meta" && key !== "ctrl" && key !== "shift") {
        useHotkeyStore.getState().release(key);
      }
    }
  };
  const onKeyUp = (e: KeyboardEvent) => {
    const key = keyCodeMap[e.code];

    if (key) {
      if (key === "meta") {
        // Release all keys when releasing meta, as macOS prevents keyUp detection from other keys when meta is held
        useHotkeyStore.getState().reset();
      } else {
        useHotkeyStore.getState().release(key);
      }
    }
  };

  doc.addEventListener("keydown", onKeyDown);
  doc.addEventListener("keyup", onKeyUp);

  return () => {
    doc.removeEventListener("keydown", onKeyDown);
    doc.removeEventListener("keyup", onKeyUp);
  };
};

export const useMonitorHotkeys = () => {
  useEffect(() => monitorHotkeys(document), []);
};

export const useHotkey = (combo: KeyMapStrict, cb: Function) => {
  useEffect(
    () =>
      useHotkeyStore.setState((s) => ({
        triggers: {
          ...s.triggers,
          [`${Object.keys(combo).join("+")}`]: { combo, cb },
        },
      })),
    []
  );
};



================================================
FILE: packages/core/lib/use-inject-css.ts
================================================
import { useEffect, useState } from "react";
import { getFrame } from "./get-frame";

const styles = ``;

export const useInjectStyleSheet = (
  initialStyles: string,
  iframeEnabled?: boolean
) => {
  const [el, setEl] = useState<HTMLStyleElement>();

  useEffect(() => {
    setEl(document.createElement("style"));
  }, []);

  useEffect(() => {
    if (!el || typeof window === "undefined") {
      return;
    }

    el.innerHTML = initialStyles;

    if (iframeEnabled) {
      const frame = getFrame();
      frame?.head?.appendChild(el);
    }

    document.head.appendChild(el);
  }, [iframeEnabled, el]);

  return el;
};

export const useInjectGlobalCss = (iframeEnabled?: boolean) => {
  return useInjectStyleSheet(styles, iframeEnabled);
};



================================================
FILE: packages/core/lib/use-loaded-overrides.ts
================================================
import { useMemo } from "react";
import { loadOverrides } from "./load-overrides";
import { Overrides, Plugin } from "../types";

export const useLoadedOverrides = ({
  overrides,
  plugins,
}: {
  overrides?: Partial<Overrides>;
  plugins?: Plugin[];
}) => {
  return useMemo(() => {
    return loadOverrides({ overrides, plugins });
  }, [plugins, overrides]);
};



================================================
FILE: packages/core/lib/use-on-value-change.ts
================================================
import { useRef, useEffect } from "react";

export function useOnValueChange<T>(
  value: T,
  onChange: (value: T, oldValue: T) => void,
  compare: (value: T, oldValue: T) => boolean = Object.is,
  deps: any[] = []
) {
  const tracked = useRef<T>(value);

  useEffect(() => {
    const oldValue = tracked.current;

    if (!compare(value, oldValue)) {
      tracked.current = value;
      onChange(value, oldValue);
    }
  }, [onChange, compare, value, ...deps]);
}



================================================
FILE: packages/core/lib/use-parent.ts
================================================
import { useAppStore, useAppStoreApi } from "../store";

export const useParent = () => {
  const appStore = useAppStoreApi();

  const selectedItem = appStore.getState().selectedItem;
  const parent = useAppStore((s) => {
    const node = s.state.indexes.nodes[selectedItem?.props.id];
    return node?.parentId ? s.state.indexes.nodes[node.parentId] : null;
  });

  return parent?.data ?? null;
};



================================================
FILE: packages/core/lib/use-preview-mode-hotkeys.ts
================================================
import { useCallback } from "react";
import { useHotkey } from "./use-hotkey";
import { useAppStoreApi } from "../store";

export const usePreviewModeHotkeys = () => {
  const appStore = useAppStoreApi();
  const toggleInteractive = useCallback(() => {
    const dispatch = appStore.getState().dispatch;

    dispatch({
      type: "setUi",
      ui: (ui) => ({
        previewMode: ui.previewMode === "edit" ? "interactive" : "edit",
      }),
    });
  }, [appStore]);

  useHotkey({ meta: true, i: true }, toggleInteractive);
  useHotkey({ ctrl: true, i: true }, toggleInteractive); // Windows
};



================================================
FILE: packages/core/lib/use-puck.ts
================================================
import { Config, UserGenerics, AppState, ComponentData } from "../types";
import { createContext, useContext, useEffect, useState } from "react";
import { AppStore, useAppStoreApi } from "../store";
import {
  GetPermissions,
  RefreshPermissions,
} from "../store/slices/permissions";
import { HistorySlice } from "../store/slices/history";
import { createStore, StoreApi, useStore } from "zustand";
import { makeStatePublic } from "./data/make-state-public";
import { getItem, ItemSelector } from "./data/get-item";

type WithGet<T> = T & { get: () => T };

export type UsePuckData<
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
> = {
  appState: AppState;
  config: UserConfig;
  dispatch: AppStore["dispatch"];
  getPermissions: GetPermissions<UserConfig>;
  refreshPermissions: RefreshPermissions<UserConfig>;
  selectedItem: G["UserComponentData"] | null;
  getItemBySelector: (selector: ItemSelector) => ComponentData | undefined;
  getItemById: (id: string) => ComponentData | undefined;
  getSelectorForId: (id: string) => Required<ItemSelector> | undefined;
  history: {
    back: HistorySlice["back"];
    forward: HistorySlice["forward"];
    setHistories: HistorySlice["setHistories"];
    setHistoryIndex: HistorySlice["setHistoryIndex"];
    histories: HistorySlice["histories"];
    index: HistorySlice["index"];
    hasPast: boolean;
    hasFuture: boolean;
  };
};

export type PuckApi<UserConfig extends Config = Config> =
  UsePuckData<UserConfig>;

type UsePuckStore<UserConfig extends Config = Config> = WithGet<
  PuckApi<UserConfig>
>;

type PickedStore = Pick<
  AppStore,
  "config" | "dispatch" | "selectedItem" | "permissions" | "history" | "state"
>;

export const generateUsePuck = (store: PickedStore): UsePuckStore => {
  const history: UsePuckStore["history"] = {
    back: store.history.back,
    forward: store.history.forward,
    setHistories: store.history.setHistories,
    setHistoryIndex: store.history.setHistoryIndex,
    hasPast: store.history.hasPast(),
    hasFuture: store.history.hasFuture(),
    histories: store.history.histories,
    index: store.history.index,
  };

  const storeData: PuckApi = {
    appState: makeStatePublic(store.state),
    config: store.config,
    dispatch: store.dispatch,
    getPermissions: store.permissions.getPermissions,
    refreshPermissions: store.permissions.refreshPermissions,
    history,
    selectedItem: store.selectedItem || null,
    getItemBySelector: (selector) => getItem(selector, store.state),
    getItemById: (id) => store.state.indexes.nodes[id].data,
    getSelectorForId: (id) => {
      const node = store.state.indexes.nodes[id];

      if (!node) return;

      const zoneCompound = `${node.parentId}:${node.zone}`;

      const index =
        store.state.indexes.zones[zoneCompound].contentIds.indexOf(id);

      return { zone: zoneCompound, index };
    },
  };

  const get = () => storeData;

  return { ...storeData, get };
};

export const UsePuckStoreContext = createContext<StoreApi<UsePuckStore> | null>(
  null
);

const convertToPickedStore = (store: AppStore): PickedStore => {
  return {
    state: store.state,
    config: store.config,
    dispatch: store.dispatch,
    permissions: store.permissions,
    history: store.history,
    selectedItem: store.selectedItem,
  };
};

/**
 * Mirror changes in appStore to usePuckStore
 */
export const useRegisterUsePuckStore = (
  appStore: ReturnType<typeof useAppStoreApi>
) => {
  const [usePuckStore] = useState(() =>
    createStore(() =>
      generateUsePuck(convertToPickedStore(appStore.getState()))
    )
  );

  useEffect(() => {
    // Subscribe here isn't doing anything as selection isn't shallow
    return appStore.subscribe(
      (store) => convertToPickedStore(store),
      (pickedStore) => {
        usePuckStore.setState(generateUsePuck(pickedStore));
      }
    );
  }, []);

  return usePuckStore;
};

/**
 * createUsePuck
 *
 * Create a typed usePuck hook, which is necessary because the user may provide a generic type but not
 * a selector type, and TS does not currently support partial inference.
 * Related: https://github.com/microsoft/TypeScript/issues/26242
 *
 * @returns a typed usePuck function
 */
export function createUsePuck<UserConfig extends Config = Config>() {
  return function usePuck<T = PuckApi<UserConfig>>(
    selector: (state: UsePuckStore<UserConfig>) => T
  ): T {
    const usePuckApi = useContext(UsePuckStoreContext);

    if (!usePuckApi) {
      throw new Error("usePuck must be used inside <Puck>.");
    }

    const result = useStore(
      usePuckApi as unknown as StoreApi<UsePuckStore<UserConfig>>,
      selector ?? ((s) => s as T)
    );

    return result;
  };
}

export function usePuck<UserConfig extends Config = Config>() {
  useEffect(() => {
    console.warn(
      "You're using the `usePuck` method without a selector, which may cause unnecessary re-renders. Replace with `createUsePuck` and provide a selector for improved performance."
    );
  }, []);

  return createUsePuck<UserConfig>()((s) => s);
}

/**
 * Get the latest state without relying on a render
 *
 * @returns PuckApi
 */
export function useGetPuck() {
  const usePuckApi = useContext(UsePuckStoreContext);

  if (!usePuckApi) {
    throw new Error("usePuckGet must be used inside <Puck>.");
  }

  return usePuckApi.getState;
}



================================================
FILE: packages/core/lib/use-safe-id.ts
================================================
import React, { useState } from "react";
import { generateId } from "./generate-id";

export const useSafeId = () => {
  if (typeof React.useId !== "undefined") {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return React.useId();
  }

  // eslint-disable-next-line react-hooks/rules-of-hooks
  const [id] = useState(generateId());

  return id;
};



================================================
FILE: packages/core/lib/use-slots.tsx
================================================
import { ReactNode, useMemo } from "react";
import { ComponentData, Config, Content, RootData } from "../types";
import { DropZoneProps } from "../components/DropZone/types";
import { mapSlots } from "./data/map-slots";

export function useSlots<T extends ComponentData | RootData>(
  config: Config,
  item: T,
  renderSlotEdit: (dzProps: DropZoneProps & { content: Content }) => ReactNode,
  renderSlotRender: (
    dzProps: DropZoneProps & { content: Content }
  ) => ReactNode = renderSlotEdit,
  readOnly?: T["readOnly"],
  forceReadOnly?: boolean
): T["props"] {
  const slotProps = useMemo(() => {
    const mapped = mapSlots(
      item,
      (content, _parentId, propName, field, propPath) => {
        const wildcardPath = propPath.replace(/\[\d+\]/g, "[*]");
        const isReadOnly =
          readOnly?.[propPath] || readOnly?.[wildcardPath] || forceReadOnly;

        const render = isReadOnly ? renderSlotRender : renderSlotEdit;

        const Slot = (dzProps: DropZoneProps) =>
          render({
            allow: field?.type === "slot" ? field.allow : [],
            disallow: field?.type === "slot" ? field.disallow : [],
            ...dzProps,
            zone: propName,
            content,
          });

        return Slot;
      },
      config
    ).props;

    return mapped;
  }, [config, item, readOnly, forceReadOnly]);

  const mergedProps = useMemo(
    () => ({ ...item.props, ...slotProps }),
    [item.props, slotProps]
  );

  return mergedProps;
}



================================================
FILE: packages/core/lib/use-why-render.ts
================================================
import { useEffect } from "react";

export const useWhyRender = (
  obj: Record<string, any>,
  onRender: (key: string) => void
) => {
  Object.keys(obj).map((key) => {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useEffect(() => {
      onRender(key);
    }, [obj[key]]);
  });
};



================================================
FILE: packages/core/lib/__tests__/insert-component.spec.tsx
================================================
import { cleanup } from "@testing-library/react";
import { ComponentData, Config, RootDataWithProps } from "../../types";
import { PuckAction } from "../../reducer";
import { insertComponent } from "../insert-component";
import { rootDroppableId } from "../root-droppable-id";

import { createAppStore } from "../../store";

const appStore = createAppStore();

const config: Config = {
  components: {
    MyComponent: {
      fields: {
        prop: { type: "text" },
        object: { type: "object", objectFields: { slot: { type: "slot" } } },
      },
      defaultProps: {
        prop: "Unresolved",
        object: {
          slot: [
            {
              type: "MyComponent",
              props: {
                prop: "Unresolved",
                object: { slot: [] },
              },
            },
          ],
        },
      },
      resolveData: ({ props }) => {
        return {
          props: {
            ...props,
            prop: "Hello, world",
          },
          readOnly: {
            prop: true,
          },
        };
      },
      render: () => <div />,
    },
  },
};

type ComponentOrRootData = ComponentData | RootDataWithProps;

describe("use-insert-component", () => {
  describe("insert-component", () => {
    let dispatchedEvents: PuckAction[] = [];
    let resolvedDataEvents: ComponentOrRootData[] = [];
    let resolvedTrigger: string = "";

    beforeEach(() => {
      appStore.setState(
        {
          ...appStore.getInitialState(),
          config,
          dispatch: (action) => {
            dispatchedEvents.push(action);
          },
          resolveComponentData: async (data, trigger) => {
            resolvedDataEvents.push(data);

            resolvedTrigger = trigger;

            return data as any;
          },
        },
        true
      );
    });

    afterEach(() => {
      cleanup();
      dispatchedEvents = [];
      resolvedDataEvents = [];
    });

    it("should dispatch the insert action", async () => {
      insertComponent("MyComponent", rootDroppableId, 0, appStore.getState());

      expect(dispatchedEvents[0]).toEqual<PuckAction>({
        type: "insert",
        componentType: "MyComponent",
        destinationZone: rootDroppableId,
        destinationIndex: 0,
        id: expect.stringContaining("MyComponent-"),
        recordHistory: true,
      });
    });

    it("should dispatch the setUi action, and select the item", async () => {
      insertComponent("MyComponent", rootDroppableId, 0, appStore.getState());

      expect(dispatchedEvents[1]).toEqual<PuckAction>({
        type: "setUi",
        ui: {
          itemSelector: {
            zone: rootDroppableId,
            index: 0,
          },
        },
      });
    });

    it("should run any resolveData methods on the inserted item", async () => {
      insertComponent("MyComponent", rootDroppableId, 0, appStore.getState());

      expect(resolvedDataEvents[0]).toEqual({
        type: "MyComponent",
        props: {
          id: expect.stringContaining("MyComponent-"),
          prop: "Unresolved",
          object: {
            slot: [
              {
                type: "MyComponent",
                props: {
                  id: expect.stringContaining("MyComponent-"),
                  prop: "Unresolved",
                  object: { slot: [] },
                },
              },
            ],
          },
        },
      });

      expect(resolvedTrigger).toEqual("insert");
    });
  });
});



================================================
FILE: packages/core/lib/__tests__/load-overrides.spec.tsx
================================================
import { loadOverrides } from "../load-overrides";

describe("load-overrides", () => {
  it("should curry the overrides for any given override", () => {
    const loaded = loadOverrides({
      overrides: {
        header: ({ children }) => `${children} | 1` as any,
      },
      plugins: [
        {
          overrides: {
            header: ({ children }) => `${children} | 2` as any,
          },
        },
        {
          overrides: {
            header: ({ children }) => `${children} | 3` as any,
          },
        },
      ],
    });

    expect(loaded.header!({ actions: "", children: "0" })).toBe(
      "0 | 1 | 2 | 3"
    );
  });

  it("should curry the overrides for fieldTypes", () => {
    const loaded = loadOverrides({
      overrides: {
        fieldTypes: { text: ({ children }) => `${children} | 1` as any },
      },
      plugins: [
        {
          overrides: {
            fieldTypes: { text: ({ children }) => `${children} | 2` as any },
          },
        },
        {
          overrides: {
            fieldTypes: { text: ({ children }) => `${children} | 3` as any },
          },
        },
      ],
    });

    expect(loaded.fieldTypes!.text!({ children: "0" } as any)).toBe(
      "0 | 1 | 2 | 3"
    );
  });

  it("should avoid mutating the provided overrides", () => {
    const overrides = {};
    const loaded = loadOverrides({
      overrides,
      plugins: [
        {
          overrides: {
            fieldTypes: { text: ({ children }) => `${children} | 1` as any },
          },
        },
      ],
    });

    expect(overrides).toEqual({});
  });
});



================================================
FILE: packages/core/lib/__tests__/migrate.spec.tsx
================================================
import { Config, Data } from "../../types";
import { migrate } from "../migrate";

jest.spyOn(console, "warn").mockImplementation(() => {});

describe("migrate method", () => {
  it("should migrate root to root.props", () => {
    expect(
      migrate(
        { content: [], root: { title: "Hello, world" } },
        { components: {} }
      )
    ).toEqual({
      content: [],
      root: { props: { title: "Hello, world" } },
    });
  });

  it("should migrate zones to slots", () => {
    const input: Data = {
      content: [{ type: "Flex", props: { id: "Flex-123" } }],
      root: {},
      zones: {
        "Flex-123:flexA": [{ type: "Other", props: { id: "Other-123" } }],
        "Flex-123:flexB": [{ type: "Heading", props: { id: "Heading-123" } }],
        "Other-123:content": [
          { type: "Heading", props: { id: "Heading-456" } },
        ],
      },
    };

    const config: Config = {
      components: {
        Flex: {
          fields: {
            // Migrate to slots for Flex
            flexA: { type: "slot" },
            flexB: { type: "slot" },
          },
          render: () => <div />,
        },
        Other: {
          fields: {
            // Migrate to slots for Other
            content: { type: "slot" },
          },
          render: () => <div />,
        },
        Heading: {
          render: () => <div />,
        },
      },
    };

    const output: Data = {
      content: [
        {
          type: "Flex",
          props: {
            id: "Flex-123",
            flexA: [
              {
                type: "Other",
                props: {
                  id: "Other-123",
                  content: [{ type: "Heading", props: { id: "Heading-456" } }],
                },
              },
            ],
            flexB: [{ type: "Heading", props: { id: "Heading-123" } }],
          },
        },
      ],
      root: { props: {} },
    };

    expect(migrate(input, config)).toEqual(output);
  });

  it("should throw if matching slots aren't defined", () => {
    const input: Data = {
      content: [{ type: "Grid", props: { id: "Grid-123" } }],
      root: {},
      zones: {
        "Grid-123:grid": [{ type: "Heading", props: { id: "Heading-123" } }],
      },
    };

    const config: Config = {
      components: {
        Grid: {
          render: () => <div />,
        },
        Heading: {
          render: () => <div />,
        },
      },
    };

    expect(() => migrate(input, config)).toThrowErrorMatchingInlineSnapshot(
      `"Could not migrate DropZone "Grid-123:grid" to slot field. No slot exists with the name "grid"."`
    );
  });

  it("should support migrating root DropZones", () => {
    const input: Data = {
      root: { props: { title: "" } },
      content: [
        {
          type: "HeadingBlock",
          props: {
            title: "Header",
            id: "HeadingBlock-1694032984497",
          },
        },
      ],
      zones: {
        "root:footer": [
          {
            type: "HeadingBlock",
            props: {
              id: "HeadingBlock-f7f88252-1926-4042-80b0-6c5ec72f2f75",
              title: "Footer header",
            },
          },
        ],
      },
    };

    const config: Config = {
      components: {
        HeadingBlock: {
          fields: {
            title: { type: "text" },
          },
          render: ({ title }) => <h1>{title}</h1>,
        },
      },
      root: {
        fields: {
          footer: { type: "slot" },
        },
        render: ({ children, footer }) => {
          return (
            <>
              {children}
              {footer()}
            </>
          );
        },
      },
    };

    expect(migrate(input, config)).toMatchInlineSnapshot(`
      {
        "content": [
          {
            "props": {
              "id": "HeadingBlock-1694032984497",
              "title": "Header",
            },
            "type": "HeadingBlock",
          },
        ],
        "root": {
          "props": {
            "footer": [
              {
                "props": {
                  "id": "HeadingBlock-f7f88252-1926-4042-80b0-6c5ec72f2f75",
                  "title": "Footer header",
                },
                "type": "HeadingBlock",
              },
            ],
            "title": "",
          },
        },
      }
    `);
  });
});



================================================
FILE: packages/core/lib/__tests__/resolve-all-data.spec.tsx
================================================
import { Config, Data } from "../../types";
import { resolveAllData } from "../resolve-all-data";

const item1 = {
  type: "ComponentWithResolveProps",
  props: { id: "MyComponent-1", prop: "Original", slot: [] },
};
const item3 = {
  type: "ComponentWithoutResolveProps",
  props: { id: "MyComponent-3", prop: "Original", slot: [] },
};
const item2 = {
  type: "ComponentWithoutResolveProps",
  props: { id: "MyComponent-2", prop: "Original", slot: [item3] },
};

const data: Data = {
  root: { props: { title: "" } },
  content: [item1],
  zones: {
    "MyComponent-1:zone": [item2],
  },
};

const config: Config = {
  components: {
    ComponentWithResolveProps: {
      defaultProps: { prop: "example" },
      resolveData: async ({ props }) => {
        return {
          props: { ...props, prop: "Resolved" },
          readOnly: { prop: true },
        };
      },
      render: () => <div />,
    },
    ComponentWithoutResolveProps: {
      defaultProps: { prop: "example" },
      render: () => <div />,
    },
  },
};

describe("resolve-data", () => {
  it("should resolve the data for all components in the data", async () => {
    expect(await resolveAllData(data, config)).toMatchInlineSnapshot(`
      {
        "content": [
          {
            "props": {
              "id": "MyComponent-1",
              "prop": "Resolved",
              "slot": [],
            },
            "readOnly": {
              "prop": true,
            },
            "type": "ComponentWithResolveProps",
          },
        ],
        "root": {
          "props": {
            "id": "root",
            "title": "",
          },
          "type": "root",
        },
        "zones": {
          "MyComponent-1:zone": [
            {
              "props": {
                "id": "MyComponent-2",
                "prop": "Original",
                "slot": [
                  {
                    "props": {
                      "id": "MyComponent-3",
                      "prop": "Original",
                      "slot": [],
                    },
                    "type": "ComponentWithoutResolveProps",
                  },
                ],
              },
              "type": "ComponentWithoutResolveProps",
            },
          ],
        },
      }
    `);
  });
});



================================================
FILE: packages/core/lib/__tests__/resolve-component-data.spec.tsx
================================================
import { resolveComponentData } from "../resolve-component-data";
import { createAppStore } from "../../store";
import { Config, Fields } from "../../types";
import { toComponent } from "../data/to-component";

const appStore = createAppStore();

const myComponentFields: Fields = {
  prop: { type: "text" },
  slot: {
    type: "slot",
  },
  object: {
    type: "object",
    objectFields: {
      slot: {
        type: "slot",
      },
    },
  },
};

const config: Config = {
  root: {
    fields: {
      title: { type: "text" },
      object: { type: "object", objectFields: { slot: { type: "slot" } } },
      slot: { type: "slot" },
      array: {
        type: "array",
        arrayFields: {
          slot: {
            type: "slot",
          },
        },
      },
    },
    resolveData: (rootData) => {
      return {
        ...rootData,
        props: {
          title: "Resolved title",
          slot: [
            {
              type: "MyComponentWithResolver",
              props: { id: "123456789", prop: "Not yet resolved" },
            },
          ],
          object: {
            slot: [
              {
                type: "MyComponentWithResolver",
                props: { id: "987654321", prop: "Not yet resolved" },
              },
            ],
          },
          array: [
            {
              slot: [
                {
                  type: "MyComponentWithResolver",
                  props: { id: "987654321", prop: "Not yet resolved" },
                },
              ],
            },
          ],
        },
        readOnly: { title: true },
      };
    },
  },
  components: {
    MyComponentWithResolver: {
      fields: myComponentFields,
      resolveData: ({ props }) => {
        return {
          props: {
            ...props,
            prop: "Hello, world",
          },
          readOnly: { prop: true },
        };
      },
      render: () => <div />,
    },
    MyComponentWithoutResolver: {
      fields: myComponentFields,
      render: () => <div />,
    },
  },
};

describe("resolveComponentData", () => {
  beforeEach(() => {
    appStore.setState({ ...appStore.getInitialState(), config }, true);
  });

  it("should run resolvers for every node in the tree", async () => {
    const { node: newRoot, didChange } = await resolveComponentData(
      toComponent(appStore.getState().state.data.root),
      appStore.getState().config
    );

    expect(newRoot.props?.title).toBe("Resolved title");
    expect(newRoot.readOnly?.title).toBe(true);
    expect(newRoot.props.slot[0].props.prop).toBe("Hello, world");
    expect(newRoot.props.slot[0].readOnly.prop).toBe(true);
    expect(newRoot.props.object.slot[0].props.prop).toBe("Hello, world");
    expect(newRoot.props.object.slot[0].readOnly.prop).toBe(true);
    expect(newRoot.props.array[0].slot[0].props.prop).toBe("Hello, world");
    expect(newRoot.props.array[0].slot[0].readOnly.prop).toBe(true);
    expect(didChange).toBe(true);
  });

  it("should run child resolvers even if parent doesn't have one", async () => {
    const { node: newRoot, didChange } = await resolveComponentData(
      toComponent({
        type: "MyComponentWithoutResolver",
        props: {
          title: "Resolved title",
          slot: [
            {
              type: "MyComponentWithResolver",
              props: { id: "123456789", prop: "Not yet resolved" },
            },
          ],
          object: {
            slot: [
              {
                type: "MyComponentWithResolver",
                props: { id: "987654321", prop: "Not yet resolved" },
              },
            ],
          },
        },
      }),
      appStore.getState().config
    );

    expect(newRoot.props?.title).toBe("Resolved title");
    expect(newRoot.props.slot[0].props.prop).toBe("Hello, world");
    expect(newRoot.props.slot[0].readOnly.prop).toBe(true);
    expect(newRoot.props.object.slot[0].props.prop).toBe("Hello, world");
    expect(newRoot.props.object.slot[0].readOnly.prop).toBe(true);
    expect(didChange).toBe(true);
  });

  it("should not re-run when node doesn't change", async () => {
    await resolveComponentData(
      toComponent(appStore.getState().state.data.root),
      appStore.getState().config
    );

    const { node: newRoot, didChange } = await resolveComponentData(
      toComponent(appStore.getState().state.data.root),
      appStore.getState().config
    );

    expect(newRoot.props?.title).toBe("Resolved title");
    expect(newRoot.readOnly?.title).toBe(true);
    expect(newRoot.props.slot[0].props.prop).toBe("Hello, world");
    expect(newRoot.props.slot[0].readOnly.prop).toBe(true);
    expect(didChange).toBe(false);
  });
});



================================================
FILE: packages/core/lib/__tests__/transform-props.spec.tsx
================================================
import { transformProps } from "../transform-props";

jest.spyOn(console, "warn").mockImplementation(() => {});

describe("transformProps method", () => {
  it("should migrate props for the root", () => {
    expect(
      transformProps(
        { content: [], root: { props: { title: "Hello, world" } } },
        {
          root: (props) => ({
            updatedTitle: props.title,
          }),
        }
      )
    ).toEqual({
      content: [],
      root: { props: { updatedTitle: "Hello, world" } },
      zones: {},
    });
  });

  // DEPRECATED
  it("should migrate props for the legacy roots", () => {
    expect(
      transformProps(
        { content: [], root: { title: "Hello, world" } },
        {
          root: (props) => ({
            updatedTitle: props.title,
          }),
        }
      )
    ).toEqual({
      content: [],
      root: { updatedTitle: "Hello, world" },
      zones: {},
    });
  });

  it("should migrate props for a specified component", () => {
    expect(
      transformProps(
        {
          content: [
            {
              type: "HeadingBlock",
              props: { title: "Hello, world", id: "123" },
            },
          ],

          root: { props: { title: "Hello, world" } },
          zones: {
            MyZone: [
              {
                type: "HeadingBlock",
                props: { title: "Hello, other world", id: "456" },
              },
            ],
          },
        },
        {
          HeadingBlock: (props) => ({
            heading: props.title,
          }),
        }
      )
    ).toMatchInlineSnapshot(`
      {
        "content": [
          {
            "props": {
              "heading": "Hello, world",
              "id": "123",
            },
            "type": "HeadingBlock",
          },
        ],
        "root": {
          "props": {
            "title": "Hello, world",
          },
        },
        "zones": {
          "MyZone": [
            {
              "props": {
                "id": "456",
                "title": "Hello, other world",
              },
              "type": "HeadingBlock",
            },
          ],
        },
      }
    `);
  });

  it("should migrate props for slots", () => {
    expect(
      transformProps(
        {
          content: [
            {
              type: "Flex",
              props: {
                id: "Flex-1",
                content: [
                  {
                    type: "HeadingBlock",
                    props: { title: "Hello, other world", id: "456" },
                  },
                ],
              },
            },
          ],

          root: {
            props: {
              content: [
                {
                  type: "HeadingBlock",
                  props: { title: "Hello, other world", id: "456" },
                },
              ],
            },
          },
        },
        {
          HeadingBlock: (props) => ({
            heading: props.title,
          }),
        },
        {
          root: {
            fields: { content: { type: "slot" } },
          },
          components: {
            Flex: {
              fields: { content: { type: "slot" } },
              render: () => <div />,
            },
            HeadingBlock: {
              fields: { title: { type: "text" } },
              render: () => <div />,
            },
          },
        }
      )
    ).toMatchInlineSnapshot(`
      {
        "content": [
          {
            "props": {
              "content": [
                {
                  "props": {
                    "heading": "Hello, other world",
                    "id": "456",
                  },
                  "type": "HeadingBlock",
                },
              ],
              "id": "Flex-1",
            },
            "type": "Flex",
          },
        ],
        "root": {
          "props": {
            "content": [
              {
                "props": {
                  "heading": "Hello, other world",
                  "id": "456",
                },
                "type": "HeadingBlock",
              },
            ],
          },
        },
        "zones": {},
      }
    `);
  });
});



================================================
FILE: packages/core/lib/__tests__/use-breadcrumbs.spec.tsx
================================================
import { renderHook, render } from "@testing-library/react";
import { useBreadcrumbs } from "../use-breadcrumbs";
import { createAppStore, appStoreContext } from "../../store";
import { ComponentData, Config } from "../../types";
import { PropsWithChildren } from "react";
import { walkAppState } from "../data/walk-app-state";

const appStore = createAppStore();

const Context = (props: PropsWithChildren) => {
  return (
    <appStoreContext.Provider value={appStore}>
      {props.children}
    </appStoreContext.Provider>
  );
};

function resetStores() {
  // Reset the main app store
  appStore.setState(
    {
      ...appStore.getInitialState(),
    },
    true
  );
}

describe("useBreadcrumbs", () => {
  beforeEach(() => {
    resetStores();
  });

  it("returns an empty array if no path is found", () => {
    // No nodes, no selectedItem => path is undefined
    const { result } = renderHook(() => useBreadcrumbs());
    expect(result.current).toEqual([]);
  });

  it("returns a breadcrumb path including 'Page' for root", () => {
    const config: Config = {
      components: {
        MyComponent: {
          label: "My Component Label",
          render: () => <div />,
        },
      },
    };

    const testItem: ComponentData = {
      type: "MyComponent",
      props: { id: "item-1" },
    };

    const testItem2: ComponentData = {
      type: "MyComponent",
      props: { id: "item-2" },
    };

    appStore.setState({
      config,
      state: walkAppState(
        {
          ui: appStore.getState().state.ui,
          data: {
            content: [testItem],
            root: {},
            zones: {
              "item-1:zone": [testItem2],
            },
          },
          indexes: { nodes: {}, zones: {} },
        },
        config
      ),
      selectedItem: testItem2,
    });

    let result: any;

    const Comp = () => {
      result = useBreadcrumbs();
      return <></>;
    };

    render(
      <Context>
        <Comp />
      </Context>
    );

    // 5) Expect the result to include the "Page" crumb plus the item crumb
    expect(result).toEqual([
      { label: "Page", selector: null },
      {
        label: "My Component Label",
        selector: { index: 0, zone: "root:default-zone" },
      },
    ]);
  });

  it("truncates the breadcrumb list to renderCount if provided", () => {
    const config: Config = {
      components: {
        MyComponent: {
          label: "My Component Label",
          render: () => <div />,
        },
      },
    };

    const testItem: ComponentData = {
      type: "MyComponent",
      props: { id: "item-1" },
    };

    const testItem2: ComponentData = {
      type: "MyComponent",
      props: { id: "item-2" },
    };

    appStore.setState({
      config,
      state: walkAppState(
        {
          ui: appStore.getState().state.ui,
          data: {
            content: [testItem],
            root: {},
            zones: {
              "item-1:zone": [testItem2],
            },
          },
          indexes: { nodes: {}, zones: {} },
        },
        config
      ),
      selectedItem: testItem2,
    });

    let result: any;

    const Comp = () => {
      result = useBreadcrumbs(1);
      return <></>;
    };

    render(
      <Context>
        <Comp />
      </Context>
    );

    expect(result).toEqual([
      {
        label: "My Component Label",
        selector: { index: 0, zone: "root:default-zone" },
      },
    ]);
  });

  it("defaults to using the type name if config.components[type].label is missing", () => {
    // 1) Set up the config & selected item in the app store
    const config: Config = {
      components: {
        MyComponent: {
          render: () => <div />,
        },
      },
    };

    const testItem: ComponentData = {
      type: "MyComponent",
      props: { id: "item-1" },
    };

    const testItem2: ComponentData = {
      type: "MyComponent",
      props: { id: "item-2" },
    };

    appStore.setState({
      config,
      state: walkAppState(
        {
          ui: appStore.getState().state.ui,
          data: {
            content: [testItem],
            root: {},
            zones: {
              "item-1:zone": [testItem2],
            },
          },
          indexes: { nodes: {}, zones: {} },
        },
        config
      ),
      selectedItem: testItem2,
    });

    let result: any;

    const Comp = () => {
      result = useBreadcrumbs();
      return <></>;
    };

    render(
      <Context>
        <Comp />
      </Context>
    );

    // 5) Expect the result to include the "Page" crumb plus the item crumb
    expect(result).toEqual([
      { label: "Page", selector: null },
      {
        label: "MyComponent", // Fall back to type name
        selector: { index: 0, zone: "root:default-zone" },
      },
    ]);
  });
});



================================================
FILE: packages/core/lib/data/default-data.ts
================================================
import { Data } from "../../types";

export const defaultData = (data: Partial<Data>): Data => ({
  ...data,
  root: data.root || {},
  content: data.content || [],
});



================================================
FILE: packages/core/lib/data/default-slots.ts
================================================
import { Fields } from "../../types";

export const defaultSlots = (value: object, fields: Fields) =>
  Object.keys(fields).reduce(
    (acc, fieldName) =>
      fields[fieldName].type === "slot" ? { [fieldName]: [], ...acc } : acc,
    value
  );



================================================
FILE: packages/core/lib/data/find-zones-for-area.ts
================================================
import { PrivateAppState } from "../../types/Internal";

export const findZonesForArea = (state: PrivateAppState, area: string) => {
  return Object.keys(state.indexes.zones).filter(
    (zone) => zone.split(":")[0] === area
  );
};



================================================
FILE: packages/core/lib/data/flatten-data.ts
================================================
import { ComponentData, Config, UserGenerics } from "../../types";
import { PrivateAppState } from "../../types/Internal";
import { walkAppState } from "./walk-app-state";

export const flattenData = <
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
>(
  state: PrivateAppState,
  config: UserConfig
) => {
  const data: ComponentData[] = [];

  walkAppState(
    state,
    config,
    (content) => content,
    (item) => {
      data.push(item);

      return null;
    }
  );

  return data;
};



================================================
FILE: packages/core/lib/data/flatten-node.ts
================================================
import flat from "flat";
import { ComponentData, Config, RootData, UserGenerics } from "../../types";
import { stripSlots } from "./strip-slots";

// Explicitly destructure to account for flat module issues: https://github.com/puckeditor/puck/issues/1089
const { flatten, unflatten } = flat;

export const flattenNode = <
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
>(
  node: ComponentData | RootData,
  config: UserConfig
) => {
  return {
    ...node,
    props: flatten(stripSlots(node, config).props),
  };
};

export const expandNode = (node: ComponentData | RootData) => {
  const props = unflatten(node.props);

  return {
    ...node,
    props,
  };
};



================================================
FILE: packages/core/lib/data/for-related-zones.ts
================================================
import { Content, Data } from "../../types";
import { getZoneId } from "../get-zone-id";

export function forRelatedZones<UserData extends Data>(
  item: UserData["content"][0],
  data: UserData,
  cb: (path: string[], zoneCompound: string, content: Content) => void,
  path: string[] = []
) {
  Object.entries(data.zones || {}).forEach(([zoneCompound, content]) => {
    const [parentId] = getZoneId(zoneCompound);

    if (parentId === item.props.id) {
      cb(path, zoneCompound, content);
    }
  });
}



================================================
FILE: packages/core/lib/data/get-ids-for-parent.ts
================================================
import { PrivateAppState } from "../../types/Internal";

export const getIdsForParent = (
  zoneCompound: string,
  state: PrivateAppState
) => {
  const [parentId] = zoneCompound.split(":");
  const node = state.indexes.nodes[parentId];

  return (node?.path || []).map((p) => p.split(":")[0]);
};



================================================
FILE: packages/core/lib/data/get-item.ts
================================================
import { Data } from "../../types";
import { PrivateAppState } from "../../types/Internal";
import { rootDroppableId } from "../root-droppable-id";

export type ItemSelector = {
  index: number;
  zone?: string;
};

export function getItem<UserData extends Data>(
  selector: ItemSelector,
  state: PrivateAppState
): UserData["content"][0] | undefined {
  const zone = state.indexes.zones?.[selector.zone || rootDroppableId];

  return zone
    ? state.indexes.nodes[zone.contentIds[selector.index]]?.data
    : undefined;
}



================================================
FILE: packages/core/lib/data/insert.ts
================================================
export const insert = (list: any[], index: number, item: any) => {
  const result = Array.from(list || []);
  result.splice(index, 0, item);

  return result;
};



================================================
FILE: packages/core/lib/data/make-state-public.ts
================================================
import { AppState, Data } from "../../types";
import { PrivateAppState } from "../../types/Internal";

export const makeStatePublic = <UserData extends Data>(
  state: PrivateAppState<UserData>
): AppState<UserData> => {
  const { data, ui } = state;

  return { data, ui };
};



================================================
FILE: packages/core/lib/data/map-slots.ts
================================================
import {
  ComponentData,
  Config,
  Content,
  Fields,
  RootData,
  SlotField,
} from "../../types";
import { defaultSlots } from "./default-slots";

type MapFn<T = any> = (
  data: Content,
  parentId: string,
  propName: string,
  field: SlotField,
  propPath: string
) => T;

type PromiseMapFn = MapFn<Promise<any>>;

type EitherMapFn = MapFn<any | Promise<any>>;

type WalkFieldOpts = {
  value: unknown;
  fields: Fields;
  map: EitherMapFn;
  propKey?: string;
  propPath?: string;
  id?: string;
  config: Config;
  recurseSlots?: boolean;
};

type WalkObjectOpts = {
  value: Record<string, any>;
  fields: Fields;
  map: EitherMapFn;
  id: string;
  getPropPath: (str: string) => string;
  config: Config;
  recurseSlots?: boolean;
};

const isPromise = <T = unknown>(v: any): v is Promise<T> =>
  !!v && typeof v.then === "function";

const flatten = (values: Record<string, any>[]) =>
  values.reduce((acc, item) => ({ ...acc, ...item }), {});

const containsPromise = (arr: any[]) => arr.some(isPromise);

export const walkField = ({
  value,
  fields,
  map,
  propKey = "",
  propPath = "",
  id = "",
  config,
  recurseSlots = false,
}: WalkFieldOpts): any | Promise<any> => {
  if (fields[propKey]?.type === "slot") {
    const content = (value as Content) || [];

    const mappedContent = recurseSlots
      ? content.map((el) => {
          const componentConfig = config.components[el.type];

          if (!componentConfig) {
            throw new Error(`Could not find component config for ${el.type}`);
          }

          const fields = componentConfig.fields ?? {};

          return walkField({
            value: { ...el, props: defaultSlots(el.props, fields) },
            fields,
            map,
            id: el.props.id,
            config,
            recurseSlots,
          });
        })
      : content;

    if (containsPromise(mappedContent)) {
      return Promise.all(mappedContent);
    }

    return map(mappedContent, id, propPath, fields[propKey], propPath);
  }

  if (value && typeof value === "object") {
    if (Array.isArray(value)) {
      const arrayFields =
        fields[propKey]?.type === "array" ? fields[propKey].arrayFields : null;

      if (!arrayFields) return value;

      const newValue = value.map((el, idx) =>
        walkField({
          value: el,
          fields: arrayFields,
          map,
          propKey,
          propPath: `${propPath}[${idx}]`,
          id,
          config,
          recurseSlots,
        })
      );

      if (containsPromise(newValue)) {
        return Promise.all(newValue);
      }

      return newValue;
    } else if ("$$typeof" in value) {
      return value;
    } else {
      const objectFields =
        fields[propKey]?.type === "object"
          ? fields[propKey].objectFields
          : fields;

      return walkObject({
        value,
        fields: objectFields,
        map,
        id,
        getPropPath: (k) => `${propPath}.${k}`,
        config,
        recurseSlots,
      });
    }
  }

  return value;
};

const walkObject = ({
  value,
  fields,
  map,
  id,
  getPropPath,
  config,
  recurseSlots,
}: WalkObjectOpts): Record<string, any> => {
  const newProps = Object.entries(value).map(([k, v]) => {
    const opts: WalkFieldOpts = {
      value: v,
      fields,
      map,
      propKey: k,
      propPath: getPropPath(k),
      id,
      config,
      recurseSlots,
    };

    const newValue = walkField(opts);

    if (isPromise(newValue)) {
      return newValue.then((resolvedValue: any) => ({
        [k]: resolvedValue,
      }));
    }

    return {
      [k]: newValue,
    };
  }, {});

  if (containsPromise(newProps)) {
    return Promise.all(newProps).then(flatten);
  }

  return flatten(newProps);
};

export function mapSlots<T extends ComponentData | RootData>(
  item: T,
  map: MapFn,
  config: Config,
  recurseSlots?: boolean
): T;

export function mapSlots<T extends ComponentData | RootData>(
  item: T,
  map: PromiseMapFn,
  config: Config,
  recurseSlots?: boolean
): Promise<T>;

export function mapSlots(
  item: any,
  map: EitherMapFn,
  config: Config,
  recurseSlots: boolean = false
): any {
  const itemType = "type" in item ? item.type : "root";

  const componentConfig =
    itemType === "root" ? config.root : config.components?.[itemType];

  const newProps = walkObject({
    value: defaultSlots(item.props ?? {}, componentConfig?.fields ?? {}),
    fields: componentConfig?.fields ?? {},
    map,
    id: item.props ? item.props.id ?? "root" : "root",
    getPropPath: (k) => k,
    config,
    recurseSlots,
  });

  if (isPromise(newProps)) {
    return newProps.then((resolvedProps) => ({
      ...item,
      props: resolvedProps,
    }));
  }

  return {
    ...item,
    props: newProps,
  };
}



================================================
FILE: packages/core/lib/data/populate-ids.ts
================================================
import { ComponentData, ComponentDataOptionalId, Config } from "../../types";
import { generateId } from "../generate-id";
import { walkTree } from "./walk-tree";

export const populateIds = (
  data: ComponentData,
  config: Config,
  override: boolean = false
): ComponentData => {
  const id = generateId(data.type);

  return walkTree(
    {
      ...data,
      props: override ? { ...data.props, id } : { ...data.props },
    },
    config,
    (contents) =>
      contents.map((item: ComponentDataOptionalId) => {
        const id = generateId(item.type);

        return {
          ...item,
          props: override ? { ...item.props, id } : { id, ...item.props },
        };
      })
  );
};



================================================
FILE: packages/core/lib/data/remove.ts
================================================
export const remove = (list: any[], index: number) => {
  const result = Array.from(list);
  result.splice(index, 1);

  return result;
};



================================================
FILE: packages/core/lib/data/reorder.ts
================================================
export const reorder = (list: any[], startIndex: number, endIndex: number) => {
  const result = Array.from(list);
  const [removed] = result.splice(startIndex, 1);
  result.splice(endIndex, 0, removed);

  return result;
};



================================================
FILE: packages/core/lib/data/replace.ts
================================================
export const replace = <T>(list: T[], index: number, newItem: T) => {
  const result = Array.from(list);
  result.splice(index, 1);
  result.splice(index, 0, newItem);

  return result;
};



================================================
FILE: packages/core/lib/data/setup-zone.ts
================================================
import { Data } from "../../types";
import { rootDroppableId } from "../root-droppable-id";

// Force 'zones' to always be present and non-undefined
type WithZones<T extends Data> = T & { zones: NonNullable<T["zones"]> };

export const setupZone = <UserData extends Data>(
  data: UserData,
  zoneKey: string
): Required<WithZones<UserData>> => {
  if (zoneKey === rootDroppableId) {
    return data as Required<WithZones<UserData>>;
  }

  // Preprocess to ensure zones is not undefined
  const newData = {
    ...data,
    zones: data.zones ? { ...data.zones } : {},
  };

  newData.zones[zoneKey] = newData.zones[zoneKey] || [];

  return newData as Required<WithZones<UserData>>;
};



================================================
FILE: packages/core/lib/data/strip-slots.ts
================================================
import { ComponentData, Config, RootData } from "../../types";
import { mapSlots } from "./map-slots";

export const stripSlots = (
  data: ComponentData | RootData,
  config: Config
): ComponentData | RootData => {
  // Strip out slots to prevent re-renders of parents when child changes
  return mapSlots(data, () => null, config);
};



================================================
FILE: packages/core/lib/data/to-component.ts
================================================
import { ComponentData, RootData } from "../../types";

export const toComponent = (item: ComponentData | RootData): ComponentData => {
  return "type" in item
    ? (item as ComponentData)
    : {
        ...item,
        props: { ...item.props, id: "root" },
        type: "root",
      };
};



================================================
FILE: packages/core/lib/data/to-root.ts
================================================
import { ComponentData, RootData } from "../../types";

export const toRoot = (item: ComponentData | RootData): RootData => {
  if ("type" in item && item.type !== "root") {
    throw new Error("Converting non-root item to root.");
  }

  const { readOnly } = item;

  if (item.props) {
    if ("id" in item.props) {
      const { id, ...props } = item.props;

      return { props, readOnly };
    }

    return { props: item.props, readOnly };
  }

  return { props: {}, readOnly };
};



================================================
FILE: packages/core/lib/data/walk-app-state.ts
================================================
import { forRelatedZones } from "./for-related-zones";
import { rootDroppableId } from "../root-droppable-id";
import {
  ComponentData,
  Config,
  Content,
  Data,
  RootDataWithProps,
} from "../../types";
import {
  NodeIndex,
  PrivateAppState,
  ZoneIndex,
  ZoneType,
} from "../../types/Internal";
import { mapSlots } from "./map-slots";
import { flattenNode } from "./flatten-node";

/**
 * Walk the Puck state, generate indexes and make modifications to nodes.
 *
 * @param state The initial state
 * @param mapContent A callback to modify the content of a DropZone or slot. Called for all DropZones, slots and the root content.
 * @param mapNodeOrSkip A callback to modify a node. Called for every node in the tree. Returning a node will cause it to be reindexed. Conversely, returning `null` will skip indexing for that node.
 *
 * @returns The updated state
 */
export function walkAppState<UserData extends Data = Data>(
  state: PrivateAppState<UserData>,
  config: Config,
  mapContent: (
    content: Content,
    zoneCompound: string,
    zoneType: ZoneType
  ) => Content | void = (content) => content,
  mapNodeOrSkip: (
    item: ComponentData,
    path: string[],
    index: number
  ) => ComponentData | null = (item) => item
): PrivateAppState<UserData> {
  let newZones: Record<string, Content> = {};
  const newZoneIndex: ZoneIndex = {};
  const newNodeIndex: NodeIndex = {};

  const processContent = (
    path: string[],
    zoneCompound: string,
    content: Content,
    zoneType: ZoneType,
    newId?: string
  ): [string, Content] => {
    const [parentId] = zoneCompound.split(":");
    const mappedContent =
      (mapContent(content, zoneCompound, zoneType) ?? content) || [];

    const [_, zone] = zoneCompound.split(":");
    const newZoneCompound = `${newId || parentId}:${zone}`;

    const newContent = mappedContent.map((zoneChild, index) =>
      processItem(zoneChild, [...path, newZoneCompound], index)
    );

    newZoneIndex[newZoneCompound] = {
      contentIds: newContent.map((item) => item.props.id),
      type: zoneType,
    };

    return [newZoneCompound, newContent];
  };

  const processRelatedZones = (
    item: ComponentData,
    newId: string,
    initialPath: string[]
  ) => {
    forRelatedZones(
      item,
      state.data,
      (relatedPath, relatedZoneCompound, relatedContent) => {
        const [zoneCompound, newContent] = processContent(
          relatedPath,
          relatedZoneCompound,
          relatedContent,
          "dropzone",
          newId
        );

        newZones[zoneCompound] = newContent;
      },
      initialPath
    );
  };

  const processItem = (
    item: ComponentData,
    path: string[],
    index: number
  ): ComponentData => {
    const mappedItem = mapNodeOrSkip(item, path, index);

    // Only modify the item if the user has returned it, enabling us to prevent unnecessary mapping and creating new references, which results in re-renders
    if (!mappedItem) return item;

    const id = mappedItem.props.id;

    const newProps = {
      ...mapSlots(
        mappedItem,
        (content, parentId, slotId) => {
          const zoneCompound = `${parentId}:${slotId}`;

          const [_, newContent] = processContent(
            path,
            zoneCompound,
            content,
            "slot",
            parentId
          );

          return newContent;
        },
        config
      ).props,
      id,
    };

    processRelatedZones(item, id, path);

    const newItem = { ...item, props: newProps };

    const thisZoneCompound = path[path.length - 1];
    const [parentId, zone] = thisZoneCompound
      ? thisZoneCompound.split(":")
      : [null, ""];

    newNodeIndex[id] = {
      data: newItem,
      flatData: flattenNode(newItem, config) as ComponentData,
      path,
      parentId,
      zone,
    };

    // For now, we strip type and id from root. This may change in future.
    const finalData: any = { ...newItem, props: { ...newItem.props } };

    if (newProps.id === "root") {
      delete finalData["type"];
      delete finalData.props["id"];
    }

    return finalData;
  };

  const zones = state.data.zones || {};

  const [_, newContent] = processContent(
    [],
    rootDroppableId,
    state.data.content,
    "root"
  );

  const processedContent = newContent;

  const zonesAlreadyProcessed = Object.keys(newZones);

  Object.keys(zones || {}).forEach((zoneCompound) => {
    const [parentId] = zoneCompound.split(":");

    // Don't reprocess zones already processed as related zones
    if (zonesAlreadyProcessed.includes(zoneCompound)) {
      return;
    }

    const [_, newContent] = processContent(
      [rootDroppableId],
      zoneCompound,
      zones[zoneCompound],
      "dropzone",
      parentId
    );

    newZones[zoneCompound] = newContent;
  }, newZones);

  const processedRoot = processItem(
    {
      type: "root",
      props: { ...(state.data.root.props ?? state.data.root), id: "root" },
    },
    [],
    -1
  );

  const root = {
    ...state.data.root,
    props: processedRoot.props,
  } as RootDataWithProps;

  return {
    ...state,
    data: {
      root,
      content: processedContent,
      zones: {
        ...state.data.zones,
        ...newZones,
      },
    } as UserData,
    indexes: {
      nodes: { ...state.indexes.nodes, ...newNodeIndex },
      zones: { ...state.indexes.zones, ...newZoneIndex },
    },
  };
}



================================================
FILE: packages/core/lib/data/walk-tree.ts
================================================
import {
  ComponentData,
  Config,
  Content,
  RootData,
  UserGenerics,
} from "../../types";
import { mapSlots } from "./map-slots";

type WalkTreeOptions = {
  parentId: string;
  propName: string;
};

export function walkTree<
  T extends ComponentData | RootData | G["UserData"],
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
>(
  data: T,
  config: UserConfig,
  callbackFn: (data: Content, options: WalkTreeOptions) => Content | null | void
): T {
  const walkItem = <
    ItemType extends
      | G["UserComponentData"]
      | G["UserData"]["root"]
      | G["UserData"]
  >(
    item: ItemType
  ): ItemType => {
    return mapSlots(
      item as ComponentData,
      (content, parentId, propName) => {
        return callbackFn(content, { parentId, propName }) ?? content;
      },
      config,
      true
    ) as ItemType;
  };

  if ("props" in data) {
    return walkItem(data as any) as T;
  }

  const _data = data as G["UserData"];
  const zones = _data.zones ?? {};

  const mappedContent = _data.content.map(walkItem) as ComponentData[];

  return {
    root: walkItem(_data.root),
    content:
      callbackFn(mappedContent, {
        parentId: "root",
        propName: "default-zone",
      }) ?? mappedContent,
    zones: Object.keys(zones).reduce(
      (acc, zoneCompound) => ({
        ...acc,
        [zoneCompound]: zones[zoneCompound].map(walkItem),
      }),
      {}
    ),
  } as T;
}



================================================
FILE: packages/core/lib/data/__tests__/walk-app-state.spec.tsx
================================================
import { ComponentData, Config, Data, Slot, UiState } from "../../../types";

import {
  createAppStore,
  defaultAppState as _defaultAppState,
} from "../../../store";
import { PrivateAppState } from "../../../types/Internal";
import { walkAppState } from "../walk-app-state";
import { rootDroppableId } from "../../root-droppable-id";
import { flattenNode } from "../flatten-node";

type Props = {
  Comp: {
    prop: string;
    slotA: Slot;
    slotB: Slot;
    array: { slot: Slot }[];
    object: { slot: Slot };
  };
};

type RootProps = {
  title: string;
  slot: Slot;
};

type UserConfig = Config<Props, RootProps>;
type UserData = Data<Props, RootProps>;

const dzZoneCompound = "my-component:zone1";

const defaultData: UserData = {
  root: { props: { title: "", slot: [] } },
  content: [],
  zones: { [dzZoneCompound]: [] },
};

const defaultUi: UiState = _defaultAppState.ui;

const defaultIndexes: PrivateAppState<UserData>["indexes"] = {
  nodes: {},
  zones: {
    "root:slot": { contentIds: [], type: "slot" },
    [dzZoneCompound]: { contentIds: [], type: "dropzone" },
  },
};

const defaultState = {
  data: defaultData,
  ui: defaultUi,
  indexes: defaultIndexes,
};

const appStore = createAppStore();

describe("walk-app-state", () => {
  const config: UserConfig = {
    root: {
      fields: { title: { type: "text" }, slot: { type: "slot" } },
    },
    components: {
      Comp: {
        fields: {
          prop: { type: "text" },
          slotA: { type: "slot" },
          slotB: { type: "slot" },
          array: { type: "array", arrayFields: { slot: { type: "slot" } } },
          object: { type: "object", objectFields: { slot: { type: "slot" } } },
        },
        defaultProps: {
          prop: "example",
          slotA: [],
          slotB: [],
          array: [],
          object: { slot: [] },
        },
        render: () => <div />,
      },
    },
  };

  const expectIndexed = (
    state: PrivateAppState,
    item: ComponentData | undefined,
    path: string[],
    index: number
  ) => {
    if (!item) return;

    const zoneCompound = path[path.length - 1];

    expect(state.indexes.zones[zoneCompound]?.contentIds[index]).toEqual(
      item.props.id
    );
    expect(state.indexes.nodes[item.props.id].data).toEqual(item);
    expect(state.indexes.nodes[item.props.id].flatData).toEqual(
      flattenNode(item, config)
    );
    expect(state.indexes.nodes[item.props.id].path).toEqual(path);
  };

  beforeEach(() => {
    appStore.setState(
      {
        ...appStore.getInitialState(),
        config,
      },
      true
    );
  });

  it("should generate the correct index for a given payload", () => {
    const state: PrivateAppState = walkAppState(
      {
        ...defaultState,
        data: {
          ...defaultData,
          content: [
            {
              type: "Comp",
              props: { id: "my-component", prop: "Data" },
            },
          ],
          zones: {
            "my-component:zone": [
              {
                type: "Comp",
                props: { id: "other-component", prop: "More example data" },
              },
            ],
            "other-component:zone": [
              {
                type: "Comp",
                props: {
                  id: "another-id",
                  prop: "Even more example data",
                  slotA: [
                    {
                      type: "Comp",
                      props: { id: "slotted-a-id", prop: "Inside a slot" },
                    },
                  ],
                  slotB: [
                    {
                      type: "Comp",
                      props: { id: "slotted-b-id", prop: "Inside a slot" },
                    },
                  ],
                  array: [
                    {
                      slot: [
                        {
                          type: "Comp",
                          props: {
                            id: "array-slotted-a-id",
                            prop: "Inside a slot, inside an array",
                          },
                        },
                      ],
                    },
                  ],
                  object: {
                    slot: [
                      {
                        type: "Comp",
                        props: {
                          id: "object-slotted-a-id",
                          prop: "Inside a slot, inside an object",
                        },
                      },
                    ],
                  },
                },
              },
            ],
          },
        },
      },
      config
    );

    expectIndexed(state, state.data.content[0], [rootDroppableId], 0);

    expectIndexed(
      state,
      state.data.zones?.["my-component:zone"][0],
      [rootDroppableId, "my-component:zone"],
      0
    );

    expectIndexed(
      state,
      state.data.zones?.["other-component:zone"][0],
      [rootDroppableId, "my-component:zone", "other-component:zone"],
      0
    );

    expectIndexed(
      state,
      state.data.zones?.["other-component:zone"][0].props.slotA[0],
      [
        rootDroppableId,
        "my-component:zone",
        "other-component:zone",
        "another-id:slotA",
      ],
      0
    );

    expectIndexed(
      state,
      state.data.zones?.["other-component:zone"][0].props.slotB[0],
      [
        rootDroppableId,
        "my-component:zone",
        "other-component:zone",
        "another-id:slotB",
      ],
      0
    );

    expectIndexed(
      state,
      state.data.zones?.["other-component:zone"][0].props.array[0].slot[0],
      [
        rootDroppableId,
        "my-component:zone",
        "other-component:zone",
        "another-id:array[0].slot",
      ],
      0
    );

    expectIndexed(
      state,
      state.data.zones?.["other-component:zone"][0].props.object.slot[0],
      [
        rootDroppableId,
        "my-component:zone",
        "other-component:zone",
        "another-id:object.slot",
      ],
      0
    );

    expect(state.indexes).toMatchInlineSnapshot(`
      {
        "nodes": {
          "another-id": {
            "data": {
              "props": {
                "array": [
                  {
                    "slot": [
                      {
                        "props": {
                          "id": "array-slotted-a-id",
                          "prop": "Inside a slot, inside an array",
                          "slotA": [],
                          "slotB": [],
                        },
                        "type": "Comp",
                      },
                    ],
                  },
                ],
                "id": "another-id",
                "object": {
                  "slot": [
                    {
                      "props": {
                        "id": "object-slotted-a-id",
                        "prop": "Inside a slot, inside an object",
                        "slotA": [],
                        "slotB": [],
                      },
                      "type": "Comp",
                    },
                  ],
                },
                "prop": "Even more example data",
                "slotA": [
                  {
                    "props": {
                      "id": "slotted-a-id",
                      "prop": "Inside a slot",
                      "slotA": [],
                      "slotB": [],
                    },
                    "type": "Comp",
                  },
                ],
                "slotB": [
                  {
                    "props": {
                      "id": "slotted-b-id",
                      "prop": "Inside a slot",
                      "slotA": [],
                      "slotB": [],
                    },
                    "type": "Comp",
                  },
                ],
              },
              "type": "Comp",
            },
            "flatData": {
              "props": {
                "array.0.slot": null,
                "id": "another-id",
                "object.slot": null,
                "prop": "Even more example data",
                "slotA": null,
                "slotB": null,
              },
              "type": "Comp",
            },
            "parentId": "other-component",
            "path": [
              "root:default-zone",
              "my-component:zone",
              "other-component:zone",
            ],
            "zone": "zone",
          },
          "array-slotted-a-id": {
            "data": {
              "props": {
                "id": "array-slotted-a-id",
                "prop": "Inside a slot, inside an array",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
            "flatData": {
              "props": {
                "id": "array-slotted-a-id",
                "prop": "Inside a slot, inside an array",
                "slotA": null,
                "slotB": null,
              },
              "type": "Comp",
            },
            "parentId": "another-id",
            "path": [
              "root:default-zone",
              "my-component:zone",
              "other-component:zone",
              "another-id:array[0].slot",
            ],
            "zone": "array[0].slot",
          },
          "my-component": {
            "data": {
              "props": {
                "id": "my-component",
                "prop": "Data",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
            "flatData": {
              "props": {
                "id": "my-component",
                "prop": "Data",
                "slotA": null,
                "slotB": null,
              },
              "type": "Comp",
            },
            "parentId": "root",
            "path": [
              "root:default-zone",
            ],
            "zone": "default-zone",
          },
          "object-slotted-a-id": {
            "data": {
              "props": {
                "id": "object-slotted-a-id",
                "prop": "Inside a slot, inside an object",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
            "flatData": {
              "props": {
                "id": "object-slotted-a-id",
                "prop": "Inside a slot, inside an object",
                "slotA": null,
                "slotB": null,
              },
              "type": "Comp",
            },
            "parentId": "another-id",
            "path": [
              "root:default-zone",
              "my-component:zone",
              "other-component:zone",
              "another-id:object.slot",
            ],
            "zone": "object.slot",
          },
          "other-component": {
            "data": {
              "props": {
                "id": "other-component",
                "prop": "More example data",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
            "flatData": {
              "props": {
                "id": "other-component",
                "prop": "More example data",
                "slotA": null,
                "slotB": null,
              },
              "type": "Comp",
            },
            "parentId": "my-component",
            "path": [
              "root:default-zone",
              "my-component:zone",
            ],
            "zone": "zone",
          },
          "root": {
            "data": {
              "props": {
                "id": "root",
                "slot": [],
                "title": "",
              },
              "type": "root",
            },
            "flatData": {
              "props": {
                "id": "root",
                "slot": null,
                "title": "",
              },
              "type": "root",
            },
            "parentId": null,
            "path": [],
            "zone": "",
          },
          "slotted-a-id": {
            "data": {
              "props": {
                "id": "slotted-a-id",
                "prop": "Inside a slot",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
            "flatData": {
              "props": {
                "id": "slotted-a-id",
                "prop": "Inside a slot",
                "slotA": null,
                "slotB": null,
              },
              "type": "Comp",
            },
            "parentId": "another-id",
            "path": [
              "root:default-zone",
              "my-component:zone",
              "other-component:zone",
              "another-id:slotA",
            ],
            "zone": "slotA",
          },
          "slotted-b-id": {
            "data": {
              "props": {
                "id": "slotted-b-id",
                "prop": "Inside a slot",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
            "flatData": {
              "props": {
                "id": "slotted-b-id",
                "prop": "Inside a slot",
                "slotA": null,
                "slotB": null,
              },
              "type": "Comp",
            },
            "parentId": "another-id",
            "path": [
              "root:default-zone",
              "my-component:zone",
              "other-component:zone",
              "another-id:slotB",
            ],
            "zone": "slotB",
          },
        },
        "zones": {
          "another-id:array[0].slot": {
            "contentIds": [
              "array-slotted-a-id",
            ],
            "type": "slot",
          },
          "another-id:object.slot": {
            "contentIds": [
              "object-slotted-a-id",
            ],
            "type": "slot",
          },
          "another-id:slotA": {
            "contentIds": [
              "slotted-a-id",
            ],
            "type": "slot",
          },
          "another-id:slotB": {
            "contentIds": [
              "slotted-b-id",
            ],
            "type": "slot",
          },
          "array-slotted-a-id:slotA": {
            "contentIds": [],
            "type": "slot",
          },
          "array-slotted-a-id:slotB": {
            "contentIds": [],
            "type": "slot",
          },
          "my-component:slotA": {
            "contentIds": [],
            "type": "slot",
          },
          "my-component:slotB": {
            "contentIds": [],
            "type": "slot",
          },
          "my-component:zone": {
            "contentIds": [
              "other-component",
            ],
            "type": "dropzone",
          },
          "my-component:zone1": {
            "contentIds": [],
            "type": "dropzone",
          },
          "object-slotted-a-id:slotA": {
            "contentIds": [],
            "type": "slot",
          },
          "object-slotted-a-id:slotB": {
            "contentIds": [],
            "type": "slot",
          },
          "other-component:slotA": {
            "contentIds": [],
            "type": "slot",
          },
          "other-component:slotB": {
            "contentIds": [],
            "type": "slot",
          },
          "other-component:zone": {
            "contentIds": [
              "another-id",
            ],
            "type": "dropzone",
          },
          "root:default-zone": {
            "contentIds": [
              "my-component",
            ],
            "type": "root",
          },
          "root:slot": {
            "contentIds": [],
            "type": "slot",
          },
          "slotted-a-id:slotA": {
            "contentIds": [],
            "type": "slot",
          },
          "slotted-a-id:slotB": {
            "contentIds": [],
            "type": "slot",
          },
          "slotted-b-id:slotA": {
            "contentIds": [],
            "type": "slot",
          },
          "slotted-b-id:slotB": {
            "contentIds": [],
            "type": "slot",
          },
        },
      }
    `);
  });

  it("should default values for any undefined slots", () => {
    const state: PrivateAppState = walkAppState(
      {
        ...defaultState,
        data: {
          ...defaultData,
          content: [
            {
              type: "Comp",
              props: {
                id: "another-id",
                prop: "Even more example data",
              },
            },
          ],
          zones: {},
        },
      },
      config
    );

    expect(state.indexes).toMatchInlineSnapshot(`
      {
        "nodes": {
          "another-id": {
            "data": {
              "props": {
                "id": "another-id",
                "prop": "Even more example data",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
            "flatData": {
              "props": {
                "id": "another-id",
                "prop": "Even more example data",
                "slotA": null,
                "slotB": null,
              },
              "type": "Comp",
            },
            "parentId": "root",
            "path": [
              "root:default-zone",
            ],
            "zone": "default-zone",
          },
          "root": {
            "data": {
              "props": {
                "id": "root",
                "slot": [],
                "title": "",
              },
              "type": "root",
            },
            "flatData": {
              "props": {
                "id": "root",
                "slot": null,
                "title": "",
              },
              "type": "root",
            },
            "parentId": null,
            "path": [],
            "zone": "",
          },
        },
        "zones": {
          "another-id:slotA": {
            "contentIds": [],
            "type": "slot",
          },
          "another-id:slotB": {
            "contentIds": [],
            "type": "slot",
          },
          "my-component:zone1": {
            "contentIds": [],
            "type": "dropzone",
          },
          "root:default-zone": {
            "contentIds": [
              "another-id",
            ],
            "type": "root",
          },
          "root:slot": {
            "contentIds": [],
            "type": "slot",
          },
        },
      }
    `);
  });
});



================================================
FILE: packages/core/lib/data/__tests__/walk-tree.spec.tsx
================================================
import { Config, Data, Slot } from "../../../types";

import { defaultAppState as _defaultAppState } from "../../../store";

import { walkTree } from "../walk-tree";

type Props = {
  Comp: {
    prop: string;
    slotA?: Slot;
    slotB?: Slot;
  };
};

type RootProps = {
  title: string;
  slot: Slot;
};

type UserConfig = Config<Props, RootProps>;
type UserData = Data<Props, RootProps>;

const testData: UserData = {
  root: { props: { title: "", slot: [] } },
  content: [
    {
      type: "Comp",
      props: { id: "my-component", prop: "Data", slotA: [], slotB: [] },
    },
  ],
  zones: {
    "my-component:zone": [
      {
        type: "Comp",
        props: {
          id: "other-component",
          prop: "More example data",
          slotA: [],
          slotB: [],
        },
      },
    ],
    "other-component:zone": [
      {
        type: "Comp",
        props: {
          id: "another-id",
          prop: "Even more example data",
          slotA: [
            {
              type: "Comp",
              props: {
                id: "slotted-a-id",
                prop: "Inside a slot",
                slotA: [],
                slotB: [],
              },
            },
          ],
          slotB: [
            {
              type: "Comp",
              props: {
                id: "slotted-b-id",
                prop: "Inside a slot",
                slotA: [],
                slotB: [],
              },
            },
          ],
        },
      },
    ],
  },
};

describe("walk-tree", () => {
  const config: UserConfig = {
    root: {
      fields: { title: { type: "text" }, slot: { type: "slot" } },
    },
    components: {
      Comp: {
        fields: {
          prop: { type: "text" },
          slotA: { type: "slot" },
          slotB: { type: "slot" },
        },
        defaultProps: { prop: "example", slotA: [], slotB: [] },
        render: () => <div />,
      },
    },
  };

  it("should trigger a function for each slot for a given Data", () => {
    const mockMap = jest.fn();

    const data = walkTree(testData, config, mockMap);

    expect(data).toEqual(testData);

    expect(mockMap).toHaveBeenCalledWith([], {
      parentId: "root",
      propName: "slot",
    });

    expect(mockMap).toHaveBeenCalledWith(
      [
        {
          props: {
            id: "slotted-a-id",
            prop: "Inside a slot",
            slotA: [],
            slotB: [],
          },
          type: "Comp",
        },
      ],
      { parentId: "another-id", propName: "slotA" }
    );

    expect(mockMap).toHaveBeenCalledWith(
      [
        {
          props: {
            id: "slotted-b-id",
            prop: "Inside a slot",
            slotA: [],
            slotB: [],
          },
          type: "Comp",
        },
      ],
      { parentId: "another-id", propName: "slotB" }
    );
  });

  it("should trigger a function for each slot for a given ComponentData", () => {
    const mockMap = jest.fn();

    const zones = testData.zones ?? {};
    const item = zones["other-component:zone"][0];

    const data = walkTree(item, config, mockMap);

    expect(data).toEqual(item);

    expect(mockMap).toHaveBeenCalledWith(
      [
        {
          props: {
            id: "slotted-a-id",
            prop: "Inside a slot",
            slotA: [],
            slotB: [],
          },
          type: "Comp",
        },
      ],
      { parentId: "another-id", propName: "slotA" }
    );

    expect(mockMap).toHaveBeenCalledWith(
      [
        {
          props: {
            id: "slotted-b-id",
            prop: "Inside a slot",
            slotA: [],
            slotB: [],
          },
          type: "Comp",
        },
      ],
      { parentId: "another-id", propName: "slotB" }
    );
  });

  it("should map each item for each slot for a given Data", () => {
    const data = walkTree(testData, config, (content) =>
      content.map((item) => ({
        ...item,
        props: { ...item.props, example: "Hello, world" },
      }))
    );

    expect(data).toMatchInlineSnapshot(`
      {
        "content": [
          {
            "props": {
              "example": "Hello, world",
              "id": "my-component",
              "prop": "Data",
              "slotA": [],
              "slotB": [],
            },
            "type": "Comp",
          },
        ],
        "root": {
          "props": {
            "slot": [],
            "title": "",
          },
        },
        "zones": {
          "my-component:zone": [
            {
              "props": {
                "id": "other-component",
                "prop": "More example data",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
          ],
          "other-component:zone": [
            {
              "props": {
                "id": "another-id",
                "prop": "Even more example data",
                "slotA": [
                  {
                    "props": {
                      "example": "Hello, world",
                      "id": "slotted-a-id",
                      "prop": "Inside a slot",
                      "slotA": [],
                      "slotB": [],
                    },
                    "type": "Comp",
                  },
                ],
                "slotB": [
                  {
                    "props": {
                      "example": "Hello, world",
                      "id": "slotted-b-id",
                      "prop": "Inside a slot",
                      "slotA": [],
                      "slotB": [],
                    },
                    "type": "Comp",
                  },
                ],
              },
              "type": "Comp",
            },
          ],
        },
      }
    `);
  });

  it("should map each item for each slot for a given ComponentData", () => {
    const zones = testData.zones ?? {};
    const item = zones["other-component:zone"][0];

    const data = walkTree(item, config, (content) =>
      content.map((item) => ({
        ...item,
        props: { ...item.props, example: "Hello, world" },
      }))
    );

    expect(data).toMatchInlineSnapshot(`
      {
        "props": {
          "id": "another-id",
          "prop": "Even more example data",
          "slotA": [
            {
              "props": {
                "example": "Hello, world",
                "id": "slotted-a-id",
                "prop": "Inside a slot",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
          ],
          "slotB": [
            {
              "props": {
                "example": "Hello, world",
                "id": "slotted-b-id",
                "prop": "Inside a slot",
                "slotA": [],
                "slotB": [],
              },
              "type": "Comp",
            },
          ],
        },
        "type": "Comp",
      }
    `);
  });
});



================================================
FILE: packages/core/lib/dnd/NestedDroppablePlugin.ts
================================================
import { DragDropManager } from "@dnd-kit/dom";
import { Plugin } from "@dnd-kit/abstract";

import type { Droppable } from "@dnd-kit/dom";

import { effects, untracked } from "@dnd-kit/state";
import { throttle } from "../throttle";
import { ComponentDndData } from "../../components/DraggableComponent";
import { DropZoneDndData } from "../../components/DropZone";
import { getFrame } from "../get-frame";
import { GlobalPosition } from "../global-position";
import {
  BubbledPointerEvent,
  BubbledPointerEventType,
} from "../bubble-pointer-event";
import { rootAreaId, rootDroppableId } from "../root-droppable-id";

type NestedDroppablePluginOptions = {
  onChange: (
    params: {
      area: string | null;
      zone: string | null;
    },
    manager: DragDropManager
  ) => void;
};

const depthSort = (candidates: Droppable[]) => {
  return candidates.sort((a, b) => {
    const aData = a.data as ComponentDndData | DropZoneDndData;
    const bData = b.data as ComponentDndData | DropZoneDndData;

    // Use depth instead of ref, as this is 1) faster and 2) handles cases where a and b share a ref
    if (aData.depth > bData.depth) {
      return 1;
    }

    if (bData.depth > aData.depth) {
      return -1;
    }

    return 0;
  });
};

const getZoneId = (candidate: Droppable | undefined) => {
  let id: string | null = candidate?.id as string;

  if (!candidate) return null;

  if (candidate.type === "component") {
    const data = candidate.data as ComponentDndData;

    if (data.containsActiveZone) {
      id = null;
    } else {
      id = data.zone;
    }
  } else if (candidate.type === "void") {
    return "void";
  }

  return id;
};

const BUFFER = 6;

const getPointerCollisions = (
  position: GlobalPosition,
  manager: DragDropManager
) => {
  const candidates: Droppable[] = [];

  let elements = position.target.ownerDocument.elementsFromPoint(
    position.x,
    position.y
  );

  const previewFrame = elements.find((el) =>
    el.getAttribute("data-puck-preview")
  );

  // Restrict to drawer element if pointer is over drawer. This is necessary if
  // the drawer is over dnd elements.
  const drawer = elements.find((el) => el.getAttribute("data-puck-drawer"));
  if (drawer) {
    elements = [drawer];
  }

  // If cursor is over iframe (but not drawer), and user is in host doc, go into the iframe doc
  // This occurs when dragging in new items
  if (previewFrame) {
    // Perf: Consider moving this outside of this plugin
    const frame = getFrame();

    if (frame) {
      elements = frame.elementsFromPoint(position.frame.x, position.frame.y);
    }
  }

  if (elements) {
    for (let i = 0; i < elements.length; i++) {
      const element = elements[i];

      const dropzoneId = element.getAttribute("data-puck-dropzone");
      const id = element.getAttribute("data-puck-dnd");
      const isVoid = element.hasAttribute("data-puck-dnd-void");

      // Only include this candidate if we're within a threshold of the bounding box
      if (BUFFER && (dropzoneId || id) && !isVoid) {
        const box = element.getBoundingClientRect();

        const contractedBox = {
          left: box.left + BUFFER,
          right: box.right - BUFFER,
          top: box.top + BUFFER,
          bottom: box.bottom - BUFFER,
        };

        if (
          position.frame.x < contractedBox.left ||
          position.frame.x > contractedBox.right ||
          position.frame.y > contractedBox.bottom ||
          position.frame.y < contractedBox.top
        ) {
          continue;
        }
      }

      if (dropzoneId) {
        const droppable = manager.registry.droppables.get(dropzoneId);

        if (droppable) {
          candidates.push(droppable);
        }
      }

      if (id) {
        const droppable = manager.registry.droppables.get(id);

        if (droppable) {
          candidates.push(droppable);
        }
      }
    }
  }

  return candidates;
};

export const findDeepestCandidate = (
  position: GlobalPosition,
  manager: DragDropManager
) => {
  const candidates = getPointerCollisions(position, manager);

  if (candidates.length > 0) {
    const sortedCandidates = depthSort(candidates);

    const draggable = manager.dragOperation.source;

    const draggedCandidateIndex = sortedCandidates.findIndex(
      (candidate) => candidate.id === draggable?.id
    );

    const draggedCandidateId = draggable?.id;

    let filteredCandidates = [...sortedCandidates];

    if (draggedCandidateId && draggedCandidateIndex > -1) {
      // Removed dragged candidate
      filteredCandidates.splice(draggedCandidateIndex, 1);
    }

    // Remove any descendants
    filteredCandidates = filteredCandidates.filter((candidate) => {
      const candidateData = candidate.data as
        | ComponentDndData
        | DropZoneDndData;

      if (draggedCandidateId && draggedCandidateIndex > -1) {
        if (candidateData.path.indexOf(draggedCandidateId) > -1) {
          return false;
        }
      }

      if (candidate.type === "dropzone") {
        const candidateData = candidate.data as DropZoneDndData;

        // Remove non-droppable zones
        if (!candidateData.isDroppableTarget) {
          return false;
        }

        // Remove if dragged item is area
        if (candidateData.areaId === draggedCandidateId) {
          return false;
        }
      } else if (candidate.type === "component") {
        const candidateData = candidate.data as ComponentDndData;

        // Remove non-droppable zones
        if (!candidateData.inDroppableZone) {
          return false;
        }
      }

      return true;
    });

    filteredCandidates.reverse();

    const primaryCandidate = filteredCandidates[0];
    const primaryCandidateData = primaryCandidate.data as
      | ComponentDndData
      | DropZoneDndData;
    const primaryCandidateIsComponent =
      "containsActiveZone" in primaryCandidateData;
    const zone = getZoneId(primaryCandidate);
    const area =
      primaryCandidateIsComponent && primaryCandidateData.containsActiveZone
        ? filteredCandidates[0].id
        : filteredCandidates[0]?.data.areaId;

    return { zone, area };
  }

  return {
    zone: rootDroppableId,
    area: rootAreaId,
  };
};

export const createNestedDroppablePlugin = (
  { onChange }: NestedDroppablePluginOptions,
  id: string
): any =>
  class NestedDroppablePlugin extends Plugin<DragDropManager, {}> {
    constructor(manager: DragDropManager, options?: {}) {
      super(manager);

      if (typeof window === "undefined") {
        return;
      }

      this.registerEffect(() => {
        const handleMove = (event: BubbledPointerEventType | PointerEvent) => {
          const target = (
            event instanceof BubbledPointerEvent // Necessary for Firefox
              ? event.originalTarget || event.target
              : event.target
          ) as HTMLElement;

          const position = new GlobalPosition(target, {
            x: event.clientX,
            y: event.clientY,
          });

          const elements = document.elementsFromPoint(
            position.global.x,
            position.global.y
          );

          const overEl = elements.some((el) => el.id === id);

          if (overEl) {
            onChange(findDeepestCandidate(position, manager), manager);
          }
        };

        const handleMoveThrottled = throttle(handleMove, 50);

        const handlePointerMove = (event: PointerEvent) => {
          handleMoveThrottled(event);
        };

        document.body.addEventListener("pointermove", handlePointerMove, {
          capture: true, // dndkit's PointerSensor prevents propagation during drag
        });

        const cleanup = () => {
          document.body.removeEventListener("pointermove", handlePointerMove, {
            capture: true,
          });
        };

        return cleanup;
      });
    }
  };



================================================
FILE: packages/core/lib/dnd/use-on-drag-finished.ts
================================================
import { useCallback } from "react";
import { useAppStoreApi } from "../../store";

export const useOnDragFinished = (
  cb: (finished: boolean) => void,
  deps: any[] = []
) => {
  const appStore = useAppStoreApi();

  return useCallback(() => {
    let dispose: () => void = () => {};

    const processDragging = (isDragging: boolean) => {
      if (isDragging) {
        cb(false);
      } else {
        setTimeout(() => {
          cb(true);
        }, 0); // Run outside of React thread, as otherwise state can still race callback and cause unexpected renders

        if (dispose) dispose();
      }
    };

    const isDragging = appStore.getState().state.ui.isDragging;

    processDragging(isDragging);

    if (isDragging) {
      dispose = appStore.subscribe(
        (s) => s.state.ui.isDragging,
        (isDragging) => {
          processDragging(isDragging);
        }
      );
    }

    return dispose;
  }, [appStore, ...deps]);
};



================================================
FILE: packages/core/lib/dnd/use-rendered-callback.ts
================================================
import { useDragDropManager } from "@dnd-kit/react";
import { DependencyList, useCallback } from "react";

/**
 * Returns a callback that only triggers when dnd-kit has finished
 * rendering. This is useful when working with state managers
 * that operate outside of the React lifecycle, like Zustand, as
 * dnd-kit cannot defer the rendering until it's finished.
 *
 * This may change in a future release
 *
 * @param callback
 * @param deps
 * @returns
 */
export function useRenderedCallback<T extends Function>(
  callback: T,
  deps: DependencyList
) {
  const manager = useDragDropManager();

  return useCallback(
    async (...args: any) => {
      await manager?.renderer.rendering;

      return callback(...args);
    },
    [...deps, manager]
  );
}



================================================
FILE: packages/core/lib/dnd/use-sensors.ts
================================================
import { useState } from "react";
import { PointerSensor } from "@dnd-kit/react";
import { isElement } from "@dnd-kit/dom/utilities";
import { type Distance } from "@dnd-kit/geometry";

export interface DelayConstraint {
  value: number;
  tolerance: Distance;
}

export interface DistanceConstraint {
  value: Distance;
  tolerance?: Distance;
}

export interface ActivationConstraints {
  distance?: DistanceConstraint;
  delay?: DelayConstraint;
}

const touchDefault = { delay: { value: 200, tolerance: 10 } };
const otherDefault = {
  delay: { value: 200, tolerance: 10 },
  distance: { value: 5 },
};

export const useSensors = (
  {
    other = otherDefault,
    mouse,
    touch = touchDefault,
  }: {
    mouse?: ActivationConstraints;
    touch?: ActivationConstraints;
    other?: ActivationConstraints;
  } = {
    touch: touchDefault,
    other: otherDefault,
  }
) => {
  const [sensors] = useState(() => [
    PointerSensor.configure({
      activationConstraints(event, source) {
        const { pointerType, target } = event;

        if (
          pointerType === "mouse" &&
          isElement(target) &&
          (source.handle === target || source.handle?.contains(target))
        ) {
          return mouse;
        }

        if (pointerType === "touch") {
          return touch;
        }

        return other;
      },
    }),
  ]);

  return sensors;
};



================================================
FILE: packages/core/lib/dnd/collision/collision-debug.ts
================================================
import { Point } from "@dnd-kit/geometry";

const DEBUG = false;

const debugElements: Record<
  string,
  { svg: SVGSVGElement; line: SVGLineElement; text: SVGTextElement }
> = {};

let timeout: NodeJS.Timeout;

export const collisionDebug = (
  a: Point,
  b: Point,
  id: string,
  color: string,
  label?: string | null
) => {
  if (!DEBUG) return;

  const debugId = `${id}-debug`;

  clearTimeout(timeout);

  timeout = setTimeout(() => {
    Object.entries(debugElements).forEach(([id, { svg }]) => {
      svg.remove();

      delete debugElements[id];
    });
  }, 1000);

  requestAnimationFrame(() => {
    const existingEl = debugElements[debugId];

    let line = debugElements[debugId]?.line;
    let text = debugElements[debugId]?.text;

    if (!existingEl) {
      const svgNs = "http://www.w3.org/2000/svg";
      const svg = document.createElementNS(svgNs, "svg");
      line = document.createElementNS(svgNs, "line");
      text = document.createElementNS(svgNs, "text");

      // svg.setAttribute("xmlns", "http://www.w3.org/2000/svg");
      svg.setAttribute("id", debugId);
      svg.setAttribute(
        "style",
        "position: fixed; height: 100%; width: 100%; pointer-events: none; top: 0px; left: 0px;"
      );
      svg.appendChild(line);
      svg.appendChild(text);

      text.setAttribute("fill", `black`);

      document.body.appendChild(svg);

      debugElements[debugId] = { svg, line, text };
    }

    line.setAttribute("x1", a.x.toString());
    line.setAttribute("x2", b.x.toString());
    line.setAttribute("y1", a.y.toString());
    line.setAttribute("y2", b.y.toString());
    line.setAttribute("style", `stroke:${color};stroke-width:2`);

    text.setAttribute("x", (a.x - (a.x - b.x) / 2).toString());
    text.setAttribute("y", (a.y - (a.y - b.y) / 2).toString());

    if (label) {
      text.innerHTML = label;
    }
  });
};



================================================
FILE: packages/core/lib/dnd/collision/directional/index.ts
================================================
import { CollisionType, DragOperation, Droppable } from "@dnd-kit/abstract";
import { Point } from "@dnd-kit/geometry";
import { collisionDebug } from "../collision-debug";

let distanceChange: "increasing" | "decreasing" = "increasing";

/**
 * Collide if we're moving towards an item.
 */
export const directionalCollision = (
  input: { dragOperation: DragOperation; droppable: Droppable },
  previous: Point
) => {
  const { dragOperation, droppable } = input;
  const { shape: dropShape } = droppable;
  const { position } = dragOperation;
  const dragShape = dragOperation.shape?.current;

  if (!dragShape || !dropShape) return null;

  const dropCenter = dropShape.center;

  const distanceToPrevious = Math.sqrt(
    Math.pow(dropCenter.x - previous.x, 2) +
      Math.pow(dropCenter.y - previous.y, 2)
  );

  const distanceToCurrent = Math.sqrt(
    Math.pow(dropCenter.x - position.current.x, 2) +
      Math.pow(dropCenter.y - position.current.y, 2)
  );

  distanceChange =
    distanceToCurrent === distanceToPrevious
      ? distanceChange
      : distanceToCurrent < distanceToPrevious
      ? "decreasing"
      : "increasing";

  collisionDebug(
    dragShape.center,
    dropCenter,
    droppable.id.toString(),
    "rebeccapurple"
  );

  if (distanceChange === "decreasing") {
    return {
      id: droppable.id,
      value: 1,
      type: CollisionType.Collision,
    };
  }

  return null;
};



================================================
FILE: packages/core/lib/dnd/collision/dynamic/get-direction.ts
================================================
import { Point } from "@dnd-kit/geometry";
import { DragAxis, Direction } from "../../../../types";

export const getDirection = (dragAxis: DragAxis, delta: Point): Direction => {
  if (dragAxis === "dynamic") {
    if (Math.abs(delta.y) > Math.abs(delta.x)) {
      return delta.y === 0 ? null : delta.y > 0 ? "down" : "up";
    } else {
      return delta.x === 0 ? null : delta.x > 0 ? "right" : "left";
    }
  } else if (dragAxis === "x") {
    return delta.x === 0 ? null : delta.x > 0 ? "right" : "left";
  }

  return delta.y === 0 ? null : delta.y > 0 ? "down" : "up";
};



================================================
FILE: packages/core/lib/dnd/collision/dynamic/get-midpoint-impact.ts
================================================
import { Shape } from "@dnd-kit/geometry";
import { Direction } from "../../../../types";

/**
 * Determine whether or not the leading edge of the dragShape (the edge that is on
 * the side of the direction of travel) is over the midpoint of the dropShape.
 *
 * @param dragShape The shape of the draggable
 * @param dropShape The shape of the droppable
 * @param direction The direction of travel
 * @param offsetMultiplier An optional offset multiplier
 *
 * @returns A boolean describingw hether or not the leadingEdge of the dragShape is over the mid-point of the dropShape
 */
export const getMidpointImpact = (
  dragShape: Shape,
  dropShape: Shape,
  direction: Direction,
  offsetMultiplier: number = 0
): Boolean => {
  const dragRect = dragShape.boundingRectangle;
  const dropCenter = dropShape.center;

  if (direction === "down") {
    const offset = offsetMultiplier * dropShape.boundingRectangle.height;
    return dragRect.bottom >= dropCenter.y + offset;
  } else if (direction === "up") {
    const offset = offsetMultiplier * dropShape.boundingRectangle.height;
    return dragRect.top < dropCenter.y - offset;
  } else if (direction === "left") {
    const offset = offsetMultiplier * dropShape.boundingRectangle.width;
    return dropCenter.x - offset >= dragRect.left;
  }

  // direction === "right"
  const offset = offsetMultiplier * dropShape.boundingRectangle.width;
  return dragRect.right - offset >= dropCenter.x;
};



================================================
FILE: packages/core/lib/dnd/collision/dynamic/index.ts
================================================
import {
  Collision,
  CollisionDetector,
  CollisionPriority,
  CollisionType,
  UniqueIdentifier,
} from "@dnd-kit/abstract";
import { directionalCollision } from "../directional";
import { getDirection } from "./get-direction";
import { getMidpointImpact } from "./get-midpoint-impact";
import { trackMovementInterval } from "./track-movement-interval";
import { collisionDebug } from "../collision-debug";
import { closestCorners } from "@dnd-kit/collision";
import { DragAxis, Direction } from "../../../../types";
import { collisionStore } from "./store";

let flushNext: UniqueIdentifier = "";

/**
 * A factory for creating a "dynamic" collision detector
 *
 * A dynamic collision combines mid-point and directional collisions for smooth, flicker-free dragging with complex
 * layouts.
 *
 * Midpoint-based detection creates a natural snapping effect, inspired by react-beautiful-dnd. Each collision is
 * provided with the direction of movement, so the user can determine the appropriate place to inject the item based
 * on their layout or document direction.
 *
 * If a draggable is being dragged towards a droppable with the same ID, this is deemed the highest priority collision
 * to prevent flickering with complex layout shifts during drag.
 *
 * @param dragAxis Restrict mid-point detection to a given axis, providing a traditional sortable list detection.
 * @param midpointOffset A percentage offset from the midpoint. Defaults to 5% (0.05) from the mid-point in the
 * direction of travel, helping to create "dead zone" in the center of the item.
 *
 * @returns
 */
export const createDynamicCollisionDetector = (
  dragAxis: DragAxis,
  midpointOffset: number = 0.05
) =>
  ((input) => {
    const { dragOperation, droppable } = input;

    const { position } = dragOperation;
    const dragShape = dragOperation.shape?.current;
    const { shape: dropShape } = droppable;

    if (!dragShape || !dropShape) {
      return null;
    }

    const { center: dragCenter } = dragShape;

    const { fallbackEnabled } = collisionStore.getState();

    const interval = trackMovementInterval(position.current, dragAxis);

    const data = {
      direction: interval.direction,
    };

    const { center: dropCenter } = dropShape;

    const overMidpoint = getMidpointImpact(
      dragShape,
      dropShape,
      interval.direction,
      midpointOffset
    );

    if (dragOperation.source?.id === droppable.id) {
      // If the droppable and draggable are the same item, we check if we're moving towards the droppable.
      // If we are, we always return that as the highest priority collision target to prevent unexpected
      // movement in complex grid layouts

      const collision = directionalCollision(input, interval.previous);

      collisionDebug(dragCenter, dropCenter, droppable.id.toString(), "yellow");

      if (collision) {
        return {
          ...collision,
          priority: CollisionPriority.Highest,
          data,
        };
      }
    }

    const intersectionArea = dragShape.intersectionArea(dropShape);
    const intersectionRatio = intersectionArea / dropShape.area;

    if (intersectionArea && overMidpoint) {
      collisionDebug(
        dragCenter,
        dropCenter,
        droppable.id.toString(),
        "green",
        interval.direction
      );

      const collision: Collision = {
        id: droppable.id,
        value: intersectionRatio,
        priority: CollisionPriority.High,
        type: CollisionType.Collision,
      };

      // HACK: Flush ID if it's already in use by temporarily setting the id to something invalid. This forces dnd-kit to trigger a new dragmove event.
      const shouldFlushId = flushNext === droppable.id;

      flushNext = "";

      return { ...collision, id: shouldFlushId ? "flush" : collision.id, data };
    }

    if (fallbackEnabled && dragOperation.source?.id !== droppable.id) {
      // Only calculate fallbacks when the draggable sits within the droppable's axis projection
      const xAxisIntersection =
        dropShape.boundingRectangle.right > dragShape.boundingRectangle.left &&
        dropShape.boundingRectangle.left < dragShape.boundingRectangle.right;

      const yAxisIntersection =
        dropShape.boundingRectangle.bottom > dragShape.boundingRectangle.top &&
        dropShape.boundingRectangle.top < dragShape.boundingRectangle.bottom;

      // If drag axis is Y, then lock to x-axis (vertical) intersect. Otherwise lock to y-axis (horizontal) intersect.
      if ((dragAxis === "y" && xAxisIntersection) || yAxisIntersection) {
        const fallbackCollision = closestCorners(input);

        if (fallbackCollision) {
          // For fallback collisions, we use a direction determined by the center points of the two items
          const direction = getDirection(dragAxis, {
            x: dragShape.center.x - (droppable.shape?.center.x || 0),
            y: dragShape.center.y - (droppable.shape?.center.y || 0),
          });

          data.direction = direction;

          // Fallback collision exists for an intersecting item
          // In this scenario, we trigger a "void" fallback transaction,
          // which is prioritised over other fallback transactions
          // Because dnd-kit won't trigger a dragmove event unless the
          // target ID changes, we introduce an ID "flushing" hack
          if (intersectionArea) {
            collisionDebug(
              dragCenter,
              dropCenter,
              droppable.id.toString(),
              "red",
              direction || ""
            );

            // HACK: We always flush the ID after this collision to ensure dnd-kit triggers onDragMove
            flushNext = droppable.id;

            return {
              ...fallbackCollision,
              priority: CollisionPriority.Low,
              data,
            };
          }

          collisionDebug(
            dragCenter,
            dropCenter,
            droppable.id.toString(),
            "orange",
            direction || ""
          );

          return {
            ...fallbackCollision,
            priority: CollisionPriority.Lowest,
            data,
          };
        }
      }
    }

    collisionDebug(dragCenter, dropCenter, droppable.id.toString(), "hotpink");

    return null;
  }) as CollisionDetector;



================================================
FILE: packages/core/lib/dnd/collision/dynamic/store.ts
================================================
import { createStore } from "zustand/vanilla";
import { Direction } from "../../../../types";

export const collisionStore = createStore<{
  fallbackEnabled: boolean;
}>(() => ({
  fallbackEnabled: false,
}));



================================================
FILE: packages/core/lib/dnd/collision/dynamic/track-movement-interval.ts
================================================
import { Point } from "@dnd-kit/geometry";
import { getDirection } from "./get-direction";
import { Direction, DragAxis } from "../../../../types";

type Interval = {
  current: Point;
  delta: Point;
  previous: Point;
  direction: Direction;
};

const INTERVAL_SENSITIVITY = 10;

const intervalCache: Interval = {
  current: { x: 0, y: 0 },
  delta: { x: 0, y: 0 },
  previous: { x: 0, y: 0 },
  direction: null,
};

/**
 * A method for tracking and getting the current movement interval, including:
 *
 * - `current` - the current point to track
 * - `previous` - the previous point, captured when the delta is greater than the INTERVAL_SENSITIVITY
 * - `delta` - the delta between the two points
 * - `direction` - the direction of travel of the delta, locked to an axis
 *
 * @param point The latest point to track.
 * @param dragAxis The axis to lock the direction to. If the value is "dynamic", it can be either axis based on the greater value.
 *
 * @returns Current movement interval
 */
export const trackMovementInterval = (
  point: Point,
  dragAxis: DragAxis = "dynamic"
) => {
  intervalCache.current = point;

  intervalCache.delta = {
    x: point.x - intervalCache.previous.x,
    y: point.y - intervalCache.previous.y,
  };

  intervalCache.direction =
    getDirection(dragAxis, intervalCache.delta) || intervalCache.direction;

  if (
    Math.abs(intervalCache.delta.x) > INTERVAL_SENSITIVITY ||
    Math.abs(intervalCache.delta.y) > INTERVAL_SENSITIVITY
  ) {
    intervalCache.previous = Point.from(point);
  }

  return intervalCache;
};



================================================
FILE: packages/core/reducer/actions.tsx
================================================
import { AppState, ComponentData, Data, RootData, UiState } from "../types";
import { PrivateAppState } from "../types/Internal";

export type InsertAction = {
  type: "insert";
  componentType: string;
  destinationIndex: number;
  destinationZone: string;
  id?: string;
};

export type DuplicateAction = {
  type: "duplicate";
  sourceIndex: number;
  sourceZone: string;
};

export type ReplaceAction<UserData extends Data = Data> = {
  type: "replace";
  destinationIndex: number;
  destinationZone: string;
  data: ComponentData;
  ui?: Partial<AppState<UserData>["ui"]>;
};

export type ReplaceRootAction<UserData extends Data = Data> = {
  type: "replaceRoot";
  root: RootData;
  ui?: Partial<AppState<UserData>["ui"]>;
};

export type ReorderAction = {
  type: "reorder";
  sourceIndex: number;
  destinationIndex: number;
  destinationZone: string;
};

export type MoveAction = {
  type: "move";
  sourceIndex: number;
  sourceZone: string;
  destinationIndex: number;
  destinationZone: string;
};

export type RemoveAction = {
  type: "remove";
  index: number;
  zone: string;
};

export type SetUiAction = {
  type: "setUi";
  ui: Partial<UiState> | ((previous: UiState) => Partial<UiState>);
};

export type SetDataAction = {
  type: "setData";
  data: Partial<Data> | ((previous: Data) => Partial<Data>);
};

export type SetAction<UserData extends Data = Data> = {
  type: "set";
  state:
    | Partial<PrivateAppState<UserData>>
    | ((
        previous: PrivateAppState<UserData>
      ) => Partial<PrivateAppState<UserData>>);
};

export type RegisterZoneAction = {
  type: "registerZone";
  zone: string;
};

export type UnregisterZoneAction = {
  type: "unregisterZone";
  zone: string;
};

export type PuckAction = { recordHistory?: boolean } & (
  | ReorderAction
  | InsertAction
  | MoveAction
  | ReplaceAction
  | ReplaceRootAction
  | RemoveAction
  | DuplicateAction
  | SetAction
  | SetDataAction
  | SetUiAction
  | RegisterZoneAction
  | UnregisterZoneAction
);



================================================
FILE: packages/core/reducer/index.ts
================================================
import { Reducer } from "react";
import { AppState, Data } from "../types";
import { PuckAction } from "./actions";
import type { OnAction } from "../types";
import { AppStore } from "../store";
import { PrivateAppState } from "../types/Internal";
import { setAction } from "./actions/set";
import { insertAction } from "./actions/insert";
import { replaceAction } from "./actions/replace";
import { replaceRootAction } from "./actions/replace-root";
import { duplicateAction } from "./actions/duplicate";
import { reorderAction } from "./actions/reorder";
import { moveAction } from "./actions/move";
import { removeAction } from "./actions/remove";
import {
  registerZoneAction,
  unregisterZoneAction,
} from "./actions/register-zone";
import { setDataAction } from "./actions/set-data";
import { setUiAction } from "./actions/set-ui";
import { makeStatePublic } from "../lib/data/make-state-public";

export * from "./actions";

export type ActionType = "insert" | "reorder";

export type StateReducer<UserData extends Data = Data> = Reducer<
  PrivateAppState<UserData>,
  PuckAction
>;

function storeInterceptor<UserData extends Data = Data>(
  reducer: StateReducer<UserData>,
  record?: (appState: AppState<UserData>) => void,
  onAction?: OnAction<UserData>
) {
  return (
    state: PrivateAppState<UserData>,
    action: PuckAction
  ): PrivateAppState<UserData> => {
    const newAppState = reducer(state, action);

    const isValidType = ![
      "registerZone",
      "unregisterZone",
      "setData",
      "setUi",
      "set",
    ].includes(action.type);

    if (
      typeof action.recordHistory !== "undefined"
        ? action.recordHistory
        : isValidType
    ) {
      if (record) record(newAppState);
    }

    onAction?.(action, makeStatePublic(newAppState), makeStatePublic(state));

    return newAppState;
  };
}

export function createReducer<UserData extends Data>({
  record,
  onAction,
  appStore,
}: {
  record?: (appState: AppState<UserData>) => void;
  onAction?: OnAction<UserData>;
  appStore: AppStore;
}): StateReducer<UserData> {
  return storeInterceptor(
    (state, action) => {
      if (action.type === "set") {
        return setAction(state, action, appStore) as PrivateAppState<UserData>;
      }

      if (action.type === "insert") {
        return insertAction(state, action, appStore);
      }

      if (action.type === "replace") {
        return replaceAction(state, action, appStore);
      }

      if (action.type === "replaceRoot") {
        return replaceRootAction(state, action, appStore);
      }

      if (action.type === "duplicate") {
        return duplicateAction(state, action, appStore);
      }

      if (action.type === "reorder") {
        return reorderAction(state, action, appStore);
      }

      if (action.type === "move") {
        return moveAction(state, action, appStore);
      }

      if (action.type === "remove") {
        return removeAction(state, action, appStore);
      }

      if (action.type === "registerZone") {
        return registerZoneAction(state, action);
      }

      if (action.type === "unregisterZone") {
        return unregisterZoneAction(state, action);
      }

      if (action.type === "setData") {
        return setDataAction(state, action, appStore);
      }

      if (action.type === "setUi") {
        return setUiAction(state, action);
      }

      return state;
    },
    record,
    onAction
  );
}



================================================
FILE: packages/core/reducer/actions/duplicate.ts
================================================
import { Data } from "../../types";
import { generateId } from "../../lib/generate-id";
import { DuplicateAction } from "../actions";
import { PrivateAppState } from "../../types/Internal";
import { walkAppState } from "../../lib/data/walk-app-state";
import { getIdsForParent } from "../../lib/data/get-ids-for-parent";
import { getItem } from "../../lib/data/get-item";
import { AppStore } from "../../store";
import { insert } from "../../lib/data/insert";

export function duplicateAction<UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: DuplicateAction,
  appStore: AppStore
): PrivateAppState<UserData> {
  const item = getItem(
    { index: action.sourceIndex, zone: action.sourceZone },
    state
  )!;

  const idsInPath = getIdsForParent(action.sourceZone, state);

  const newItem = {
    ...item,
    props: {
      ...item.props,
      id: generateId(item.type),
    },
  };

  const modified = walkAppState<UserData>(
    state,
    appStore.config,
    (content, zoneCompound) => {
      if (zoneCompound === action.sourceZone) {
        return insert(content, action.sourceIndex + 1, item);
      }

      return content;
    },
    (childItem, path, index) => {
      const zoneCompound = path[path.length - 1];

      const parents = path.map((p) => p.split(":")[0]);

      if (parents.indexOf(newItem.props.id) > -1) {
        return {
          ...childItem,
          props: {
            ...childItem.props,
            id: generateId(childItem.type),
          },
        };
      }

      if (
        zoneCompound === action.sourceZone &&
        index === action.sourceIndex + 1
      ) {
        return newItem;
      }

      const [sourceZoneParent] = action.sourceZone.split(":");

      if (
        sourceZoneParent === childItem.props.id ||
        idsInPath.indexOf(childItem.props.id) > -1
      ) {
        return childItem;
      }

      return null;
    }
  );

  return {
    ...modified,
    ui: {
      ...modified.ui,
      itemSelector: {
        index: action.sourceIndex + 1,
        zone: action.sourceZone,
      },
    },
  };
}



================================================
FILE: packages/core/reducer/actions/insert.ts
================================================
import { Data } from "../../types";
import { insert } from "../../lib/data/insert";
import { generateId } from "../../lib/generate-id";
import { InsertAction } from "../actions";
import { PrivateAppState } from "../../types/Internal";
import { walkAppState } from "../../lib/data/walk-app-state";
import { getIdsForParent } from "../../lib/data/get-ids-for-parent";
import { AppStore } from "../../store";
import { populateIds } from "../../lib/data/populate-ids";

export function insertAction<UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: InsertAction,
  appStore: AppStore
): PrivateAppState<UserData> {
  const id = action.id || generateId(action.componentType);
  const emptyComponentData = populateIds(
    {
      type: action.componentType,
      props: {
        ...(appStore.config.components[action.componentType].defaultProps ||
          {}),
        id,
      },
    },
    appStore.config
  );

  const [parentId] = action.destinationZone.split(":");
  const idsInPath = getIdsForParent(action.destinationZone, state);

  return walkAppState<UserData>(
    state,
    appStore.config,
    (content, zoneCompound) => {
      if (zoneCompound === action.destinationZone) {
        return insert(
          content || [],
          action.destinationIndex,
          emptyComponentData
        );
      }

      return content;
    },
    (childItem, path) => {
      if (childItem.props.id === id || childItem.props.id === parentId) {
        return childItem;
      } else if (idsInPath.includes(childItem.props.id)) {
        return childItem;
      } else if (path.includes(action.destinationZone)) {
        return childItem;
      }

      return null;
    }
  );
}



================================================
FILE: packages/core/reducer/actions/move.ts
================================================
import { Content, Data } from "../../types";
import { insert } from "../../lib/data/insert";
import { remove } from "../../lib/data/remove";
import { getItem } from "../../lib/data/get-item";
import { MoveAction } from "../actions";
import { AppStore } from "../../store";
import { PrivateAppState } from "../../types/Internal";
import { walkAppState } from "../../lib/data/walk-app-state";
import { getIdsForParent } from "../../lib/data/get-ids-for-parent";

// Restore unregistered zones when re-registering in same session
export const zoneCache: Record<string, Content> = {};

export const addToZoneCache = (key: string, data: Content) => {
  zoneCache[key] = data;
};

export const moveAction = <UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: MoveAction,
  appStore: AppStore
): PrivateAppState<UserData> => {
  if (
    action.sourceZone === action.destinationZone &&
    action.sourceIndex === action.destinationIndex
  ) {
    return state;
  }

  const item = getItem(
    { zone: action.sourceZone, index: action.sourceIndex },
    state
  );

  if (!item) return state;

  const idsInSourcePath = getIdsForParent(action.sourceZone, state);
  const idsInDestinationPath = getIdsForParent(action.destinationZone, state);

  return walkAppState<UserData>(
    state,
    appStore.config,
    (content, zoneCompound) => {
      if (
        zoneCompound === action.sourceZone &&
        zoneCompound === action.destinationZone
      ) {
        return insert(
          remove(content, action.sourceIndex),
          action.destinationIndex,
          item
        );
      } else if (zoneCompound === action.sourceZone) {
        return remove(content, action.sourceIndex);
      } else if (zoneCompound === action.destinationZone) {
        return insert(content, action.destinationIndex, item);
      }

      return content;
    },
    (childItem, path) => {
      const [sourceZoneParent] = action.sourceZone.split(":");
      const [destinationZoneParent] = action.destinationZone.split(":");

      const childId = childItem.props.id;

      if (
        sourceZoneParent === childId ||
        destinationZoneParent === childId ||
        item.props.id === childId ||
        idsInSourcePath.indexOf(childId) > -1 ||
        idsInDestinationPath.indexOf(childId) > -1 ||
        path.includes(action.destinationZone)
      ) {
        return childItem;
      }

      return null;
    }
  );
};



================================================
FILE: packages/core/reducer/actions/register-zone.ts
================================================
import { RegisterZoneAction, UnregisterZoneAction } from "..";
import { setupZone } from "../../lib/data/setup-zone";
import { Content, Data } from "../../types";
import { PrivateAppState } from "../../types/Internal";

// Restore unregistered zones when re-registering in same session
export const zoneCache: Record<string, Content> = {};

export const addToZoneCache = (key: string, data: Content) => {
  zoneCache[key] = data;
};

export function registerZoneAction<UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: RegisterZoneAction
): PrivateAppState<UserData> {
  if (zoneCache[action.zone]) {
    return {
      ...state,
      data: {
        ...state.data,
        zones: {
          ...state.data.zones,
          [action.zone]: zoneCache[action.zone],
        },
      },
      indexes: {
        ...state.indexes,
        zones: {
          ...state.indexes.zones,
          [action.zone]: {
            ...state.indexes.zones[action.zone],
            contentIds: zoneCache[action.zone].map((item) => item.props.id),
            type: "dropzone",
          },
        },
      },
    };
  }

  return { ...state, data: setupZone(state.data, action.zone) };
}

export function unregisterZoneAction<UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: UnregisterZoneAction
): PrivateAppState<UserData> {
  const _zones = { ...(state.data.zones || {}) };
  const zoneIndex = { ...(state.indexes.zones || {}) };

  if (_zones[action.zone]) {
    zoneCache[action.zone] = _zones[action.zone];

    delete _zones[action.zone];
  }

  delete zoneIndex[action.zone];

  return {
    ...state,
    data: {
      ...state.data,
      zones: _zones,
    },
    indexes: {
      ...state.indexes,
      zones: zoneIndex,
    },
  };
}



================================================
FILE: packages/core/reducer/actions/remove.ts
================================================
import { Data } from "../../types";
import { remove } from "../../lib/data/remove";
import { getItem } from "../../lib/data/get-item";
import { RemoveAction } from "../actions";
import { AppStore } from "../../store";
import { PrivateAppState } from "../../types/Internal";
import { walkAppState } from "../../lib/data/walk-app-state";

export const removeAction = <UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: RemoveAction,
  appStore: AppStore
) => {
  const item = getItem({ index: action.index, zone: action.zone }, state)!;

  // Gather related
  const nodesToDelete = Object.entries(state.indexes.nodes).reduce<string[]>(
    (acc, [nodeId, nodeData]) => {
      const pathIds = nodeData.path.map((p) => p.split(":")[0]);
      if (pathIds.includes(item.props.id)) {
        return [...acc, nodeId];
      }

      return acc;
    },
    [item.props.id]
  );

  const newState = walkAppState<UserData>(
    state,
    appStore.config,
    (content, zoneCompound) => {
      if (zoneCompound === action.zone) {
        return remove(content, action.index);
      }

      return content;
    }
  );

  Object.keys(newState.data.zones || {}).forEach((zoneCompound) => {
    const parentId = zoneCompound.split(":")[0];

    if (nodesToDelete.includes(parentId) && newState.data.zones) {
      delete newState.data.zones[zoneCompound];
    }
  });

  Object.keys(newState.indexes.zones).forEach((zoneCompound) => {
    const parentId = zoneCompound.split(":")[0];

    if (nodesToDelete.includes(parentId)) {
      delete newState.indexes.zones[zoneCompound];
    }
  });

  nodesToDelete.forEach((id) => {
    delete newState.indexes.nodes[id];
  });

  return newState;
};



================================================
FILE: packages/core/reducer/actions/reorder.ts
================================================
import { Data } from "../../types";
import { ReorderAction } from "../actions";
import { PrivateAppState } from "../../types/Internal";
import { moveAction } from "./move";
import { AppStore } from "../../store";

export const reorderAction = <UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: ReorderAction,
  appStore: AppStore
): PrivateAppState<UserData> => {
  return moveAction(
    state,
    {
      type: "move",
      sourceIndex: action.sourceIndex,
      sourceZone: action.destinationZone,
      destinationIndex: action.destinationIndex,
      destinationZone: action.destinationZone,
    },
    appStore
  );
};



================================================
FILE: packages/core/reducer/actions/replace-root.ts
================================================
import { Data } from "../../types";
import { ReplaceRootAction } from "../actions";
import { AppStore } from "../../store";
import { PrivateAppState } from "../../types/Internal";
import { walkAppState } from "../../lib/data/walk-app-state";

export const replaceRootAction = <UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: ReplaceRootAction<UserData>,
  appStore: AppStore
): PrivateAppState<UserData> => {
  return walkAppState<UserData>(
    state,
    appStore.config,
    (content) => content,
    (childItem) => {
      if (childItem.props.id === "root") {
        return {
          ...childItem,
          props: { ...childItem.props, ...action.root.props },
          readOnly: action.root.readOnly,
        };
      }

      // Everything in inside root, so everything needs re-indexing
      return childItem;
    }
  );
};



================================================
FILE: packages/core/reducer/actions/replace.ts
================================================
import { ComponentDataOptionalId, Data } from "../../types";
import { ReplaceAction } from "../actions";
import { AppStore } from "../../store";
import { PrivateAppState } from "../../types/Internal";
import { walkAppState } from "../../lib/data/walk-app-state";
import { getIdsForParent } from "../../lib/data/get-ids-for-parent";
import { walkTree } from "../../rsc";
import { generateId } from "../../lib/generate-id";

export const replaceAction = <UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: ReplaceAction<UserData>,
  appStore: AppStore
): PrivateAppState<UserData> => {
  const [parentId] = action.destinationZone.split(":");
  const idsInPath = getIdsForParent(action.destinationZone, state);

  const originalId =
    state.indexes.zones[action.destinationZone].contentIds[
      action.destinationIndex
    ];

  const idChanged = originalId !== action.data.props.id;

  if (idChanged) {
    throw new Error(
      'Can\'t change the id during a replace action. Please us "remove" and "insert" to define a new node.'
    );
  }

  const newSlotIds: string[] = [];

  // Populate ids and collect nested slot IDs
  // We use explicit function here so we don't need to walk tree twice
  const data = walkTree(action.data, appStore.config, (contents, opts) => {
    newSlotIds.push(`${opts.parentId}:${opts.propName}`);

    return contents.map((item: ComponentDataOptionalId) => {
      const id = generateId(item.type);

      return {
        ...item,
        props: { id, ...item.props },
      };
    });
  });

  const stateWithDeepSlotsRemoved = { ...state };

  Object.keys(state.indexes.zones).forEach((zoneCompound) => {
    const id = zoneCompound.split(":")[0];

    if (id === originalId) {
      if (!newSlotIds.includes(zoneCompound)) {
        delete stateWithDeepSlotsRemoved.indexes.zones[zoneCompound];
      }
    }
  });

  return walkAppState<UserData>(
    stateWithDeepSlotsRemoved,
    appStore.config,
    (content, zoneCompound) => {
      const newContent = [...content];

      if (zoneCompound === action.destinationZone) {
        newContent[action.destinationIndex] = data;
      }

      return newContent;
    },
    (childItem, path) => {
      const pathIds = path.map((p) => p.split(":")[0]);

      if (childItem.props.id === data.props.id) {
        return data;
      } else if (childItem.props.id === parentId) {
        return childItem;
      } else if (idsInPath.indexOf(childItem.props.id) > -1) {
        // Node is parent of target
        return childItem;
      } else if (pathIds.indexOf(data.props.id) > -1) {
        // Node is child target
        return childItem;
      }

      return null;
    }
  );
};



================================================
FILE: packages/core/reducer/actions/set-data.ts
================================================
import { Data } from "../../types";
import { SetDataAction } from "../actions";
import { AppStore } from "../../store";
import { PrivateAppState } from "../../types/Internal";
import { walkAppState } from "../../lib/data/walk-app-state";

export const setDataAction = <UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: SetDataAction,
  appStore: AppStore
): PrivateAppState<UserData> => {
  if (typeof action.data === "object") {
    console.warn(
      "`setData` is expensive and may cause unnecessary re-renders. Consider using a more atomic action instead."
    );

    return walkAppState(
      {
        ...state,
        data: {
          ...state.data,
          ...action.data,
        },
      },
      appStore.config
    );
  }

  return walkAppState(
    {
      ...state,
      data: {
        ...state.data,
        ...action.data(state.data),
      },
    },
    appStore.config
  );
};



================================================
FILE: packages/core/reducer/actions/set-ui.ts
================================================
import { Data } from "../../types";
import { SetUiAction } from "../actions";
import { PrivateAppState } from "../../types/Internal";

export const setUiAction = <UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: SetUiAction
): PrivateAppState<UserData> => {
  if (typeof action.ui === "object") {
    return {
      ...state,
      ui: {
        ...state.ui,
        ...action.ui,
      },
    };
  }

  return {
    ...state,
    ui: {
      ...state.ui,
      ...action.ui(state.ui),
    },
  };
};



================================================
FILE: packages/core/reducer/actions/set.ts
================================================
import { Data } from "../../types";
import { SetAction } from "../actions";
import { AppStore } from "../../store";
import { PrivateAppState } from "../../types/Internal";
import { walkAppState } from "../../lib/data/walk-app-state";

export const setAction = <UserData extends Data>(
  state: PrivateAppState<UserData>,
  action: SetAction<UserData>,
  appStore: AppStore
): PrivateAppState<UserData> => {
  if (typeof action.state === "object") {
    const newState = {
      ...state,
      ...action.state,
    };

    if (action.state.indexes) {
      return newState;
    }

    console.warn(
      "`set` is expensive and may cause unnecessary re-renders. Consider using a more atomic action instead."
    );

    return walkAppState(newState, appStore.config);
  }

  return { ...state, ...action.state(state) };
};



================================================
FILE: packages/core/reducer/actions/__helpers__/index.tsx
================================================
import { PuckAction, createReducer } from "../../../reducer";
import { ComponentData, Config, Data, Slot, UiState } from "../../../types";
import { generateId } from "../../../lib/generate-id";
import {
  createAppStore,
  defaultAppState as _defaultAppState,
} from "../../../store";
import { PrivateAppState } from "../../../types/Internal";
import { stripSlots } from "../../../lib/data/strip-slots";
import { Reducer } from "react";
import { flattenNode } from "../../../lib/data/flatten-node";

jest.mock("../../../lib/generate-id");

const mockedGenerateId = generateId as jest.MockedFunction<typeof generateId>;

type Props = {
  Comp: {
    prop: string;
    slot: Slot;
    slotArray: { slot: Slot }[];
  };
  CompWithDefaults: {
    prop: string;
    slot: Slot;
    slotArray: { slot: Slot }[];
  };
};

type RootProps = {
  title: string;
  slot: Slot;
};

export type UserConfig = Config<Props, RootProps>;
export type UserData = Data<Props, RootProps>;

export const dzZoneCompound = "my-component:zone1";

export const defaultData: UserData = {
  root: { props: { title: "", slot: [] } },
  content: [],
  zones: { [dzZoneCompound]: [] },
};

export const defaultUi: UiState = _defaultAppState.ui;

export const defaultIndexes: PrivateAppState<UserData>["indexes"] = {
  nodes: {},
  zones: {
    "root:slot": { contentIds: [], type: "slot" },
    [dzZoneCompound]: { contentIds: [], type: "dropzone" },
  },
};

export const defaultState = {
  data: defaultData,
  ui: defaultUi,
  indexes: defaultIndexes,
};

export const appStore = createAppStore();

const config: UserConfig = {
  root: {
    fields: { title: { type: "text" }, slot: { type: "slot" } },
  },
  components: {
    Comp: {
      fields: {
        prop: { type: "text" },
        slot: { type: "slot" },
        slotArray: { type: "array", arrayFields: { slot: { type: "slot" } } },
      },
      defaultProps: { prop: "example", slot: [], slotArray: [] },
      render: () => <div />,
    },
    CompWithDefaults: {
      fields: {
        prop: { type: "text" },
        slot: { type: "slot" },
        slotArray: { type: "array", arrayFields: { slot: { type: "slot" } } },
      },
      defaultProps: {
        prop: "example",
        slot: [
          {
            type: "Comp",
            props: {
              prop: "Defaulted item",
              slots: [],
            },
          },
        ],
        slotArray: [],
      },
      render: () => <div />,
    },
  },
};

export const expectIndexed = (
  state: PrivateAppState,
  item: ComponentData | undefined,
  path: string[],
  index: number,
  _config: Config = config
) => {
  if (!item) return;

  const zoneCompound = path[path.length - 1];

  expect(state.indexes.zones[zoneCompound].contentIds[index]).toEqual(
    item.props.id
  );
  expect(state.indexes.nodes[item.props.id].data).toEqual(item);
  expect(state.indexes.nodes[item.props.id].flatData).toEqual(
    flattenNode(item, _config)
  );
  expect(state.indexes.nodes[item.props.id].path).toEqual(path);
};

export const executeSequenceFactory =
  (reducer: Reducer<any, any>) =>
  <UserData extends Data>(
    initialState: PrivateAppState<UserData>,
    actions: ((currentState: PrivateAppState<UserData>) => PuckAction)[]
  ) => {
    let currentState: PrivateAppState<UserData> = initialState;

    actions.forEach((actionFn) => {
      const action = actionFn(currentState);

      currentState = reducer(currentState, action) as PrivateAppState<UserData>;
    });

    return currentState;
  };

export const testSetup = () => {
  let _reducer = createReducer({ appStore: appStore.getState() });

  const beforeEachFn = () => {
    const newStore = {
      ...appStore.getInitialState(),
      config,
    };

    appStore.setState(newStore, true);

    _reducer = createReducer({ appStore: newStore });

    let counter = 0;

    mockedGenerateId.mockImplementation(() => `mockId-${counter++}`);
  };

  beforeEach(beforeEachFn);

  const executeSequence = (
    initialState: PrivateAppState<UserData>,
    actions: ((currentState: PrivateAppState<UserData>) => PuckAction)[]
  ) => {
    let currentState: PrivateAppState<UserData> = initialState;

    actions.forEach((actionFn) => {
      const action = actionFn(currentState);

      currentState = _reducer(
        currentState,
        action
      ) as PrivateAppState<UserData>;
    });

    return currentState;
  };

  const reducer = (state: PrivateAppState, action: PuckAction) =>
    _reducer(state, action);

  return { reducer, executeSequence, config };
};



================================================
FILE: packages/core/reducer/actions/__tests__/duplicate.spec.ts
================================================
import { Content } from "../../../types";
import { rootDroppableId } from "../../../lib/root-droppable-id";
import {
  defaultData,
  defaultState,
  dzZoneCompound,
  expectIndexed,
  testSetup,
} from "../__helpers__";
import { PrivateAppState } from "../../../types/Internal";
import { walkAppState } from "../../../lib/data/walk-app-state";

describe("Reducer", () => {
  const { executeSequence, config, reducer } = testSetup();

  describe("duplicate action", () => {
    describe("with DropZones", () => {
      it("should duplicate in content", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: rootDroppableId,
            destinationIndex: 0,
            id: "sampleId",
          }),
          (state) => ({
            type: "replace",
            destinationZone: rootDroppableId,
            destinationIndex: 0,
            data: {
              ...state.indexes.nodes["sampleId"].data,
              props: {
                ...state.indexes.nodes["sampleId"].data.props,
                prop: "Some example data",
              },
            },
          }),
          () => ({
            type: "duplicate",
            sourceZone: rootDroppableId,
            sourceIndex: 0,
          }),
        ]);

        expect(newState.data.content).toHaveLength(2);
        expect(newState.data.content[1].props.id).not.toBe("sampleId");
        expect(newState.data.content[1].props.prop).toBe("Some example data");
        expectIndexed(
          newState,
          newState.data.content[1],
          [rootDroppableId],
          1,
          config
        );
      });

      it("should duplicate in a different zone", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: dzZoneCompound,
            destinationIndex: 0,
            id: "sampleId",
          }),
          (state) => ({
            type: "replace",
            destinationZone: dzZoneCompound,
            destinationIndex: 0,
            data: {
              ...state.indexes.nodes["sampleId"].data,
              props: {
                ...state.indexes.nodes["sampleId"].data.props,
                prop: "Some example data",
              },
            },
          }),
          () => ({
            type: "duplicate",
            sourceZone: dzZoneCompound,
            sourceIndex: 0,
          }),
        ]);

        const zone = newState.data.zones?.[dzZoneCompound] ?? [];

        expect(zone).toHaveLength(2);
        expect(zone[1].props.id).not.toBe("sampleId");
        expect(zone[1].props.prop).toBe("Some example data");
        expectIndexed(
          newState,
          zone[1],
          [rootDroppableId, dzZoneCompound],
          1,
          config
        );
      });

      it("should recursively duplicate related items and zones", () => {
        const state: PrivateAppState = walkAppState(
          {
            ...defaultState,
            data: {
              ...defaultData,
              content: [
                {
                  type: "Comp",
                  props: { id: "my-component", prop: "Data" },
                },
              ],
              zones: {
                "my-component:zone": [
                  {
                    type: "Comp",
                    props: { id: "other-component", prop: "More example data" },
                  },
                ],
                "other-component:zone": [
                  {
                    type: "Comp",
                    props: { id: "final-id", prop: "Even more example data" },
                  },
                ],
              },
            },
          },
          config
        );

        const newState = reducer(state, {
          type: "duplicate",
          sourceIndex: 0,
          sourceZone: rootDroppableId,
        });

        const zone1 = newState.data.content ?? [];

        expect(zone1).toHaveLength(2);
        expect(zone1[1].props.id).not.toBe("my-component");
        expect(zone1[1].props.prop).toBe("Data");
        expectIndexed(newState, zone1[1], [rootDroppableId], 1, config);

        const zone2ZoneCompound = `${zone1[1].props.id}:zone`;
        const zone2 = newState.data.zones?.[zone2ZoneCompound] ?? [];

        expect(zone2).toHaveLength(1);
        expect(zone2[0].props.id).not.toBe("other-component");
        expect(zone2[0].props.prop).toBe("More example data");
        expectIndexed(
          newState,
          zone2[0],
          [rootDroppableId, zone2ZoneCompound],
          0,
          config
        );

        const zone3ZoneCompound = `${zone2[0].props.id}:zone`;
        const zone3 = newState.data.zones?.[zone3ZoneCompound] ?? [];

        expect(zone3).toHaveLength(1);
        expect(zone3[0].props.id).not.toBe("final-id");
        expect(zone3[0].props.prop).toBe("Even more example data");
        expectIndexed(
          newState,
          zone3[0],
          [rootDroppableId, zone2ZoneCompound, zone3ZoneCompound],
          0,
          config
        );
      });

      it("should select the duplicated item", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: rootDroppableId,
            destinationIndex: 0,
            id: "sampleId",
          }),
          () => ({
            type: "duplicate",
            sourceZone: rootDroppableId,
            sourceIndex: 0,
          }),
        ]);

        expect(newState.ui.itemSelector?.index).toBe(1);
        expect(newState.ui.itemSelector?.zone).toBe(rootDroppableId);
      });
    });
    describe("with slots", () => {
      it("should duplicate within a slot", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "sampleId",
          }),
          (state) => ({
            type: "replace",
            destinationZone: "root:slot",
            destinationIndex: 0,
            data: {
              ...state.indexes.nodes["sampleId"].data,
              props: {
                ...state.indexes.nodes["sampleId"].data.props,
                prop: "Some example data",
              },
            },
          }),
          () => ({
            type: "duplicate",
            sourceZone: "root:slot",
            sourceIndex: 0,
          }),
        ]);

        const content = newState.data.root.props?.slot ?? [];
        expect(content).toHaveLength(2);
        expect(content[1].props.id).not.toBe("sampleId");
        expect(content[1].props.prop).toBe("Some example data");
        expectIndexed(newState, content[1], ["root:slot"], 1, config);
      });

      it("should duplicate within a slot, within a slot", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "first",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "first:slot",
            destinationIndex: 0,
            id: "second",
          }),
          (state) => ({
            type: "replace",
            destinationZone: "first:slot",
            destinationIndex: 0,
            data: {
              ...state.indexes.nodes["second"].data,
              props: {
                ...state.indexes.nodes["second"].data.props,
                prop: "Some example data",
              },
            },
          }),
          () => ({
            type: "duplicate",
            sourceZone: "first:slot",
            sourceIndex: 0,
          }),
        ]);

        const content = (newState.data.root.props?.slot ?? [])[0].props
          .slot as Content;
        expect(content).toHaveLength(2);
        expect(content[1].props.id).not.toBe("second");
        expect(content[1].props.prop).toBe("Some example data");
        expectIndexed(
          newState,
          content[1],
          ["root:slot", "first:slot"],
          1,
          config
        );
      });

      it("should duplicate within a slot, within a DropZone", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: dzZoneCompound,
            destinationIndex: 0,
            id: "first",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "first:slot",
            destinationIndex: 0,
            id: "second",
          }),
          (state) => ({
            type: "replace",
            destinationZone: "first:slot",
            destinationIndex: 0,
            data: {
              ...state.indexes.nodes["second"].data,
              props: {
                ...state.indexes.nodes["second"].data.props,
                prop: "Some example data",
              },
            },
          }),
          () => ({
            type: "duplicate",
            sourceZone: "first:slot",
            sourceIndex: 0,
          }),
        ]);

        const content =
          newState.data.zones?.[dzZoneCompound][0].props.slot || [];

        expect(content).toHaveLength(2);
        expect(content[1].props.id).not.toBe("second");
        expect(content[1].props.prop).toBe("Some example data");
        expectIndexed(
          newState,
          content[1],
          [rootDroppableId, dzZoneCompound, "first:slot"],
          1,
          config
        );
      });

      it("should recursively duplicate related items", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "first",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "first:slot",
            destinationIndex: 0,
            id: "second",
          }),
          (state) => ({
            type: "replace",
            destinationZone: "first:slot",
            destinationIndex: 0,
            data: {
              ...state.indexes.nodes["second"].data,
              props: {
                ...state.indexes.nodes["second"].data.props,
                prop: "Some example data",
              },
            },
          }),
          () => ({
            type: "duplicate",
            sourceZone: "root:slot",
            sourceIndex: 0,
          }),
        ]);

        const zone1 = newState.data.root.props?.slot ?? [];
        expect(zone1).toHaveLength(2);
        expect(zone1[1].props.id).not.toBe("second");
        expectIndexed(newState, zone1[1], ["root:slot"], 1, config);

        const zone2ZoneCompound = `${zone1[1].props.id}:slot`;
        const zone2 = zone1[1].props.slot ?? [];

        expect(zone2).toHaveLength(1);
        expect(zone2[0].props.id).not.toBe("second");
        expect(zone2[0].props.prop).toBe("Some example data");
        expectIndexed(
          newState,
          zone2[0],
          ["root:slot", zone2ZoneCompound],
          0,
          config
        );
      });

      it("should select the duplicated item", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "sampleId",
          }),
          () => ({
            type: "duplicate",
            sourceZone: "root:slot",
            sourceIndex: 0,
          }),
        ]);

        expect(newState.ui.itemSelector?.index).toBe(1);
        expect(newState.ui.itemSelector?.zone).toBe("root:slot");
      });
    });
  });
});



================================================
FILE: packages/core/reducer/actions/__tests__/insert.spec.ts
================================================
import { rootDroppableId } from "../../../lib/root-droppable-id";
import {
  defaultState,
  dzZoneCompound,
  expectIndexed,
  testSetup,
  UserData,
} from "../__helpers__";
import { PrivateAppState } from "../../../types/Internal";
import { InsertAction } from "../../actions";

describe("Reducer", () => {
  const { executeSequence, reducer } = testSetup();

  describe("insert action", () => {
    describe("with DropZones", () => {
      it("should insert into rootDroppableId", () => {
        const action: InsertAction = {
          type: "insert",
          componentType: "Comp",
          destinationIndex: 0,
          destinationZone: rootDroppableId,
        };

        const newState = reducer(defaultState, action);
        const item = newState.data.content[0];

        expect(item).toHaveProperty("type", "Comp");
        expect(item.props).toHaveProperty("prop", "example");
        expectIndexed(newState, item, [rootDroppableId], 0);
      });

      it("should insert into a different zone", () => {
        const action: InsertAction = {
          type: "insert",
          componentType: "Comp",
          destinationIndex: 0,
          destinationZone: dzZoneCompound,
        };

        const state = reducer(defaultState, action);

        const item = state.data.zones?.[dzZoneCompound][0];

        expect(item).toHaveProperty("type", "Comp");
        expect(item?.props).toHaveProperty("prop", "example");
        expectIndexed(state, item, [rootDroppableId, dzZoneCompound], 0);
      });
    });

    describe("with slots", () => {
      it("should insert into a root slot", () => {
        const state: PrivateAppState<UserData> = defaultState;

        const action: InsertAction = {
          type: "insert",
          componentType: "Comp",
          destinationIndex: 0,
          destinationZone: "root:slot",
        };

        const newState = reducer(state, action) as PrivateAppState<UserData>;

        const item = newState.data.root.props?.slot[0];

        expect(item).toHaveProperty("type", "Comp");
        expect(item?.props).toHaveProperty("prop", "example");
        expectIndexed(newState, item, ["root:slot"], 0);
      });

      it("should load components defined in defaultProps", () => {
        const state: PrivateAppState<UserData> = defaultState;

        const action: InsertAction = {
          type: "insert",
          componentType: "CompWithDefaults",
          destinationIndex: 0,
          destinationZone: "root:slot",
          id: "first",
        };

        const newState = reducer(state, action) as PrivateAppState<UserData>;

        const item = newState.data.root.props?.slot[0];
        const defaultedItem = newState.data.root.props?.slot[0].props.slot[0];

        expect(item).toHaveProperty("type", "CompWithDefaults");
        expect(defaultedItem?.props).toHaveProperty("prop", "Defaulted item");
        expect(defaultedItem?.props.id).toEqual("mockId-1");
        expectIndexed(newState, defaultedItem, ["root:slot", "first:slot"], 0);
      });

      it("should insert into a slot within a slot", () => {
        const state = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationIndex: 0,
            destinationZone: "root:slot",
          }),
          (state) => ({
            type: "insert",
            componentType: "Comp",
            destinationIndex: 0,
            destinationZone: `${state.data.root.props?.slot[0].props?.id}:slot`,
          }),
        ]);

        const item = state.data.root.props?.slot[0]?.props.slot[0];

        expect(item).toHaveProperty("type", "Comp");
        expect(item?.props).toHaveProperty("prop", "example");
        expectIndexed(
          state,
          item,
          ["root:slot", `${state.data.root.props?.slot[0].props?.id}:slot`],
          0
        );
      });

      it("should insert into a slot within a DropZone", () => {
        const state = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationIndex: 0,
            destinationZone: dzZoneCompound,
          }),
          (state) => ({
            type: "insert",
            componentType: "Comp",
            destinationIndex: 0,
            destinationZone: `${state.data.zones?.[dzZoneCompound][0]?.props.id}:slot`,
          }),
        ]);

        const item = state.data.zones?.[dzZoneCompound][0];

        expect(item).toHaveProperty("type", "Comp");
        expect(item?.props).toHaveProperty("prop", "example");
        expectIndexed(state, item, [rootDroppableId, dzZoneCompound], 0);
      });
    });
  });
});



================================================
FILE: packages/core/reducer/actions/__tests__/move.spec.ts
================================================
import { rootDroppableId } from "../../../lib/root-droppable-id";
import {
  defaultState,
  dzZoneCompound,
  expectIndexed,
  testSetup,
} from "../__helpers__";

describe("Reducer", () => {
  const { executeSequence } = testSetup();

  describe("move action", () => {
    describe("with DropZones", () => {
      it("should reorder within rootDroppableId", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: rootDroppableId,
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: rootDroppableId,
            destinationIndex: 1,
            id: "2",
          }),
          () => ({
            type: "move",
            sourceIndex: 0,
            sourceZone: rootDroppableId,
            destinationIndex: 1,
            destinationZone: rootDroppableId,
          }),
        ]);

        expect(newState.data.content[0].props.id).toBe("2");
        expect(newState.data.content[1].props.id).toBe("1");
        expectIndexed(newState, newState.data.content[0], [rootDroppableId], 0);
        expectIndexed(newState, newState.data.content[1], [rootDroppableId], 1);
      });

      it("should move items between zones", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: dzZoneCompound,
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: dzZoneCompound,
            destinationIndex: 1,
            id: "2",
          }),
          () => ({
            type: "move",
            sourceIndex: 1,
            sourceZone: dzZoneCompound,
            destinationIndex: 0,
            destinationZone: rootDroppableId,
          }),
        ]);

        expect(newState.data.zones?.[dzZoneCompound][0].props.id).toBe("1");
        expect(newState.data.content[0].props.id).toBe("2");
        expectIndexed(
          newState,
          newState.data.zones?.[dzZoneCompound][0],
          [rootDroppableId, dzZoneCompound],
          0
        );
        expectIndexed(newState, newState.data.content[0], [rootDroppableId], 0);
      });
    });

    describe("with slots", () => {
      it("should reorder within a slot", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 1,
            id: "2",
          }),
          () => ({
            type: "move",
            sourceIndex: 0,
            sourceZone: "root:slot",
            destinationIndex: 1,
            destinationZone: "root:slot",
          }),
        ]);

        expect(newState.data.root.props?.slot[0].props.id).toBe("2");
        expect(newState.data.root.props?.slot[1].props.id).toBe("1");
        expectIndexed(
          newState,
          newState.data.root.props?.slot[0],
          ["root:slot"],
          0
        );
        expectIndexed(
          newState,
          newState.data.root.props?.slot[1],
          ["root:slot"],
          1
        );
      });

      it("should move items from a deep slot to a zone", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "1:slot",
            destinationIndex: 0,
            id: "2",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "2:slot",
            destinationIndex: 0,
            id: "3",
          }),
          () => ({
            type: "move",
            sourceIndex: 0,
            sourceZone: "1:slot",
            destinationIndex: 1,
            destinationZone: dzZoneCompound,
          }),
        ]);

        const item1 = newState.data.root.props?.slot[0];
        const item2 = newState.data.zones?.[dzZoneCompound][0];
        const item3 = newState.data.zones?.[dzZoneCompound][0].props?.slot[0];

        expect(item1?.props.id).toBe("1");
        expectIndexed(newState, item1, ["root:slot"], 0);

        expect(item2?.props?.id).toBe("2");
        expectIndexed(newState, item2, [rootDroppableId, dzZoneCompound], 0);

        expect(item3?.props.id).toBe("3");
        expectIndexed(
          newState,
          item3,
          [rootDroppableId, dzZoneCompound, "2:slot"],
          0
        );
      });
    });
  });
});



================================================
FILE: packages/core/reducer/actions/__tests__/register-zone.spec.ts
================================================
import { RegisterZoneAction, UnregisterZoneAction } from "../..";
import { PrivateAppState } from "../../../types/Internal";
import { defaultData, defaultState, testSetup } from "../__helpers__";

describe("Reducer", () => {
  const { reducer } = testSetup();

  describe("registerZone action", () => {
    it("should register a zone that's been previously unregistered", () => {
      const state: PrivateAppState = {
        ...defaultState,
        data: {
          ...defaultData,
          zones: { zone1: [{ type: "Comp", props: { id: "1" } }] },
        },
      };

      const unregisterAction: UnregisterZoneAction = {
        type: "unregisterZone",
        zone: "zone1",
      };

      const registerAction: RegisterZoneAction = {
        type: "registerZone",
        zone: "zone1",
      };

      const newState = reducer(
        reducer(state, unregisterAction),
        registerAction
      );
      expect(newState.data.zones?.zone1[0].props.id).toEqual("1");
    });
  });

  describe("unregisterZone action", () => {
    it("should unregister a zone", () => {
      const state: PrivateAppState = {
        ...defaultState,
        data: {
          ...defaultData,
          zones: { zone1: [{ type: "Comp", props: { id: "1" } }] },
        },
      };

      const action: UnregisterZoneAction = {
        type: "unregisterZone",
        zone: "zone1",
      };

      const newState = reducer(state, action);
      expect(newState.data.zones?.zone1).toBeUndefined();
    });
  });
});



================================================
FILE: packages/core/reducer/actions/__tests__/remove.spec.ts
================================================
import { RemoveAction } from "../..";
import { rootDroppableId } from "../../../lib/root-droppable-id";
import { walkAppState } from "../../../lib/data/walk-app-state";
import { PrivateAppState } from "../../../types/Internal";
import {
  defaultData,
  defaultState,
  dzZoneCompound,
  testSetup,
} from "../__helpers__";

describe("Reducer", () => {
  const { executeSequence, config, reducer } = testSetup();

  describe("remove action", () => {
    describe("with DropZones", () => {
      it("should remove from content", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: rootDroppableId,
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "remove",
            index: 0,
            zone: rootDroppableId,
          }),
        ]);

        expect(newState.data.content).toHaveLength(0);
        expect(newState.indexes.nodes["1"]).toBeUndefined();
        expect(newState.indexes.zones[rootDroppableId].contentIds).toEqual([]);
      });

      it("should remove from a zone", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: dzZoneCompound,
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "remove",
            index: 0,
            zone: dzZoneCompound,
          }),
        ]);

        expect(newState.data.zones?.[dzZoneCompound]).toHaveLength(0);
        expect(newState.indexes.nodes["1"]).toBeUndefined();
        expect(newState.indexes.zones[dzZoneCompound].contentIds).toEqual([]);
      });

      it("should recursively remove items", () => {
        const state: PrivateAppState = walkAppState(
          {
            ...defaultState,
            data: {
              ...defaultData,
              content: [
                {
                  type: "Comp",
                  props: { id: "my-component", prop: "Data" },
                },
              ],
              zones: {
                "my-component:zone": [
                  {
                    type: "Comp",
                    props: { id: "other-component", prop: "More example data" },
                  },
                ],
                "other-component:zone": [
                  {
                    type: "Comp",
                    props: { id: "final-id", prop: "Even more example data" },
                  },
                ],
              },
            },
          },
          config
        );

        const action: RemoveAction = {
          type: "remove",
          index: 0,
          zone: rootDroppableId,
        };

        const newState = reducer(state, action);

        expect(newState.data).toMatchInlineSnapshot(`
          {
            "content": [],
            "root": {
              "props": {
                "slot": [],
                "title": "",
              },
            },
            "zones": {},
          }
        `);

        expect(newState.indexes).toMatchInlineSnapshot(`
          {
            "nodes": {
              "root": {
                "data": {
                  "props": {
                    "id": "root",
                    "slot": [],
                    "title": "",
                  },
                  "type": "root",
                },
                "flatData": {
                  "props": {
                    "id": "root",
                    "slot": null,
                    "title": "",
                  },
                  "type": "root",
                },
                "parentId": null,
                "path": [],
                "zone": "",
              },
            },
            "zones": {
              "root:default-zone": {
                "contentIds": [],
                "type": "root",
              },
              "root:slot": {
                "contentIds": [],
                "type": "slot",
              },
            },
          }
        `);
      });
    });

    describe("with slots", () => {
      it("should remove from a slot", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "remove",
            index: 0,
            zone: "root:slot",
          }),
        ]);

        expect(newState.data.content).toHaveLength(0);
        expect(newState.indexes.nodes["1"]).toBeUndefined();
        expect(newState.indexes.zones["root:slot"].contentIds).toEqual([]);
      });

      it("should recursively remove items in a slot", () => {
        const state: PrivateAppState = walkAppState(
          {
            ...defaultState,
            data: {
              ...defaultData,
              root: {
                props: {
                  slot: [
                    {
                      type: "Comp",
                      props: {
                        id: "my-component",
                        prop: "Data",
                        slot: [
                          {
                            type: "Comp",
                            props: {
                              id: "final-id",
                              prop: "Even more example data",
                            },
                          },
                        ],
                      },
                    },
                  ],
                } as any,
              },
            },
          },
          config
        );

        const action: RemoveAction = {
          type: "remove",
          index: 0,
          zone: "root:slot",
        };

        const newState = reducer(state, action);

        expect(newState.data).toMatchInlineSnapshot(`
          {
            "content": [],
            "root": {
              "props": {
                "slot": [],
              },
            },
            "zones": {},
          }
        `);

        expect(newState.indexes).toMatchInlineSnapshot(`
          {
            "nodes": {
              "root": {
                "data": {
                  "props": {
                    "id": "root",
                    "slot": [],
                  },
                  "type": "root",
                },
                "flatData": {
                  "props": {
                    "id": "root",
                    "slot": null,
                  },
                  "type": "root",
                },
                "parentId": null,
                "path": [],
                "zone": "",
              },
            },
            "zones": {
              "root:default-zone": {
                "contentIds": [],
                "type": "root",
              },
              "root:slot": {
                "contentIds": [],
                "type": "slot",
              },
            },
          }
        `);
      });

      it("should remove items deep within a slot", () => {
        const state: PrivateAppState = walkAppState(
          {
            ...defaultState,
            data: {
              ...defaultData,
              root: {
                props: {
                  slot: [
                    {
                      type: "Comp",
                      props: {
                        id: "my-component",
                        prop: "Data",
                        slot: [
                          {
                            type: "Comp",
                            props: {
                              id: "final-id",
                              prop: "Even more example data",
                            },
                          },
                        ],
                      },
                    },
                  ],
                } as any,
              },
            },
          },
          config
        );

        const action: RemoveAction = {
          type: "remove",
          index: 0,
          zone: "my-component:slot",
        };

        const newState = reducer(state, action);

        expect(newState.data).toMatchInlineSnapshot(`
          {
            "content": [],
            "root": {
              "props": {
                "slot": [
                  {
                    "props": {
                      "id": "my-component",
                      "prop": "Data",
                      "slot": [],
                    },
                    "type": "Comp",
                  },
                ],
              },
            },
            "zones": {
              "my-component:zone1": [],
            },
          }
        `);

        expect(newState.indexes).toMatchInlineSnapshot(`
          {
            "nodes": {
              "my-component": {
                "data": {
                  "props": {
                    "id": "my-component",
                    "prop": "Data",
                    "slot": [],
                  },
                  "type": "Comp",
                },
                "flatData": {
                  "props": {
                    "id": "my-component",
                    "prop": "Data",
                    "slot": null,
                  },
                  "type": "Comp",
                },
                "parentId": "root",
                "path": [
                  "root:slot",
                ],
                "zone": "slot",
              },
              "root": {
                "data": {
                  "props": {
                    "id": "root",
                    "slot": [
                      {
                        "props": {
                          "id": "my-component",
                          "prop": "Data",
                          "slot": [],
                        },
                        "type": "Comp",
                      },
                    ],
                  },
                  "type": "root",
                },
                "flatData": {
                  "props": {
                    "id": "root",
                    "slot": null,
                  },
                  "type": "root",
                },
                "parentId": null,
                "path": [],
                "zone": "",
              },
            },
            "zones": {
              "my-component:slot": {
                "contentIds": [],
                "type": "slot",
              },
              "my-component:zone1": {
                "contentIds": [],
                "type": "dropzone",
              },
              "root:default-zone": {
                "contentIds": [],
                "type": "root",
              },
              "root:slot": {
                "contentIds": [
                  "my-component",
                ],
                "type": "slot",
              },
            },
          }
        `);
      });

      it("should recursively remove items in a slot within a DropZone", () => {
        const state: PrivateAppState = walkAppState(
          {
            ...defaultState,
            data: {
              ...defaultData,
              content: [
                {
                  type: "Comp",
                  props: {
                    id: "my-component",
                    prop: "Data",
                    slot: [
                      {
                        type: "Comp",
                        props: {
                          id: "final-id",
                          prop: "Even more example data",
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
          config
        );

        const action: RemoveAction = {
          type: "remove",
          index: 0,
          zone: rootDroppableId,
        };

        const newState = reducer(state, action);

        expect(newState.data).toMatchInlineSnapshot(`
          {
            "content": [],
            "root": {
              "props": {
                "slot": [],
                "title": "",
              },
            },
            "zones": {},
          }
        `);

        expect(newState.indexes).toMatchInlineSnapshot(`
          {
            "nodes": {
              "root": {
                "data": {
                  "props": {
                    "id": "root",
                    "slot": [],
                    "title": "",
                  },
                  "type": "root",
                },
                "flatData": {
                  "props": {
                    "id": "root",
                    "slot": null,
                    "title": "",
                  },
                  "type": "root",
                },
                "parentId": null,
                "path": [],
                "zone": "",
              },
            },
            "zones": {
              "root:default-zone": {
                "contentIds": [],
                "type": "root",
              },
              "root:slot": {
                "contentIds": [],
                "type": "slot",
              },
            },
          }
        `);
      });
    });

    it("should deselect the item", () => {
      const newState = executeSequence(defaultState, [
        () => ({
          type: "insert",
          componentType: "Comp",
          destinationZone: "root:slot",
          destinationIndex: 0,
          id: "1",
        }),
        () => ({
          type: "remove",
          index: 0,
          zone: "root:slot",
        }),
      ]);

      expect(newState.ui.itemSelector).toBeNull();
    });
  });
});



================================================
FILE: packages/core/reducer/actions/__tests__/reorder.spec.ts
================================================
import { rootDroppableId } from "../../../lib/root-droppable-id";
import {
  defaultState,
  dzZoneCompound,
  expectIndexed,
  testSetup,
} from "../__helpers__";

describe("Reducer", () => {
  const { executeSequence } = testSetup();

  describe("reorder action", () => {
    describe("with DropZones", () => {
      it("should reorder within rootDroppableId", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: rootDroppableId,
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: rootDroppableId,
            destinationIndex: 1,
            id: "2",
          }),
          () => ({
            type: "reorder",
            sourceIndex: 0,
            destinationIndex: 1,
            destinationZone: rootDroppableId,
          }),
        ]);

        expect(newState.data.content[0].props.id).toBe("2");
        expect(newState.data.content[1].props.id).toBe("1");
        expectIndexed(newState, newState.data.content[0], [rootDroppableId], 0);
        expectIndexed(newState, newState.data.content[1], [rootDroppableId], 1);
      });

      it("should reorder within a different zone", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: dzZoneCompound,
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: dzZoneCompound,
            destinationIndex: 1,
            id: "2",
          }),
          () => ({
            type: "reorder",
            sourceIndex: 0,
            destinationIndex: 1,
            destinationZone: dzZoneCompound,
          }),
        ]);

        expect(newState.data.zones?.[dzZoneCompound][0].props.id).toBe("2");
        expect(newState.data.zones?.[dzZoneCompound][1].props.id).toBe("1");
        expectIndexed(
          newState,
          newState.data.content[0],
          [rootDroppableId, dzZoneCompound],
          0
        );
        expectIndexed(
          newState,
          newState.data.content[1],
          [rootDroppableId, dzZoneCompound],
          1
        );
      });
    });

    describe("with slots", () => {
      it("should reorder within a slot", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 1,
            id: "2",
          }),
          () => ({
            type: "reorder",
            sourceIndex: 0,
            destinationIndex: 1,
            destinationZone: "root:slot",
          }),
        ]);

        expect(newState.data.root.props?.slot[0].props.id).toBe("2");
        expect(newState.data.root.props?.slot[1].props.id).toBe("1");
        expectIndexed(
          newState,
          newState.data.root.props?.slot[0],
          ["root:slot"],
          0
        );
        expectIndexed(
          newState,
          newState.data.root.props?.slot[1],
          ["root:slot"],
          1
        );
      });
    });
  });
});



================================================
FILE: packages/core/reducer/actions/__tests__/replace.spec.ts
================================================
import { rootDroppableId } from "../../../lib/root-droppable-id";
import {
  defaultState,
  dzZoneCompound,
  expectIndexed,
  testSetup,
} from "../__helpers__";

describe("Reducer", () => {
  const { executeSequence } = testSetup();

  describe("replace action", () => {
    describe("with DropZones", () => {
      it("should replace in content", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: rootDroppableId,
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "replace",
            destinationZone: rootDroppableId,
            destinationIndex: 0,
            data: {
              type: "Comp",
              props: {
                id: "1",
                prop: "Changed",
              },
            },
          }),
        ]);

        expect(newState.data.content.length).toBe(1);
        expect(newState.data.content[0].props.prop).toBe("Changed");
        expectIndexed(newState, newState.data.content[0], [rootDroppableId], 0);
      });

      it("should replace in a zone", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: dzZoneCompound,
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "replace",
            destinationZone: dzZoneCompound,
            destinationIndex: 0,
            data: {
              type: "Comp",
              props: {
                id: "1",
                prop: "Changed",
              },
            },
          }),
        ]);

        expect(newState.data.zones?.[dzZoneCompound].length).toBe(1);
        expect(newState.data.zones?.[dzZoneCompound][0].props.prop).toBe(
          "Changed"
        );
        expectIndexed(newState, newState.data.content[0], [rootDroppableId], 0);
      });
    });

    describe("with slots", () => {
      it("should replace in deep slots", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "replace",
            destinationZone: "root:slot",
            destinationIndex: 0,
            data: {
              type: "CompWithDefaults",
              props: { id: "1", slot: [{ type: "Comp", props: {} }] },
            },
          }),
        ]);

        const item = newState.data.root.props?.slot[0];

        expect(newState.data.root.props?.slot.length).toBe(1);
        expect(item?.props.id).toBe("1");
        expect(item?.props.slot[0].props.id).toBe("mockId-1");
        expectIndexed(newState, item, ["root:slot"], 0);
      });

      it("should replace when slot removed from array", () => {
        const newState = executeSequence(defaultState, [
          () => ({
            type: "insert",
            componentType: "Comp",
            destinationZone: "root:slot",
            destinationIndex: 0,
            id: "1",
          }),
          () => ({
            type: "replace",
            destinationZone: "root:slot",
            destinationIndex: 0,
            data: {
              type: "CompWithDefaults",
              props: {
                id: "1",
                slot: [],
                slotArray: [
                  { slot: [{ type: "Comp", props: {} }] },
                  { slot: [{ type: "Comp", props: {} }] },
                ],
              },
            },
          }),
        ]);

        const item = newState.data.root.props?.slot[0];

        const slottedItem1 = item?.props.slotArray[0].slot[0];
        const slottedItem2 = item?.props.slotArray[1].slot[0];

        expectIndexed(
          newState,
          slottedItem1,
          ["root:slot", "1:slotArray[0].slot"],
          0
        );
        expectIndexed(
          newState,
          slottedItem2,
          ["root:slot", "1:slotArray[1].slot"],
          0
        );

        const removedState = executeSequence(newState, [
          () => ({
            type: "replace",
            destinationZone: "root:slot",
            destinationIndex: 0,
            data: {
              type: "CompWithDefaults",
              props: {
                id: "1",
                slot: [],
                slotArray: [{ slot: [slottedItem1] }],
              },
            },
          }),
        ]);

        expectIndexed(
          removedState,
          slottedItem1,
          ["root:slot", "1:slotArray[0].slot"],
          0
        );

        expect(
          removedState.indexes.zones["1:slotArray[1].slot"]
        ).toBeUndefined();
      });
    });
  });
});



================================================
FILE: packages/core/reducer/actions/__tests__/set-ui.spec.ts
================================================
import { SetUiAction } from "../..";
import { defaultState, testSetup } from "../__helpers__";

describe("Reducer", () => {
  const { reducer } = testSetup();

  describe("setUi action", () => {
    it("should insert data into the state", () => {
      const action: SetUiAction = {
        type: "setUi",
        ui: { leftSideBarVisible: false },
      };

      const newState = reducer(defaultState, action);
      expect(newState.ui.leftSideBarVisible).toEqual(false);
    });
  });
});



================================================
FILE: packages/core/reducer/actions/__tests__/set.spec.ts
================================================
import { SetDataAction } from "../..";
import { defaultData, defaultState, testSetup } from "../__helpers__";

describe("Reducer", () => {
  const { reducer } = testSetup();

  describe("set action", () => {
    it("should set new data", () => {
      const newData = {
        ...defaultData,
        root: { props: { title: "Hello, world", slot: [] } },
        content: [{ type: "Comp", props: { id: "1", slot: [] } }],
      };

      const action: SetDataAction = {
        type: "setData",
        data: newData,
      };

      const newState = reducer(defaultState, action);
      expect(newState.data).toEqual(newData);
    });
  });
});



================================================
FILE: packages/core/store/default-app-state.ts
================================================
import { defaultViewports } from "../components/ViewportControls/default-viewports";
import { PrivateAppState } from "../types/Internal";

export const defaultAppState: PrivateAppState = {
  data: { content: [], root: {}, zones: {} },
  ui: {
    leftSideBarVisible: true,
    rightSideBarVisible: true,
    arrayState: {},
    itemSelector: null,
    componentList: {},
    isDragging: false,
    previewMode: "edit",
    viewports: {
      current: {
        width: defaultViewports[0].width,
        height: defaultViewports[0].height || "auto",
      },
      options: [],
      controlsVisible: true,
    },
    field: { focus: null },
  },
  indexes: {
    nodes: {},
    zones: {},
  },
};



================================================
FILE: packages/core/store/index.ts
================================================
import {
  Config,
  IframeConfig,
  Overrides,
  AppState,
  UiState,
  Plugin,
  UserGenerics,
  Field,
  ComponentConfig,
  Metadata,
  ComponentData,
  RootDataWithProps,
  ResolveDataTrigger,
} from "../types";
import { createReducer, PuckAction } from "../reducer";
import { getItem } from "../lib/data/get-item";
import { defaultViewports } from "../components/ViewportControls/default-viewports";
import { Viewports } from "../types";
import { create, StoreApi, useStore } from "zustand";
import { subscribeWithSelector } from "zustand/middleware";
import { createContext, useContext } from "react";
import { createHistorySlice, type HistorySlice } from "./slices/history";
import { createNodesSlice, type NodesSlice } from "./slices/nodes";
import {
  createPermissionsSlice,
  type PermissionsSlice,
} from "./slices/permissions";
import { createFieldsSlice, type FieldsSlice } from "./slices/fields";
import { resolveComponentData } from "../lib/resolve-component-data";
import { walkAppState } from "../lib/data/walk-app-state";
import { toRoot } from "../lib/data/to-root";
import { generateId } from "../lib/generate-id";
import { defaultAppState } from "./default-app-state";

export { defaultAppState };

export type Status = "LOADING" | "MOUNTED" | "READY";

type ZoomConfig = {
  autoZoom: number;
  rootHeight: number;
  zoom: number;
};

type ComponentState = Record<string, { loadingCount: number }>;

export type AppStore<
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
> = {
  state: G["UserAppState"];
  dispatch: (action: PuckAction) => void;
  config: UserConfig;
  componentState: ComponentState;
  setComponentState: (componentState: ComponentState) => void;
  setComponentLoading: (
    id: string,
    loading?: boolean,
    defer?: number
  ) => () => void;
  unsetComponentLoading: (id: string) => void;
  pendingLoadTimeouts: Record<string, NodeJS.Timeout>;
  resolveComponentData: <T extends ComponentData | RootDataWithProps>(
    componentData: T,
    trigger: ResolveDataTrigger
  ) => Promise<{ node: T; didChange: boolean }>;
  resolveAndCommitData: () => void;
  plugins: Plugin[];
  overrides: Partial<Overrides>;
  viewports: Viewports;
  zoomConfig: ZoomConfig;
  setZoomConfig: (zoomConfig: ZoomConfig) => void;
  status: Status;
  setStatus: (status: Status) => void;
  iframe: IframeConfig;
  selectedItem?: G["UserData"]["content"][0] | null;
  setUi: (ui: Partial<UiState>, recordHistory?: boolean) => void;
  getComponentConfig: (type?: string) => ComponentConfig | null | undefined;
  onAction?: (action: PuckAction, newState: AppState, state: AppState) => void;
  metadata: Metadata;
  fields: FieldsSlice;
  history: HistorySlice;
  nodes: NodesSlice;
  permissions: PermissionsSlice;
};

export type AppStoreApi = StoreApi<AppStore>;

const defaultPageFields: Record<string, Field> = {
  title: { type: "text" },
};

export const createAppStore = (initialAppStore?: Partial<AppStore>) =>
  create<AppStore>()(
    subscribeWithSelector((set, get) => ({
      state: defaultAppState,
      config: { components: {} },
      componentState: {},
      plugins: [],
      overrides: {},
      viewports: defaultViewports,
      zoomConfig: {
        autoZoom: 1,
        rootHeight: 0,
        zoom: 1,
      },
      status: "LOADING",
      iframe: {},
      metadata: {},
      ...initialAppStore,
      fields: createFieldsSlice(set, get),
      history: createHistorySlice(set, get),
      nodes: createNodesSlice(set, get),
      permissions: createPermissionsSlice(set, get),
      getComponentConfig: (type?: string) => {
        const { config, selectedItem } = get();
        const rootFields = config.root?.fields || defaultPageFields;

        return type && type !== "root"
          ? config.components[type]
          : selectedItem
          ? config.components[selectedItem.type]
          : ({ ...config.root, fields: rootFields } as ComponentConfig);
      },
      selectedItem: initialAppStore?.state?.ui.itemSelector
        ? getItem(
            initialAppStore?.state?.ui.itemSelector,
            initialAppStore.state
          )
        : null,
      dispatch: (action: PuckAction) =>
        set((s) => {
          const { record } = get().history;

          const dispatch = createReducer({
            record,
            appStore: s,
          });

          const state = dispatch(s.state, action);

          const selectedItem = state.ui.itemSelector
            ? getItem(state.ui.itemSelector, state)
            : null;

          get().onAction?.(action, state, get().state);

          return { ...s, state, selectedItem };
        }),
      setZoomConfig: (zoomConfig) => set({ zoomConfig }),
      setStatus: (status) => set({ status }),
      setComponentState: (componentState) => set({ componentState }),
      pendingLoadTimeouts: {},
      setComponentLoading: (
        id: string,
        loading: boolean = true,
        defer: number = 0
      ) => {
        const { setComponentState, pendingLoadTimeouts } = get();

        const loadId = generateId();

        const setLoading = () => {
          const { componentState } = get();

          setComponentState({
            ...componentState,
            [id]: {
              ...componentState[id],
              loadingCount: (componentState[id]?.loadingCount || 0) + 1,
            },
          });
        };

        const unsetLoading = () => {
          const { componentState } = get();

          clearTimeout(timeout);

          delete pendingLoadTimeouts[loadId];

          set({ pendingLoadTimeouts });

          setComponentState({
            ...componentState,
            [id]: {
              ...componentState[id],
              loadingCount: Math.max(
                (componentState[id]?.loadingCount || 0) - 1,
                0
              ),
            },
          });
        };

        const timeout = setTimeout(() => {
          if (loading) {
            setLoading();
          } else {
            unsetLoading();
          }

          delete pendingLoadTimeouts[loadId];

          set({ pendingLoadTimeouts });
        }, defer);

        set({
          pendingLoadTimeouts: {
            ...pendingLoadTimeouts,
            [id]: timeout,
          },
        });

        return unsetLoading;
      },
      unsetComponentLoading: (id: string) => {
        const { setComponentLoading } = get();

        setComponentLoading(id, false);
      },
      // Helper
      setUi: (ui: Partial<UiState>, recordHistory?: boolean) =>
        set((s) => {
          const dispatch = createReducer({
            record: () => {},
            appStore: s,
          });

          const state = dispatch(s.state, {
            type: "setUi",
            ui,
            recordHistory,
          });

          const selectedItem = state.ui.itemSelector
            ? getItem(state.ui.itemSelector, state)
            : null;

          return { ...s, state, selectedItem };
        }),
      resolveComponentData: async (componentData, trigger) => {
        const { config, metadata, setComponentLoading, permissions } = get();

        const timeouts: Record<string, () => void> = {};

        return await resolveComponentData(
          componentData,
          config,
          metadata,
          (item) => {
            const id = "id" in item.props ? item.props.id : "root";
            timeouts[id] = setComponentLoading(id, true, 50);
          },
          async (item) => {
            const id = "id" in item.props ? item.props.id : "root";

            if ("type" in item) {
              await permissions.refreshPermissions({ item });
            } else {
              await permissions.refreshPermissions({ root: true });
            }

            timeouts[id]();
          },
          trigger
        );
      },
      resolveAndCommitData: async () => {
        const { config, state, dispatch, resolveComponentData } = get();

        walkAppState(
          state,
          config,
          (content) => content,
          (childItem) => {
            resolveComponentData(childItem, "load").then((resolved) => {
              const { state } = get();

              const node = state.indexes.nodes[resolved.node.props.id];

              // Ensure node hasn't been deleted whilst resolution happens
              if (node && resolved.didChange) {
                if (resolved.node.props.id === "root") {
                  dispatch({
                    type: "replaceRoot",
                    root: toRoot(resolved.node),
                  });
                } else {
                  // Use latest position, in case it's moved
                  const zoneCompound = `${node.parentId}:${node.zone}`;
                  const parentZone = state.indexes.zones[zoneCompound];

                  const index = parentZone.contentIds.indexOf(
                    resolved.node.props.id
                  );

                  dispatch({
                    type: "replace",
                    data: resolved.node,
                    destinationIndex: index,
                    destinationZone: zoneCompound,
                  });
                }
              }
            });

            return childItem;
          }
        );
      },
    }))
  );

export const appStoreContext = createContext(createAppStore());

export function useAppStore<T>(selector: (state: AppStore) => T) {
  const context = useContext(appStoreContext);

  return useStore(context, selector);
}

export function useAppStoreApi() {
  return useContext(appStoreContext);
}



================================================
FILE: packages/core/store/slices/fields.ts
================================================
import { ComponentData } from "../../types";
import type { Fields } from "../../types";
import { AppStore, useAppStoreApi } from "../";
import { useCallback, useEffect } from "react";
import { getChanged } from "../../lib/get-changed";
import { makeStatePublic } from "../../lib/data/make-state-public";

type ComponentOrRootData = Omit<ComponentData<any>, "type">;

export type FieldsSlice = {
  fields: Fields | Partial<Fields>;
  loading: boolean;
  lastResolvedData: Partial<ComponentOrRootData>;
  id: string | undefined;
};

export const createFieldsSlice = (
  _set: (newState: Partial<AppStore>) => void,
  _get: () => AppStore
): FieldsSlice => {
  return {
    fields: {},
    loading: false,
    lastResolvedData: {},
    id: undefined,
  };
};

export const useRegisterFieldsSlice = (
  appStore: ReturnType<typeof useAppStoreApi>,
  id?: string
) => {
  const resolveFields = useCallback(
    async (reset?: boolean) => {
      const { fields, lastResolvedData } = appStore.getState().fields;
      const nodes = appStore.getState().state.indexes.nodes;
      const node = nodes[id || "root"];
      const componentData = node?.data;
      const parentNode = node?.parentId ? nodes[node.parentId] : null;
      const parent = parentNode?.data || null;

      const { getComponentConfig, state } = appStore.getState();

      const componentConfig = getComponentConfig(componentData?.type);

      if (!componentData || !componentConfig) return;

      const defaultFields = componentConfig.fields || {};
      const resolver = componentConfig.resolveFields;
      let lastFields: Fields | null = fields as Fields;

      if (reset) {
        appStore.setState((s) => ({
          fields: { ...s.fields, fields: defaultFields, id },
        }));

        lastFields = defaultFields;
      }

      if (resolver) {
        const timeout = setTimeout(() => {
          appStore.setState((s) => ({
            fields: { ...s.fields, loading: true },
          }));
        }, 50);

        const lastData =
          lastResolvedData.props?.id === id ? lastResolvedData : null;

        const changed = getChanged(componentData, lastData);

        const newFields = await resolver(componentData, {
          changed,
          fields: defaultFields,
          lastFields,
          lastData: lastData as ComponentOrRootData,
          appState: makeStatePublic(state),
          parent,
        });

        clearTimeout(timeout);

        // Abort if item has changed during resolution (happens with history)
        if (appStore.getState().selectedItem?.props.id !== id) {
          return;
        }

        appStore.setState({
          fields: {
            fields: newFields,
            loading: false,
            lastResolvedData: componentData,
            id,
          },
        });
      } else {
        appStore.setState((s) => ({
          fields: { ...s.fields, fields: defaultFields, id },
        }));
      }
    },
    [id]
  );

  useEffect(() => {
    resolveFields(true);

    return appStore.subscribe(
      (s) => s.state.indexes.nodes[id || "root"],
      () => resolveFields()
    );
  }, [id]);
};



================================================
FILE: packages/core/store/slices/history.ts
================================================
import { AppState, History } from "../../types";
import { generateId } from "../../lib/generate-id";
import { AppStore, useAppStoreApi } from "../";
import { useEffect } from "react";
import { useHotkey } from "../../lib/use-hotkey";

export type HistorySlice<D = any> = {
  index: number;
  hasPast: () => boolean;
  hasFuture: () => boolean;
  histories: History<D>[];
  record: (data: D) => void;
  back: VoidFunction;
  forward: VoidFunction;
  currentHistory: () => History;
  nextHistory: () => History<D> | null;
  prevHistory: () => History<D> | null;
  setHistories: (histories: History[]) => void;
  setHistoryIndex: (index: number) => void;
  initialAppState: D;
};

const EMPTY_HISTORY_INDEX = 0;

function debounce(func: Function, timeout = 300) {
  let timer: NodeJS.Timeout;

  return (...args: any) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      func(...args);
    }, timeout);
  };
}

export type PuckHistory = {
  back: VoidFunction;
  forward: VoidFunction;
  setHistories: (histories: History[]) => void;
  setHistoryIndex: (index: number) => void;
  HistorySlice: HistorySlice;
};

// Tidy the state before going back or forward
const tidyState = (state: AppState): AppState => {
  return {
    ...state,
    ui: {
      ...state.ui,
      field: {
        focus: null,
      },
    },
  };
};

export const createHistorySlice = (
  set: (newState: Partial<AppStore>) => void,
  get: () => AppStore
): HistorySlice => {
  const record = debounce((state: AppState) => {
    const { histories, index } = get().history;

    const history: History = {
      state,
      id: generateId("history"),
    };

    // Don't use setHistories due to callback
    const newHistories = [...histories.slice(0, index + 1), history];

    set({
      history: {
        ...get().history,
        histories: newHistories,
        index: newHistories.length - 1,
      },
    });
  }, 250);

  return {
    initialAppState: {} as AppState,
    index: EMPTY_HISTORY_INDEX,
    histories: [],
    hasPast: () => get().history.index > EMPTY_HISTORY_INDEX,
    hasFuture: () => get().history.index < get().history.histories.length - 1,
    prevHistory: () => {
      const { history } = get();

      return history.hasPast() ? history.histories[history.index - 1] : null;
    },
    nextHistory: () => {
      const s = get().history;

      return s.hasFuture() ? s.histories[s.index + 1] : null;
    },
    currentHistory: () => get().history.histories[get().history.index],
    back: () => {
      const { history, dispatch } = get();

      if (history.hasPast()) {
        const state = tidyState(
          history.prevHistory()?.state || history.initialAppState
        );

        dispatch({
          type: "set",
          state,
        });

        set({ history: { ...history, index: history.index - 1 } });
      }
    },
    forward: () => {
      const { history, dispatch } = get();

      if (history.hasFuture()) {
        const state = history.nextHistory()?.state;

        dispatch({ type: "set", state: state ? tidyState(state) : {} });

        set({ history: { ...history, index: history.index + 1 } });
      }
    },
    setHistories: (histories: History[]) => {
      const { dispatch, history } = get();

      dispatch({
        type: "set",
        state:
          history.histories[history.histories.length - 1]?.state ||
          history.initialAppState,
      });

      set({ history: { ...history, histories, index: histories.length - 1 } });
    },
    setHistoryIndex: (index: number) => {
      const { dispatch, history } = get();

      dispatch({
        type: "set",
        state: history.histories[index]?.state || history.initialAppState,
      });

      set({ history: { ...history, index } });
    },
    record,
  };
};

export function useRegisterHistorySlice(
  appStore: ReturnType<typeof useAppStoreApi>,
  {
    histories,
    index,
    initialAppState,
  }: {
    histories: History<any>[];
    index: number;
    initialAppState: AppState;
  }
) {
  useEffect(
    () =>
      appStore.setState({
        history: {
          ...appStore.getState().history,
          histories,
          index,
          initialAppState,
        },
      }),
    [histories, index, initialAppState]
  );

  const back = () => {
    appStore.getState().history.back();
  };

  const forward = () => {
    appStore.getState().history.forward();
  };

  useHotkey({ meta: true, z: true }, back);
  useHotkey({ meta: true, shift: true, z: true }, forward);
  useHotkey({ meta: true, y: true }, forward);

  useHotkey({ ctrl: true, z: true }, back);
  useHotkey({ ctrl: true, shift: true, z: true }, forward);
  useHotkey({ ctrl: true, y: true }, forward);
}



================================================
FILE: packages/core/store/slices/nodes.ts
================================================
import { AppStore } from "../";

type NodeMethods = {
  sync: () => void;
  hideOverlay: () => void;
  showOverlay: () => void;
};

type PuckNodeInstance = {
  id: string;
  methods: NodeMethods;
  element: HTMLElement | null;
};

export type NodesSlice = {
  nodes: Record<string, PuckNodeInstance | undefined>;
  registerNode: (id: string, node: Partial<PuckNodeInstance>) => void;
  unregisterNode: (id: string, node?: Partial<PuckNodeInstance>) => void;
};

export const createNodesSlice = (
  set: (newState: Partial<AppStore>) => void,
  get: () => AppStore
): NodesSlice => ({
  nodes: {},
  registerNode: (id: string, node: Partial<PuckNodeInstance>) => {
    const s = get().nodes;

    const emptyNode: PuckNodeInstance = {
      id,
      methods: {
        sync: () => null,
        hideOverlay: () => null,
        showOverlay: () => null,
      },
      element: null,
    };

    const existingNode: PuckNodeInstance | undefined = s.nodes[id];

    set({
      nodes: {
        ...s,
        nodes: {
          ...s.nodes,
          [id]: {
            ...emptyNode,
            ...existingNode,
            ...node,
            id,
          },
        },
      },
    });
  },
  unregisterNode: (id) => {
    const s = get().nodes;
    const existingNode: PuckNodeInstance | undefined = s.nodes[id];

    if (existingNode) {
      const newNodes = { ...s.nodes };

      delete newNodes[id];

      set({
        nodes: {
          ...s,
          nodes: newNodes,
        },
      });
    }
  },
});



================================================
FILE: packages/core/store/slices/permissions.ts
================================================
import { useEffect } from "react";
import { flattenData } from "../../lib/data/flatten-data";
import { ComponentData, Config, Permissions, UserGenerics } from "../../types";
import { getChanged } from "../../lib/get-changed";
import { AppStore, useAppStoreApi } from "../";
import { makeStatePublic } from "../../lib/data/make-state-public";

type PermissionsArgs<
  UserConfig extends Config = Config,
  G extends UserGenerics<UserConfig> = UserGenerics<UserConfig>
> = {
  item?: G["UserComponentData"] | null;
  type?: keyof G["UserProps"];
  root?: boolean;
};

export type GetPermissions<UserConfig extends Config = Config> = (
  params?: PermissionsArgs<UserConfig>
) => Permissions;

type ResolvePermissions<UserConfig extends Config = Config> = (
  params?: PermissionsArgs<UserConfig>,
  force?: boolean
) => void;

export type RefreshPermissions<UserConfig extends Config = Config> = (
  params?: PermissionsArgs<UserConfig>,
  force?: boolean
) => void;

type Cache = Record<
  string,
  {
    lastPermissions: Partial<Permissions>;
    lastData: ComponentData | null;
  }
>;

export type PermissionsSlice = {
  cache: Cache;
  globalPermissions: Permissions;
  resolvedPermissions: Record<string, Partial<Permissions> | undefined>;
  getPermissions: GetPermissions<Config>;
  resolvePermissions: ResolvePermissions<Config>;
  refreshPermissions: RefreshPermissions<Config>;
};

export const createPermissionsSlice = (
  set: (newState: Partial<AppStore>) => void,
  get: () => AppStore
): PermissionsSlice => {
  const resolvePermissions: ResolvePermissions = async (params = {}, force) => {
    const { state, permissions, config } = get();
    const { cache, globalPermissions } = permissions;

    const resolveDataForItem = async (
      item: ComponentData,
      force: boolean = false
    ) => {
      const { config, state: appState, setComponentLoading } = get();
      const componentConfig =
        item.type === "root" ? config.root : config.components[item.type];

      if (!componentConfig) {
        return;
      }

      const initialPermissions = {
        ...globalPermissions,
        ...componentConfig.permissions,
      };

      if (componentConfig.resolvePermissions) {
        const changed = getChanged(item, cache[item.props.id]?.lastData);

        if (Object.values(changed).some((el) => el === true) || force) {
          const clearTimeout = setComponentLoading(item.props.id, true, 50);

          const resolvedPermissions = await componentConfig.resolvePermissions(
            item,
            {
              changed,
              lastPermissions: cache[item.props.id]?.lastPermissions || null,
              permissions: initialPermissions,
              appState: makeStatePublic(appState),
              lastData: cache[item.props.id]?.lastData || null,
            }
          );

          const latest = get().permissions;

          set({
            permissions: {
              ...latest,
              cache: {
                ...latest.cache,
                [item.props.id]: {
                  lastData: item,
                  lastPermissions: resolvedPermissions,
                },
              },
              resolvedPermissions: {
                ...latest.resolvedPermissions,
                [item.props.id]: resolvedPermissions,
              },
            },
          });

          clearTimeout();
        }
      }
    };

    const resolveDataForRoot = (force = false) => {
      const { state: appState } = get();

      resolveDataForItem(
        // Shim the root data in by conforming to component data shape
        {
          type: "root",
          props: { ...appState.data.root.props, id: "root" },
        },
        force
      );
    };

    const { item, type, root } = params;

    if (item) {
      // Resolve specific item
      await resolveDataForItem(item, force);
    } else if (type) {
      // Resolve specific type
      flattenData(state, config)
        .filter((item) => item.type === type)
        .map(async (item) => {
          await resolveDataForItem(item, force);
        });
    } else if (root) {
      resolveDataForRoot(force);
    } else {
      // Resolve everything
      flattenData(state, config).map(async (item) => {
        await resolveDataForItem(item, force);
      });
    }
  };

  const refreshPermissions: RefreshPermissions = (params) =>
    resolvePermissions(params, true);

  return {
    cache: {},
    globalPermissions: {
      drag: true,
      edit: true,
      delete: true,
      duplicate: true,
      insert: true,
    },
    resolvedPermissions: {},
    getPermissions: ({ item, type, root } = {}) => {
      const { config, permissions } = get();
      const { globalPermissions, resolvedPermissions } = permissions;

      if (item) {
        const componentConfig = config.components[item.type];

        const initialPermissions = {
          ...globalPermissions,
          ...componentConfig?.permissions,
        };

        const resolvedForItem = resolvedPermissions[item.props.id];

        return (
          resolvedForItem
            ? { ...globalPermissions, ...resolvedForItem }
            : initialPermissions
        ) as Permissions;
      } else if (type) {
        const componentConfig = config.components[type];

        return {
          ...globalPermissions,
          ...componentConfig?.permissions,
        } as Permissions;
      } else if (root) {
        const rootConfig = config.root;

        const initialPermissions = {
          ...globalPermissions,
          ...rootConfig?.permissions,
        } as Permissions;

        const resolvedForItem = resolvedPermissions["root"];

        return (
          resolvedForItem
            ? { ...globalPermissions, ...resolvedForItem }
            : initialPermissions
        ) as Permissions;
      }

      return globalPermissions;
    },
    resolvePermissions,
    refreshPermissions,
  };
};

export const useRegisterPermissionsSlice = (
  appStore: ReturnType<typeof useAppStoreApi>,
  globalPermissions: Partial<Permissions>
) => {
  useEffect(() => {
    const { permissions } = appStore.getState();
    const { globalPermissions: existingGlobalPermissions } = permissions;
    appStore.setState({
      permissions: {
        ...permissions,
        globalPermissions: {
          ...existingGlobalPermissions,
          ...globalPermissions,
        } as Permissions,
      },
    });

    permissions.resolvePermissions();
  }, [globalPermissions]);

  useEffect(() => {
    return appStore.subscribe(
      (s) => s.state.data,
      () => {
        appStore.getState().permissions.resolvePermissions();
      }
    );
  }, []);

  useEffect(() => {
    return appStore.subscribe(
      (s) => s.config,
      () => {
        appStore.getState().permissions.resolvePermissions();
      }
    );
  }, []);
};



================================================
FILE: packages/core/store/slices/__tests__/fields.spec.tsx
================================================
import { renderHook, act, waitFor } from "@testing-library/react";
import { useRegisterFieldsSlice } from "../fields";
import { createAppStore, defaultAppState } from "../..";
import { Config, ComponentData } from "../../../types";
import { PrivateAppState } from "../../../types/Internal";
import { walkAppState } from "../../../lib/data/walk-app-state";
import { makeStatePublic } from "../../../lib/data/make-state-public";

const baseState: PrivateAppState = {
  ...defaultAppState,
  data: {
    content: [
      {
        type: "Heading",
        props: { id: "heading-1", title: "Hello" },
      },
    ],
    root: {},
    zones: {},
  },
};

const appStore = createAppStore();

function resetStores() {
  // Reset main app store:
  appStore.setState(
    {
      ...appStore.getInitialState(),
      state: walkAppState(baseState, appStore.getInitialState().config),
    },
    true
  );
}

const selectFirst = (config: Config) => {
  appStore.setState({
    ...appStore.getState(),
    config,
    selectedItem: appStore.getState().state.data.content[0],
    state: walkAppState(
      {
        ...appStore.getState().state,
        ui: {
          ...appStore.getState().state.ui,
          itemSelector: {
            index: 0,
          },
        },
      },
      config
    ),
  });
};

describe("fields slice", () => {
  beforeEach(() => {
    resetStores();
  });

  it("returns default fields if no resolver is defined", async () => {
    const config: Config = {
      components: {
        Heading: {
          fields: { title: { type: "text" } },
          render: () => <div />,
        },
      },
    };

    selectFirst(config);

    renderHook(() => useRegisterFieldsSlice(appStore, "heading-1"));

    const { fields, loading } = appStore.getState().fields;

    expect(fields).toEqual({ title: { type: "text" } });
    expect(loading).toBe(false);
  });

  it("calls the root resolveFields if defined", async () => {
    const mockResolveFields = jest.fn().mockResolvedValue({
      title: { type: "textarea" },
    });

    const config: Config = {
      components: {
        Heading: {
          fields: { title: { type: "text" } },
          render: () => <div />,
        },
      },
      root: {
        resolveFields: mockResolveFields,
      },
    };

    appStore.setState({
      config,
    });

    renderHook(() => useRegisterFieldsSlice(appStore));
    expect(mockResolveFields).toHaveBeenCalledTimes(1);
    expect(mockResolveFields).toHaveBeenCalledWith(
      {
        props: { id: "root" },
        type: "root",
      },
      {
        appState: makeStatePublic(appStore.getState().state),
        changed: {
          id: true,
        },
        fields: { title: { type: "text" } },
        lastData: {},
        lastFields: { title: { type: "text" } },
        parent: null,
      }
    );

    await waitFor(() => {
      const { fields, loading } = appStore.getState().fields;
      expect(fields).toEqual({ title: { type: "textarea" } });
      expect(loading).toBe(false);
    });
  });

  it("calls a component's resolveFields if defined", async () => {
    const mockResolveFields = jest.fn().mockResolvedValue({
      title: { type: "textarea" },
    });

    const config: Config = {
      components: {
        Heading: {
          fields: { title: { type: "text" } },
          render: () => <div />,
          resolveFields: mockResolveFields,
        },
      },
    };

    selectFirst(config);

    renderHook(() => useRegisterFieldsSlice(appStore, "heading-1"));

    expect(mockResolveFields).toHaveBeenCalledTimes(1);
    expect(mockResolveFields).toHaveBeenCalledWith(
      {
        props: { id: "heading-1", title: "Hello" },
        type: "Heading",
      },
      {
        appState: makeStatePublic(appStore.getState().state),
        changed: {
          id: true,
          title: true,
        },
        fields: { title: { type: "text" } },
        lastData: null,
        lastFields: { title: { type: "text" } },
        parent: { props: { id: "root" }, type: "root" },
      }
    );

    // We set a short timeout in the store (50 ms) before loading = true,
    // so let's wait for that plus the async resolution:
    await waitFor(() => {
      const { fields, loading } = appStore.getState().fields;
      // Once resolved, we expect the store to hold the new fields:
      expect(fields).toEqual({ title: { type: "textarea" } });
      expect(loading).toBe(false);
    });
  });

  it("calls a component's resolveFields with correct fields on subsequent calls", async () => {
    const mockResolveFields = jest.fn().mockResolvedValue({
      title: { type: "textarea" },
    });

    const config: Config = {
      components: {
        Heading: {
          fields: { title: { type: "text" } },
          render: () => <div />,
          resolveFields: mockResolveFields,
        },
      },
    };

    selectFirst(config);

    renderHook(() => useRegisterFieldsSlice(appStore, "heading-1"));

    expect(mockResolveFields).toHaveBeenCalledTimes(1);

    // We set a short timeout in the store (50 ms) before loading = true,
    // so let's wait for that plus the async resolution:
    await waitFor(() => {
      const { fields } = appStore.getState().fields;
      expect(fields).toEqual({ title: { type: "textarea" } });
    });

    mockResolveFields.mockReset();

    appStore.getState().dispatch({
      type: "replace",
      data: {
        ...appStore.getState().selectedItem!,
        props: {
          ...appStore.getState().selectedItem!.props,
          title: "Hello, world",
        },
      },
      destinationIndex: 0,
      destinationZone: "root:default-zone",
    });

    expect(mockResolveFields).toHaveBeenCalledTimes(1);
    expect(mockResolveFields).toHaveBeenCalledWith(
      {
        props: { id: "heading-1", title: "Hello, world" },
        type: "Heading",
      },
      {
        appState: makeStatePublic(appStore.getState().state),
        changed: {
          id: false,
          title: true,
        },
        fields: { title: { type: "text" } },
        lastData: {
          props: { id: "heading-1", title: "Hello" },
          type: "Heading",
        },
        lastFields: { title: { type: "textarea" } },
        parent: { props: { id: "root" }, type: "root" },
      }
    );
  });

  it("calls a component's resolveFields with correct fields on subsequent calls, if item changes", async () => {
    const mockResolveFields = jest.fn().mockResolvedValue({
      title: { type: "textarea" },
    });

    const config: Config = {
      components: {
        Heading: {
          fields: { title: { type: "text" } },
          render: () => <div />,
          resolveFields: mockResolveFields,
        },
        Block: {
          fields: { title: { type: "number" } },
          render: () => <div />,
          resolveFields: mockResolveFields,
        },
      },
    };

    selectFirst(config);

    const { rerender } = renderHook(
      ({ id }: { id: string }) => useRegisterFieldsSlice(appStore, id),
      { initialProps: { id: "heading-1" } }
    );

    // We set a short timeout in the store (50 ms) before loading = true,
    // so let's wait for that plus the async resolution:
    await waitFor(() => {
      const { fields } = appStore.getState().fields;
      expect(fields).toEqual({ title: { type: "textarea" } });
    });

    expect(mockResolveFields).toHaveBeenCalledTimes(1);

    // Change data and check result
    act(() => {
      const newItem: ComponentData = {
        props: { id: "block-1", title: "1" },
        type: "Block",
      };

      appStore.setState({
        state: walkAppState(
          {
            ...appStore.getState().state,
            data: {
              ...appStore.getState().state.data,
              content: [...appStore.getState().state.data.content, newItem],
            },
          },
          config
        ),
        selectedItem: newItem,
      });
    });

    mockResolveFields.mockReset();

    rerender({ id: "block-1" });

    expect(mockResolveFields).toHaveBeenCalledTimes(1);
    expect(mockResolveFields).toHaveBeenCalledWith(
      {
        props: { id: "block-1", title: "1" },
        type: "Block",
      },
      {
        appState: makeStatePublic(appStore.getState().state),
        changed: {
          id: true,
          title: true,
        },
        fields: { title: { type: "number" } },
        lastData: null,
        lastFields: { title: { type: "number" } },
        parent: { props: { id: "root" }, type: "root" },
      }
    );
  });

  it("sets loading = true if resolver is slow (deferred loading)", async () => {
    // Make a resolver that waits
    const mockResolveFields = jest
      .fn()
      .mockImplementation(async (data, { fields }) => {
        return new Promise((resolve) => {
          setTimeout(() => {
            resolve({
              ...fields,
              body: { type: "textarea" },
            });
          }, 100);
        });
      });

    const config: Config = {
      components: {
        Heading: {
          fields: { title: { type: "text" } },
          render: () => <div />,
          resolveFields: mockResolveFields,
        },
      },
    };

    selectFirst(config);

    renderHook(() => useRegisterFieldsSlice(appStore, "heading-1"));

    // After 50ms, loading should become true:
    await waitFor(() => {
      expect(appStore.getState().fields.loading).toBe(true);
    });

    // After 100ms total, the resolver finishes:
    await waitFor(() => {
      const { fields, loading } = appStore.getState().fields;
      expect(fields).toEqual({
        title: { type: "text" },
        body: { type: "textarea" },
      });
      expect(loading).toBe(false);
      expect(mockResolveFields).toHaveBeenCalledTimes(1);
    });
  });

  it("updates fields again if node data changes", async () => {
    const mockResolveFields = jest.fn().mockResolvedValue({
      title: { type: "text" },
    });

    const config: Config = {
      components: {
        Heading: {
          fields: { title: { type: "text" } },
          render: () => <div />,
          resolveFields: mockResolveFields,
        },
      },
    };

    selectFirst(config);

    renderHook(() => useRegisterFieldsSlice(appStore, "heading-1"));

    // First call
    expect(mockResolveFields).toHaveBeenCalledTimes(1);

    // Now let's simulate a data change
    const selectedItem = appStore.getState().selectedItem;
    const updatedItem = {
      ...selectedItem!,
      props: { ...selectedItem?.props, title: "Newly changed" },
    };

    act(() => {
      appStore.getState().dispatch({
        type: "replace",
        data: updatedItem,
        destinationIndex: 0,
        destinationZone: "root:default-zone",
      });
    });

    // The subscription should trigger a second resolve:
    await waitFor(() => {
      expect(mockResolveFields).toHaveBeenCalledTimes(2);
    });
  });
});



================================================
FILE: packages/core/store/slices/__tests__/history.spec.tsx
================================================
import { renderHook, act, waitFor } from "@testing-library/react";
import { useRegisterHistorySlice } from "../history";
import { defaultAppState, createAppStore } from "../../";

const appStore = createAppStore();

function resetStores() {
  appStore.setState(
    {
      ...appStore.getInitialState(),
    },
    true
  );
}

describe("history slice", () => {
  beforeEach(() => {
    resetStores();
  });

  it("initializes with given histories and index", () => {
    renderHook(() =>
      useRegisterHistorySlice(appStore, {
        histories: [
          { id: "initial", state: { ...defaultAppState, data: "foo" } },
          { id: "second", state: { ...defaultAppState, data: "bar" } },
        ],
        index: 1,
        initialAppState: defaultAppState,
      })
    );

    const { histories, index, hasPast, hasFuture } =
      appStore.getState().history;

    expect(histories.length).toBe(2);
    expect(index).toBe(1);
    expect(hasPast()).toBe(true);
    expect(hasFuture()).toBe(false);
  });

  describe("record()", () => {
    it("tracks the history", () => {
      jest.spyOn(appStore.getState(), "dispatch");
      // register an initial set of histories
      renderHook(() =>
        useRegisterHistorySlice(appStore, {
          histories: [{ id: "initial", state: defaultAppState }],
          index: 0,
          initialAppState: defaultAppState,
        })
      );

      act(() => {
        // call record with some data
        appStore.getState().history.record({
          ...defaultAppState,
          data: { content: [], root: { props: { title: "Hello, world" } } },
        });
      });

      waitFor(() => {
        const { histories } = appStore.getState().history;
        expect(histories.length).toBe(2);
        expect(histories[1].state.data.root.props?.title).toBe("Hello, world");
      });
    });
  });

  describe("back()", () => {
    it("does nothing if no past", () => {
      renderHook(() =>
        useRegisterHistorySlice(appStore, {
          histories: [{ id: "init", state: defaultAppState }],
          index: 0,
          initialAppState: defaultAppState,
        })
      );

      jest.spyOn(appStore.getState(), "dispatch");

      act(() => {
        appStore.getState().history.back();
      });

      expect(appStore.getState().history.index).toBe(0);
      expect(appStore.getState().dispatch).not.toHaveBeenCalled();
    });

    it("rewinds if hasPast", () => {
      renderHook(() =>
        useRegisterHistorySlice(appStore, {
          histories: [
            { id: "0", state: { ...defaultAppState, data: "A" } },
            { id: "1", state: { ...defaultAppState, data: "B" } },
          ],
          index: 1,
          initialAppState: defaultAppState,
        })
      );

      jest.spyOn(appStore.getState(), "dispatch");

      act(() => {
        appStore.getState().history.back();
      });

      expect(appStore.getState().history.index).toBe(0);
      expect(appStore.getState().history.hasPast()).toBe(false);
      expect(appStore.getState().history.hasFuture()).toBe(true);
      expect(appStore.getState().dispatch).toHaveBeenCalledWith({
        type: "set",
        state: {
          ...defaultAppState,
          data: "A",
        },
      });
    });
  });

  describe("forward()", () => {
    it("does nothing if no future", () => {
      renderHook(() =>
        useRegisterHistorySlice(appStore, {
          histories: [{ id: "0", state: { ...defaultAppState, data: "A" } }],
          index: 0,
          initialAppState: defaultAppState,
        })
      );

      jest.spyOn(appStore.getState(), "dispatch");

      act(() => {
        appStore.getState().history.forward();
      });

      expect(appStore.getState().history.index).toBe(0);
      expect(appStore.getState().dispatch).not.toHaveBeenCalled();
    });

    it("fast-forwards if hasFuture", () => {
      renderHook(() =>
        useRegisterHistorySlice(appStore, {
          histories: [
            { id: "0", state: { ...defaultAppState, data: "A" } },
            { id: "1", state: { ...defaultAppState, data: "B" } },
          ],
          index: 0,
          initialAppState: defaultAppState,
        })
      );

      jest.spyOn(appStore.getState(), "dispatch");

      act(() => {
        appStore.getState().history.forward();
      });

      expect(appStore.getState().history.index).toBe(1);
      expect(appStore.getState().history.hasPast()).toBe(true);
      expect(appStore.getState().history.hasFuture()).toBe(false);
      expect(appStore.getState().dispatch).toHaveBeenCalledWith({
        type: "set",
        state: {
          ...defaultAppState,
          data: "B",
        },
      });
    });
  });

  describe("setHistories()", () => {
    it("updates the state appropriately", () => {
      renderHook(() =>
        useRegisterHistorySlice(appStore, {
          histories: [{ id: "init", state: defaultAppState }],
          index: 0,
          initialAppState: defaultAppState,
        })
      );

      jest.spyOn(appStore.getState(), "dispatch");

      act(() => {
        appStore.getState().history.setHistories([
          {
            id: "1",
            state: { ...defaultAppState, data: "One" },
          },
          {
            id: "2",
            state: { ...defaultAppState, data: "Two" },
          },
        ]);
      });

      const { histories, index } = appStore.getState().history;
      expect(histories.length).toBe(2);
      expect(histories[1].state.data).toBe("Two");
      expect(index).toBe(1);
      expect(appStore.getState().dispatch).toHaveBeenCalledWith({
        type: "set",
        state: defaultAppState, // from the old store’s last item or initialAppState
      });
    });
  });

  describe("setHistoryIndex()", () => {
    it("sets the store index and dispatches that state's data", () => {
      renderHook(() =>
        useRegisterHistorySlice(appStore, {
          histories: [
            { id: "0", state: { ...defaultAppState, data: "A" } },
            { id: "1", state: { ...defaultAppState, data: "B" } },
          ],
          index: 1,
          initialAppState: defaultAppState,
        })
      );

      jest.spyOn(appStore.getState(), "dispatch");

      act(() => {
        appStore.getState().history.setHistoryIndex(0);
      });

      expect(appStore.getState().history.index).toBe(0);
      expect(appStore.getState().dispatch).toHaveBeenCalledWith({
        type: "set",
        state: { ...defaultAppState, data: "A" },
      });
    });

    it("does nothing if out of bounds", () => {
      // By default no histories, or just one:
      renderHook(() =>
        useRegisterHistorySlice(appStore, {
          histories: [{ id: "0", state: defaultAppState }],
          index: 0,
          initialAppState: defaultAppState,
        })
      );

      jest.spyOn(appStore.getState(), "dispatch");

      act(() => {
        appStore.getState().history.setHistoryIndex(5);
      });

      // The new code always calls dispatch with the "current" index's state before setting the new index,
      // so if the store doesn't check bounds, it might still dispatch once.
      // If your final code checks bounds, you'd expect no dispatch. Adjust the check as needed:
      expect(appStore.getState().dispatch).toHaveBeenCalledTimes(1); // or 0 if you disallow out-of-bounds fully
      expect(appStore.getState().history.index).toBe(5);
    });
  });
});



================================================
FILE: packages/core/store/slices/__tests__/nodes.spec.tsx
================================================
import { act } from "@testing-library/react";
import { createAppStore } from "../../";

const appStore = createAppStore();

function resetStores() {
  // Reset the main app store
  appStore.setState(
    {
      ...appStore.getInitialState(),
    },
    true
  );
}

describe("nodes slice", () => {
  beforeEach(() => {
    resetStores();
  });

  it("registerNode stores the node data, merging on subsequent calls", () => {
    expect(Object.keys(appStore.getState().nodes.nodes)).toHaveLength(0);

    const syncMethod = jest.fn();

    act(() => {
      appStore.getState().nodes.registerNode("test-1", {
        methods: {
          sync: syncMethod,
          hideOverlay: () => {},
          showOverlay: () => {},
        },
      });
    });

    const initialNode = appStore.getState().nodes.nodes["test-1"];
    expect(initialNode).toBeDefined();

    // Re-register with partial changes
    act(() => {
      appStore.getState().nodes.registerNode("test-1", {
        element: "stub" as any,
      });
    });

    const updatedNode = appStore.getState().nodes.nodes["test-1"];
    expect(updatedNode).toBeDefined();
    expect(updatedNode?.methods.sync).toBe(syncMethod);
    expect(updatedNode?.element).toBe("stub");
  });

  it("unregisterNode removes from the store", () => {
    act(() => {
      appStore.getState().nodes.registerNode("test-2", {});
    });
    expect(appStore.getState().nodes.nodes["test-2"]).toBeDefined();

    act(() => {
      appStore.getState().nodes.unregisterNode("test-2");
    });
    expect(appStore.getState().nodes.nodes["test-2"]).toBeUndefined();
  });
});



================================================
FILE: packages/core/store/slices/__tests__/permissions.spec.tsx
================================================
import { renderHook, act, waitFor } from "@testing-library/react";
import { useRegisterPermissionsSlice } from "../permissions";
import { defaultAppState, createAppStore } from "../../";
import { rootDroppableId } from "../../../lib/root-droppable-id";
import { walkAppState } from "../../../lib/data/walk-app-state";
import { makeStatePublic } from "../../../lib/data/make-state-public";

const appStore = createAppStore();

function resetStores() {
  appStore.setState(
    {
      ...appStore.getInitialState(),
    },
    true
  );
}

describe("permissions slice", () => {
  beforeEach(() => {
    resetStores();
  });

  it("resolves on load", async () => {
    const mockResolvePermissions = jest.fn().mockReturnValue({});

    appStore.setState({
      config: {
        root: {
          render: () => <div />,
          resolvePermissions: mockResolvePermissions,
        },
        components: {},
      },
      state: {
        ...defaultAppState,
        data: {
          content: [],
          root: { props: { title: "Hello, world" } },
          zones: {},
        },
      },
    });

    renderHook(() => useRegisterPermissionsSlice(appStore, { foo: true }));

    expect(mockResolvePermissions).toHaveBeenCalledTimes(1);
  });

  it("auto-resolves when appStore data changes", async () => {
    const mockResolvePermissions = jest.fn().mockReturnValue({});

    appStore.setState({
      config: {
        root: {
          render: () => <div />,
          resolvePermissions: mockResolvePermissions,
        },
        components: {},
      },
      state: {
        ...defaultAppState,
        data: {
          content: [],
          root: { props: { title: "Hello, world" } },
          zones: {},
        },
      },
    });

    renderHook(() => useRegisterPermissionsSlice(appStore, { foo: true }));

    expect(mockResolvePermissions).toHaveBeenCalledTimes(1);

    appStore.setState({
      state: {
        ...defaultAppState,
        data: {
          ...appStore.getState().state.data,
          root: {
            props: {
              title: "Goodbye, world",
            },
          },
        },
      },
    });

    expect(mockResolvePermissions).toHaveBeenCalledTimes(2);
  });

  it("sets loading state if a resolver is defined, and doesn't if none is defined", async () => {
    let loadingCalled = false;
    let unloadingCalled = false;

    // Mock to see if they are called
    appStore.setState({
      setComponentLoading: () => {
        loadingCalled = true;
        return () => {
          unloadingCalled = true;
        };
      },
    });

    renderHook(() =>
      useRegisterPermissionsSlice(appStore, { globalTest: true })
    );

    await act(async () => {
      appStore.getState().permissions.resolvePermissions();
    });

    expect(loadingCalled).toBe(false);
    expect(unloadingCalled).toBe(false);

    resetStores();
    loadingCalled = false;
    unloadingCalled = false;

    appStore.setState({
      config: {
        components: {
          MyComponent: {
            render: () => <div />,
            resolvePermissions: async () => ({}),
          },
        },
      },
      setComponentLoading: () => {
        loadingCalled = true;
        return () => {
          unloadingCalled = true;
        };
      },

      state: {
        ...defaultAppState,
        data: {
          ...defaultAppState.data,
          content: [{ type: "MyComponent", props: { id: "comp-1" } }],
        },
      },
    });

    renderHook(() =>
      useRegisterPermissionsSlice(appStore, { globalTest: true })
    );

    await act(async () => {
      appStore.getState().permissions.resolvePermissions();
    });

    // Now we expect calls
    expect(loadingCalled).toBe(true);
    expect(unloadingCalled).toBe(true);
  });

  describe("getPermissions()", () => {
    it("returns global permissions by default", () => {
      renderHook(() =>
        useRegisterPermissionsSlice(appStore, { testGlobal: true })
      );

      const perms = appStore.getState().permissions.getPermissions();
      expect(perms.testGlobal).toBe(true);
      expect(perms.drag).toBe(true); // default
    });

    it("returns merged component permissions if present", () => {
      appStore.setState({
        config: {
          components: {
            MyComponent: {
              render: () => <div />,
              permissions: { fromComponent: true },
            },
          },
        },
      });

      renderHook(() =>
        useRegisterPermissionsSlice(appStore, { fromGlobal: true })
      );

      const perms = appStore.getState().permissions.getPermissions({
        item: { type: "MyComponent", props: { id: "component-1" } },
      });
      expect(perms.fromGlobal).toBe(true);
      expect(perms.fromComponent).toBe(true);
    });

    it("returns merged root permissions if present", () => {
      appStore.setState({
        config: {
          root: {
            permissions: { rootPerm: true },
          },
          components: {},
        },
      });

      renderHook(() =>
        useRegisterPermissionsSlice(appStore, { fromGlobal: true })
      );

      const perms = appStore
        .getState()
        .permissions.getPermissions({ root: true });
      expect(perms.fromGlobal).toBe(true);
      expect(perms.rootPerm).toBe(true);
    });
  });

  describe("resolvePermissions()", () => {
    it("calls component.resolvePermissions if defined", async () => {
      const resolvePermissions = jest.fn().mockReturnValue({
        resolved: true,
      });

      appStore.setState({
        ...appStore.getInitialState(),
        config: {
          components: {
            MyComponent: {
              render: () => <div />,
              permissions: { base: true },
              resolvePermissions,
            },
          },
        },
        state: {
          ...defaultAppState,
          data: {
            ...defaultAppState.data,
            content: [{ type: "MyComponent", props: { id: "comp-1" } }],
          },
        },
      });

      renderHook(() =>
        useRegisterPermissionsSlice(appStore, { globalTest: true })
      );

      await act(async () => {
        await appStore.getState().permissions.resolvePermissions();
        await appStore.getState().permissions.resolvePermissions(); // Double calls shouldn't run resolvers if data hasn't changed
      });

      expect(resolvePermissions).toHaveBeenCalledTimes(2);
      expect(resolvePermissions).toHaveBeenCalledWith(
        {
          props: { id: "comp-1" },
          type: "MyComponent",
        },
        {
          appState: makeStatePublic(appStore.getState().state),
          changed: { id: true },
          lastData: null,
          lastPermissions: null,
          permissions: {
            base: true,
            delete: true,
            drag: true,
            duplicate: true,
            edit: true,
            globalTest: true,
            insert: true,
          },
        }
      );

      // Confirm that getPermissions merges in resolved perms
      const perms = appStore.getState().permissions.getPermissions({
        item: { type: "MyComponent", props: { id: "comp-1" } },
      });
      expect(perms.resolved).toBe(true);
      expect(perms.globalTest).toBe(true);
    });

    it("provides correct args to component.resolvePermissions on subsequent calls", async () => {
      const resolvePermissions = jest.fn().mockReturnValue({
        resolved: true,
      });

      const config = {
        components: {
          MyComponent: {
            render: () => <div />,
            permissions: { base: true },
            resolvePermissions,
          },
        },
      };

      appStore.setState({
        config,
        state: walkAppState(
          {
            ...defaultAppState,
            data: {
              ...defaultAppState.data,
              content: [{ type: "MyComponent", props: { id: "comp-1" } }],
            },
          },
          config
        ),
      });

      renderHook(() =>
        useRegisterPermissionsSlice(appStore, { globalTest: true })
      );

      await act(async () => {
        await appStore.getState().permissions.resolvePermissions();

        const { dispatch } = appStore.getState();

        // Will auto trigger an update
        dispatch({
          type: "replace",
          data: {
            props: { id: "comp-1", title: "changed" },
            type: "MyComponent",
          },
          destinationIndex: 0,
          destinationZone: rootDroppableId,
        });
      });

      expect(resolvePermissions).toHaveBeenCalledTimes(3);
      expect(resolvePermissions).toHaveBeenCalledWith(
        {
          props: { id: "comp-1", title: "changed" },
          type: "MyComponent",
        },
        {
          appState: makeStatePublic(appStore.getState().state),
          changed: { id: false, title: true },
          lastData: {
            props: { id: "comp-1" },
            type: "MyComponent",
          },
          lastPermissions: { resolved: true },
          permissions: {
            base: true,
            delete: true,
            drag: true,
            duplicate: true,
            edit: true,
            globalTest: true,
            insert: true,
          },
        }
      );

      // Confirm that getPermissions merges in resolved perms
      const perms = appStore.getState().permissions.getPermissions({
        item: { type: "MyComponent", props: { id: "comp-1" } },
      });
      expect(perms.resolved).toBe(true);
      expect(perms.globalTest).toBe(true);
    });

    it("updates if item changes or if force = true", async () => {
      let resolveCalls = 0;
      appStore.setState({
        config: {
          components: {
            MyComponent: {
              render: () => <div />,
              resolvePermissions: async (item) => {
                resolveCalls += 1;
                if (item.props.id === "changed-1") {
                  return { changed: true };
                }
                return { notChanged: true };
              },
            },
          },
        },
        state: {
          ...defaultAppState,
          data: {
            ...defaultAppState.data,
            content: [{ type: "MyComponent", props: { id: "comp-1" } }],
          },
        },
      });

      renderHook(() =>
        useRegisterPermissionsSlice(appStore, { testGlobal: true })
      );

      // Initial
      await act(async () => {
        await appStore.getState().permissions.resolvePermissions();
      });
      expect(resolveCalls).toBe(2);

      // If nothing changed, calling again won't re-resolve
      await act(async () => {
        await appStore.getState().permissions.resolvePermissions();
      });
      expect(resolveCalls).toBe(2);

      // Force => resolves again
      await act(async () => {
        await appStore.getState().permissions.resolvePermissions({}, true);
      });
      expect(resolveCalls).toBe(3);

      // Change item => triggers new resolution
      appStore.setState({
        state: {
          ...defaultAppState,
          data: {
            content: [{ type: "MyComponent", props: { id: "changed-1" } }],
            root: {},
            zones: {},
          },
        },
      });

      // Watcher will trigger this
      expect(resolveCalls).toBe(4);
    });
  });

  describe("refreshPermissions()", () => {
    it("force updates if item changes", async () => {
      let resolveCalls = 0;
      appStore.setState({
        config: {
          components: {
            MyComponent: {
              render: () => <div />,
              resolvePermissions: async (item) => {
                resolveCalls += 1;
                if (item.props.id === "changed-1") {
                  return { changed: true };
                }
                return { notChanged: true };
              },
            },
          },
        },
        state: {
          ...defaultAppState,
          data: {
            ...defaultAppState.data,
            content: [{ type: "MyComponent", props: { id: "comp-1" } }],
          },
        },
      });

      renderHook(() =>
        useRegisterPermissionsSlice(appStore, { testGlobal: true })
      );

      // Initial
      await act(async () => {
        await appStore.getState().permissions.resolvePermissions();
      });
      expect(resolveCalls).toBe(2);

      await act(async () => {
        await appStore.getState().permissions.refreshPermissions();
      });
      expect(resolveCalls).toBe(3);
    });
  });

  describe("integration with useAppStore subscriptions", () => {
    it("auto-resolves when appStore config changes", async () => {
      let resolveCalled = false;
      appStore.setState({
        config: {
          components: {
            MyComponent: {
              render: () => <div />,
              resolvePermissions: async () => {
                resolveCalled = true;
                return { newPerm: true };
              },
            },
          },
        },
        state: {
          ...defaultAppState,
          data: {
            content: [{ type: "MyComponent", props: { id: "test-1" } }],
            root: {},
            zones: {},
          },
        },
      });

      renderHook(() =>
        useRegisterPermissionsSlice(appStore, { fromGlobal: true })
      );

      // config is already set before hooking, so do a manual "change" to trigger subscription
      await act(async () => {
        appStore.setState({
          config: {
            components: {
              MyComponent: {
                render: () => <div />,
                resolvePermissions: async () => {
                  resolveCalled = true;
                  return { changedPerm: true };
                },
              },
            },
          },
        });
      });

      await waitFor(() => expect(resolveCalled).toBe(true));
    });
  });
});



================================================
FILE: packages/core/styles/color.css
================================================
:root {
  /*
   * Color palette
   */

  --puck-color-rose-01: #4a001c;
  --puck-color-rose-02: #670833;
  --puck-color-rose-03: #87114c;
  --puck-color-rose-04: #a81a66;
  --puck-color-rose-05: #bc5089;
  --puck-color-rose-06: #cc7ca5;
  --puck-color-rose-07: #d89aba;
  --puck-color-rose-08: #e3b8cf;
  --puck-color-rose-09: #efd6e3;
  --puck-color-rose-10: #f6eaf1;
  --puck-color-rose-11: #faf4f8;
  --puck-color-rose-12: #fef8fc;

  --puck-color-azure-01: #00175d;
  --puck-color-azure-02: #002c77;
  --puck-color-azure-03: #014292;
  --puck-color-azure-04: #0158ad;
  --puck-color-azure-05: #3479be;
  --puck-color-azure-06: #6499cf;
  --puck-color-azure-07: #88b0da;
  --puck-color-azure-08: #abc7e5;
  --puck-color-azure-09: #cfdff0;
  --puck-color-azure-10: #e7eef7;
  --puck-color-azure-11: #f3f6fb;
  --puck-color-azure-12: #f7faff;

  --puck-color-green-01: #002000;
  --puck-color-green-02: #043604;
  --puck-color-green-03: #084e08;
  --puck-color-green-04: #0c680c;
  --puck-color-green-05: #1d882f;
  --puck-color-green-06: #2faa53;
  --puck-color-green-07: #56c16f;
  --puck-color-green-08: #7dd78b;
  --puck-color-green-09: #b8e8bf;
  --puck-color-green-10: #ddf3e0;
  --puck-color-green-11: #eff8f0;
  --puck-color-green-12: #f3fcf4;

  --puck-color-yellow-01: #211000;
  --puck-color-yellow-02: #362700;
  --puck-color-yellow-03: #4c4000;
  --puck-color-yellow-04: #645a00;
  --puck-color-yellow-05: #877614;
  --puck-color-yellow-06: #ab9429;
  --puck-color-yellow-07: #bfac4e;
  --puck-color-yellow-08: #d4c474;
  --puck-color-yellow-09: #e6deb1;
  --puck-color-yellow-10: #f3efd9;
  --puck-color-yellow-11: #f9f7ed;
  --puck-color-yellow-12: #fcfaf0;

  --puck-color-red-01: #4c0000;
  --puck-color-red-02: #6a0a10;
  --puck-color-red-03: #8a1422;
  --puck-color-red-04: #ac1f35;
  --puck-color-red-05: #bf5366;
  --puck-color-red-06: #ce7e8e;
  --puck-color-red-07: #d99ca8;
  --puck-color-red-08: #e4b9c2;
  --puck-color-red-09: #efd7db;
  --puck-color-red-10: #f6eaec;
  --puck-color-red-11: #faf4f5;
  --puck-color-red-12: #fff9fa;

  --puck-color-grey-01: #181818;
  --puck-color-grey-02: #292929;
  --puck-color-grey-03: #404040;
  --puck-color-grey-04: #5a5a5a;
  --puck-color-grey-05: #767676;
  --puck-color-grey-06: #949494;
  --puck-color-grey-07: #ababab;
  --puck-color-grey-08: #c3c3c3;
  --puck-color-grey-09: #dcdcdc;
  --puck-color-grey-10: #efefef;
  --puck-color-grey-11: #f5f5f5;
  --puck-color-grey-12: #fafafa;

  --puck-color-black: #000000;
  --puck-color-white: #ffffff;
}



================================================
FILE: packages/core/styles/typography.css
================================================
:root {
  /**
     * Modular Scale
     *
     * 2:1 - octave - 2.0
     *
     * Base: 12px
     *
     * Interval: 5
     *
     * http://spencermortensen.com/articles/typographic-scale/
     *
     * Spacing unit: 16px * 1.5 = 24px
     *
     * Root/html font-size is undefined (browser default)
     *
     * 1rem = 16px
     */

  /* Unitless font sizes
       ======================================================================== */

  --puck-font-size-scale-base-unitless: 12;
  --puck-font-size-xxxs-unitless: 12;
  --puck-font-size-xxs-unitless: 14;
  --puck-font-size-xs-unitless: 16;
  --puck-font-size-s-unitless: 18;
  --puck-font-size-m-unitless: 21;
  --puck-font-size-l-unitless: 24;
  --puck-font-size-xl-unitless: 28;
  --puck-font-size-xxl-unitless: 36;
  --puck-font-size-xxxl-unitless: 48;
  --puck-font-size-xxxxl-unitless: 56;

  /* Descriptive font sizes
       ======================================================================== */

  --puck-font-size-xxxs: calc(1rem * var(--puck-font-size-xxxs-unitless) / 16);
  --puck-font-size-xxs: calc(1rem * var(--puck-font-size-xxs-unitless) / 16);
  --puck-font-size-xs: calc(1rem * var(--puck-font-size-xs-unitless) / 16);
  --puck-font-size-s: calc(1rem * var(--puck-font-size-s-unitless) / 16);
  --puck-font-size-m: calc(1rem * var(--puck-font-size-m-unitless) / 16);
  --puck-font-size-l: calc(1rem * var(--puck-font-size-l-unitless) / 16);
  --puck-font-size-xl: calc(1rem * var(--puck-font-size-xl-unitless) / 16);
  --puck-font-size-xxl: calc(1rem * var(--puck-font-size-xxl-unitless) / 16);
  --puck-font-size-xxxl: calc(1rem * var(--puck-font-size-xxxl-unitless) / 16);
  --puck-font-size-xxxxl: calc(
    1rem * var(--puck-font-size-xxxxl-unitless) / 16
  );

  /* Functional font sizes
      ========================================================================= */

  --puck-font-size-base: var(--puck-font-size-xs);

  /* Descriptive line heights
      ========================================================================= */

  --line-height-reset: 1;
  --line-height-xs: calc(
    var(--space-m-unitless) / var(--puck-font-size-m-unitless)
  );
  --line-height-s: calc(
    var(--space-m-unitless) / var(--puck-font-size-s-unitless)
  );
  --line-height-m: calc(
    var(--space-m-unitless) / var(--puck-font-size-xs-unitless)
  );
  --line-height-l: calc(
    var(--space-m-unitless) / var(--puck-font-size-xxs-unitless)
  );
  --line-height-xl: calc(
    var(--space-m-unitless) / var(--puck-font-size-scale-base-unitless)
  );

  /* Functional line heights
      ========================================================================= */

  --line-height-base: var(--line-height-m);

  /* Font families
  ======================================================================== */

  --fallback-font-stack: -apple-system, BlinkMacSystemFont, Segoe UI,
    Helvetica Neue, sans-serif, Apple Color Emoji, Segoe UI Emoji,
    Segoe UI Symbol;

  --puck-font-family: Inter, var(--fallback-font-stack);
  --puck-font-family-monospaced: ui-monospace, "Cascadia Code",
    "Source Code Pro", Menlo, Consolas, "DejaVu Sans Mono", monospace;
}

@supports (font-variation-settings: normal) {
  :root {
    --puck-font-family: InterVariable, var(--fallback-font-stack);
  }
}



================================================
FILE: packages/core/types/AppState.tsx
================================================
import { ItemSelector } from "../lib/data/get-item";
import { Viewport } from "./API";
import { Data } from "./Data";

export type ItemWithId = {
  _arrayId: string;
  _originalIndex: number;
};

export type ArrayState = { items: ItemWithId[]; openId: string };

export type UiState = {
  leftSideBarVisible: boolean;
  rightSideBarVisible: boolean;
  itemSelector: ItemSelector | null;
  arrayState: Record<string, ArrayState | undefined>;
  previewMode: "interactive" | "edit";
  componentList: Record<
    string,
    {
      components?: string[];
      title?: string;
      visible?: boolean;
      expanded?: boolean;
    }
  >;
  isDragging: boolean;
  viewports: {
    current: {
      width: number;
      height: number | "auto";
    };
    controlsVisible: boolean;
    options: Viewport[];
  };
  field: { focus?: string | null };
};

export type AppState<UserData extends Data = Data> = {
  data: UserData;
  ui: UiState;
};



================================================
FILE: packages/core/types/Config.tsx
================================================
import type { JSX, ReactNode } from "react";
import { Fields } from "./Fields";
import { ComponentData, Metadata, RootData } from "./Data";

import { AsFieldProps, WithChildren, WithId, WithPuckProps } from "./Utils";
import { AppState } from "./AppState";
import { DefaultComponentProps } from "./Props";
import { Permissions } from "./API";
import { DropZoneProps } from "../components/DropZone/types";
import { WithDeepSlots } from "./Internal";

type SlotComponent = (props?: Omit<DropZoneProps, "zone">) => ReactNode;

export type PuckComponent<Props> = (
  props: WithId<
    WithPuckProps<{
      [K in keyof Props]: WithDeepSlots<Props[K], SlotComponent>;
    }>
  >
) => JSX.Element;

export type ResolveDataTrigger = "insert" | "replace" | "load" | "force";

type WithPartialProps<T, Props extends DefaultComponentProps> = Omit<
  T,
  "props"
> & {
  props?: Partial<Props>;
};

export type ComponentConfig<
  RenderProps extends DefaultComponentProps = DefaultComponentProps,
  FieldProps extends DefaultComponentProps = RenderProps,
  DataShape = Omit<ComponentData<FieldProps>, "type"> // NB this doesn't include AllProps, so types will not contain deep slot types. To fix, we require a breaking change.
> = {
  render: PuckComponent<RenderProps>;
  label?: string;
  defaultProps?: FieldProps;
  fields?: Fields<FieldProps>;
  permissions?: Partial<Permissions>;
  inline?: boolean;
  resolveFields?: (
    data: DataShape,
    params: {
      changed: Partial<Record<keyof FieldProps, boolean> & { id: string }>;
      fields: Fields<FieldProps>;
      lastFields: Fields<FieldProps>;
      lastData: DataShape | null;
      appState: AppState;
      parent: ComponentData | null;
    }
  ) => Promise<Fields<FieldProps>> | Fields<FieldProps>;
  resolveData?: (
    data: DataShape,
    params: {
      changed: Partial<Record<keyof FieldProps, boolean> & { id: string }>;
      lastData: DataShape | null;
      metadata: Metadata;
      trigger: ResolveDataTrigger;
    }
  ) =>
    | Promise<WithPartialProps<DataShape, FieldProps>>
    | WithPartialProps<DataShape, FieldProps>;
  resolvePermissions?: (
    data: DataShape,
    params: {
      changed: Partial<Record<keyof FieldProps, boolean> & { id: string }>;
      lastPermissions: Partial<Permissions>;
      permissions: Partial<Permissions>;
      appState: AppState;
      lastData: DataShape | null;
    }
  ) => Promise<Partial<Permissions>> | Partial<Permissions>;
  metadata?: Metadata;
};

export type RootConfig<RootProps extends DefaultComponentProps = any> = Partial<
  ComponentConfig<
    WithChildren<RootProps>,
    AsFieldProps<RootProps>,
    RootData<AsFieldProps<RootProps>>
  >
>;

type Category<ComponentName> = {
  components?: ComponentName[];
  title?: string;
  visible?: boolean;
  defaultExpanded?: boolean;
};

export type Config<
  Props extends DefaultComponentProps = DefaultComponentProps,
  RootProps extends DefaultComponentProps = any,
  CategoryName extends string = string
> = {
  categories?: Record<CategoryName, Category<keyof Props>> & {
    other?: Category<keyof Props>;
  };
  components: {
    [ComponentName in keyof Props]: Omit<
      ComponentConfig<Props[ComponentName], Props[ComponentName]>,
      "type"
    >;
  };
  root?: RootConfig<RootProps>;
};



================================================
FILE: packages/core/types/Data.tsx
================================================
import { DefaultAllProps, WithDeepSlots } from "./Internal";
import { DefaultComponentProps, DefaultRootFieldProps } from "./Props";
import { AsFieldProps, WithId } from "./Utils";

export type BaseData<
  Props extends { [key: string]: any } = { [key: string]: any }
> = {
  readOnly?: Partial<Record<keyof Props, boolean>>;
};

export type RootDataWithProps<
  Props extends DefaultComponentProps = DefaultRootFieldProps
> = BaseData<Props> & {
  props: Props;
};

// DEPRECATED
export type RootDataWithoutProps<
  Props extends DefaultComponentProps = DefaultRootFieldProps
> = Props;

export type RootData<
  Props extends DefaultComponentProps = DefaultRootFieldProps
> = Partial<RootDataWithProps<AsFieldProps<Props>>> &
  Partial<RootDataWithoutProps<Props>>; // DEPRECATED

export type ComponentData<
  Props extends DefaultComponentProps = DefaultComponentProps,
  Name = string,
  AllProps extends Record<string, DefaultComponentProps> = Record<
    string,
    DefaultComponentProps
  >
> = {
  type: Name;
  props: WithDeepSlots<WithId<Props>, Content<AllProps>>;
} & BaseData<Props>;

export type ComponentDataOptionalId<
  Props extends DefaultComponentProps = DefaultComponentProps,
  Name = string
> = {
  type: Name;
  props: Props & {
    id?: string;
  };
} & BaseData<Props>;

// Backwards compatibility
export type MappedItem = ComponentData;

export type ComponentDataMap<
  AllProps extends DefaultAllProps = DefaultAllProps
> = {
  [K in keyof AllProps]: ComponentData<
    AllProps[K],
    K extends string ? K : never,
    AllProps
  >;
}[keyof AllProps];

export type Content<
  PropsMap extends { [key: string]: DefaultComponentProps } = {
    [key: string]: DefaultComponentProps;
  }
> = ComponentDataMap<PropsMap>[];

export type Data<
  AllProps extends DefaultAllProps = DefaultAllProps,
  RootProps extends DefaultComponentProps = DefaultRootFieldProps
> = {
  root: WithDeepSlots<RootData<RootProps>, Content<AllProps>>;
  content: Content<AllProps>;
  zones?: Record<string, Content<AllProps>>;
};

export type Metadata = { [key: string]: any };



================================================
FILE: packages/core/types/Fields.ts
================================================
import { ReactElement } from "react";
import { DefaultComponentProps, Metadata, UiState } from ".";

type FieldOption = {
  label: string;
  value: string | number | boolean;
};

type FieldOptions = Array<FieldOption> | ReadonlyArray<FieldOption>;

export type BaseField = {
  label?: string;
  labelIcon?: ReactElement;
  metadata?: Metadata;
  visible?: boolean;
};

export type TextField = BaseField & {
  type: "text";
  placeholder?: string;
};
export type NumberField = BaseField & {
  type: "number";
  placeholder?: string;
  min?: number;
  max?: number;
  step?: number;
};

export type TextareaField = BaseField & {
  type: "textarea";
  placeholder?: string;
};

export type SelectField = BaseField & {
  type: "select";
  options: FieldOptions;
};

export type RadioField = BaseField & {
  type: "radio";
  options: FieldOptions;
};

export type ArrayField<
  Props extends { [key: string]: any } = { [key: string]: any }
> = BaseField & {
  type: "array";
  arrayFields: {
    [SubPropName in keyof Props[0]]: Field<Props[0][SubPropName]>;
  };
  defaultItemProps?: Props[0];
  getItemSummary?: (item: Props[0], index?: number) => string;
  max?: number;
  min?: number;
};

export type ObjectField<
  Props extends { [key: string]: any } = { [key: string]: any }
> = BaseField & {
  type: "object";
  objectFields: Props extends any[]
    ? never
    : {
        [SubPropName in keyof Props]: Field<Props[SubPropName]>;
      };
};

// DEPRECATED
export type Adaptor<
  AdaptorParams = {},
  TableShape extends Record<string, any> = {},
  PropShape = TableShape
> = {
  name: string;
  fetchList: (adaptorParams?: AdaptorParams) => Promise<TableShape[] | null>;
  mapProp?: (value: TableShape) => PropShape;
};

// DEPRECATED
export type ExternalFieldWithAdaptor<
  Props extends { [key: string]: any } = { [key: string]: any }
> = BaseField & {
  type: "external";
  placeholder?: string;
  adaptor: Adaptor<any, any, Props>;
  adaptorParams?: object;
  getItemSummary: (item: Props, index?: number) => string;
};

export type ExternalField<
  Props extends { [key: string]: any } = { [key: string]: any }
> = BaseField & {
  type: "external";
  placeholder?: string;
  fetchList: (params: {
    query: string;
    filters: Record<string, any>;
  }) => Promise<any[] | null>;
  mapProp?: (value: any) => Props;
  mapRow?: (value: any) => Record<string, string | number | ReactElement>;
  getItemSummary?: (item: Props, index?: number) => string;
  showSearch?: boolean;
  renderFooter?: (props: { items: any[] }) => ReactElement;
  initialQuery?: string;
  filterFields?: Record<string, Field>;
  initialFilters?: Record<string, any>;
};

export type CustomFieldRender<Value extends any> = (props: {
  field: CustomField<Value>;
  name: string;
  id: string;
  value: Value;
  onChange: (value: Value) => void;
  readOnly?: boolean;
}) => ReactElement;

export type CustomField<Value extends any> = BaseField & {
  type: "custom";
  render: CustomFieldRender<Value>;
};

export type SlotField = BaseField & {
  type: "slot";
  allow?: string[];
  disallow?: string[];
};

export type Field<Props extends any = any> =
  | TextField
  | NumberField
  | TextareaField
  | SelectField
  | RadioField
  | ArrayField<Props extends { [key: string]: any } ? Props : any>
  | ObjectField<Props extends { [key: string]: any } ? Props : any>
  | ExternalField<Props extends { [key: string]: any } ? Props : any>
  | ExternalFieldWithAdaptor<Props extends { [key: string]: any } ? Props : any>
  | CustomField<Props>
  | SlotField;

export type Fields<
  ComponentProps extends DefaultComponentProps = DefaultComponentProps
> = {
  [PropName in keyof Omit<ComponentProps, "editMode">]: Field<
    ComponentProps[PropName]
  >;
};

export type FieldProps<F = Field<any>, ValueType = any> = {
  field: F;
  value: ValueType;
  id?: string;
  onChange: (value: ValueType, uiState?: Partial<UiState>) => void;
  readOnly?: boolean;
};



================================================
FILE: packages/core/types/index.ts
================================================
export * from "./API";
export * from "./API/Overrides";
export * from "./AppState";
export * from "./Config";
export * from "./Data";
export * from "./Fields";
export * from "./Props";
export * from "./Utils";



================================================
FILE: packages/core/types/Internal.tsx
================================================
import { Slot } from "./API";
import { AppState } from "./AppState";
import { ComponentData, Data } from "./Data";
import { DefaultComponentProps } from "./Props";

export type ZoneType = "root" | "dropzone" | "slot";

export type PuckNodeData = {
  data: ComponentData;
  flatData: ComponentData;
  parentId: string | null;
  zone: string;
  path: string[];
};

export type PuckZoneData = {
  contentIds: string[];
  type: ZoneType;
};

export type NodeIndex = Record<string, PuckNodeData>;
export type ZoneIndex = Record<string, PuckZoneData>;

export type PrivateAppState<UserData extends Data = Data> =
  AppState<UserData> & {
    indexes: {
      nodes: NodeIndex;
      zones: ZoneIndex;
    };
  };

export type DefaultAllProps = Record<string, DefaultComponentProps>;

type BuiltinTypes =
  | Date
  | RegExp
  | Error
  | Function
  | symbol
  | null
  | undefined;

/**
 * Recursively walk T and replace Slots with SlotComponents
 */
export type WithDeepSlots<T, SlotType = T> =
  // ────────────────────────────── leaf conversions ─────────────────────────────
  T extends Slot
    ? SlotType
    : // ────────────────────────── recurse into arrays & tuples ─────────────────
    T extends (infer U)[]
    ? Array<WithDeepSlots<U, SlotType>>
    : T extends (infer U)[]
    ? WithDeepSlots<U, SlotType>[]
    : // ────────────────────────── preserve objects like Date ───────────────────
    T extends BuiltinTypes
    ? T
    : // ───────────── recurse into objects while preserving optionality ─────────
    T extends object
    ? { [K in keyof T]: WithDeepSlots<T[K], SlotType> }
    : T;



================================================
FILE: packages/core/types/Props.tsx
================================================
import { DropZoneProps } from "../components/DropZone/types";
import { Metadata } from "./Data";
import { WithChildren, WithPuckProps } from "./Utils";

export type PuckContext = {
  renderDropZone: React.FC<DropZoneProps>;
  metadata: Metadata;
  isEditing: boolean;
  dragRef: ((element: Element | null) => void) | null;
};

export type DefaultRootFieldProps = {
  [key: string]: any;
  title?: string;
};

export type DefaultRootRenderProps<
  Props extends DefaultComponentProps = DefaultRootFieldProps
> = WithPuckProps<WithChildren<Props>>;

export type DefaultRootProps = DefaultRootRenderProps; // Deprecated

export type DefaultComponentProps = { [key: string]: any };



================================================
FILE: packages/core/types/Utils.tsx
================================================
import { ReactNode } from "react";
import { Config } from "./Config";
import { PuckContext } from "./Props";
import { ComponentData, Data } from "./Data";
import { PrivateAppState } from "./Internal";

export type WithId<Props> = Props & {
  id: string;
};

export type WithPuckProps<Props> = Props & {
  puck: PuckContext;
  editMode?: boolean;
};
export type AsFieldProps<Props> = Omit<Props, "children" | "puck" | "editMode">;

export type WithChildren<Props> = Props & {
  children: ReactNode;
};

export type ExtractPropsFromConfig<UserConfig> = UserConfig extends Config<
  infer P,
  any,
  any
>
  ? P
  : never;

export type ExtractRootPropsFromConfig<UserConfig> = UserConfig extends Config<
  any,
  infer P,
  any
>
  ? P
  : never;

export type UserGenerics<
  UserConfig extends Config = Config,
  UserProps extends ExtractPropsFromConfig<UserConfig> = ExtractPropsFromConfig<UserConfig>,
  UserRootProps extends ExtractRootPropsFromConfig<UserConfig> = ExtractRootPropsFromConfig<UserConfig>,
  UserData extends Data<UserProps, UserRootProps> | Data = Data<
    UserProps,
    UserRootProps
  >,
  UserAppState extends PrivateAppState<UserData> = PrivateAppState<UserData>,
  UserComponentData extends ComponentData = UserData["content"][0]
> = {
  UserConfig: UserConfig;
  UserProps: UserProps;
  UserRootProps: UserRootProps;
  UserData: UserData;
  UserAppState: UserAppState;
  UserComponentData: UserComponentData;
};



================================================
FILE: packages/core/types/__tests__/internal.spec.ts
================================================
import { WithDeepSlots } from "../Internal";

describe("WithDeepSlots", () => {
  it("should preserve types", () => {
    const testObject = {
      someDate: new Date(),
      someRegExp: /'/g,
      someError: new Error("An error occurred"),
      someFunction: () => void 0,
    } satisfies WithDeepSlots<{}>;

    testObject.someDate.getDate();
    testObject.someRegExp.test("test");
    testObject.someError.message;
    testObject.someFunction();

    expect("no compilation error").toBeTruthy();
  });
});



================================================
FILE: packages/core/types/API/DropZone.ts
================================================
export type Direction = "left" | "right" | "up" | "down" | null;

export type DragAxis = "dynamic" | "y" | "x";



================================================
FILE: packages/core/types/API/index.ts
================================================
import { PuckAction } from "../../reducer";
import { DefaultAllProps, WithDeepSlots } from "../Internal";
import { DefaultComponentProps } from "../Props";
import { AppState } from "./../AppState";
import { ComponentDataOptionalId, Content, Data } from "./../Data";
import { Overrides } from "./Overrides";

export type Permissions = {
  drag: boolean;
  duplicate: boolean;
  delete: boolean;
  edit: boolean;
  insert: boolean;
} & Record<string, boolean>;

export type IframeConfig = {
  enabled?: boolean;
  waitForStyles?: boolean;
};

export type OnAction<UserData extends Data = Data> = (
  action: PuckAction,
  appState: AppState<UserData>,
  prevAppState: AppState<UserData>
) => void;

export type Plugin = {
  overrides: Partial<Overrides>;
};

export type History<D = any> = {
  state: D;
  id?: string;
};

type InitialHistoryAppend<AS = Partial<AppState>> = {
  histories: History<AS>[];
  index?: number;
  appendData?: true;
};

type InitialHistoryNoAppend<AS = Partial<AppState>> = {
  histories: [History<AS>, ...History<AS>[]]; // Array with minimum length of 1
  index?: number;
  appendData?: false;
};

export type InitialHistory<AS = Partial<AppState>> =
  | InitialHistoryAppend<AS>
  | InitialHistoryNoAppend<AS>;

export type Slot<
  Props extends { [key: string]: DefaultComponentProps } = {
    [key: string]: DefaultComponentProps;
  }
> = {
  [K in keyof Props]: ComponentDataOptionalId<
    Props[K],
    K extends string ? K : never
  >;
}[keyof Props][];

export type WithSlotProps<
  Target extends Record<string, any>,
  AllProps extends DefaultAllProps = DefaultAllProps,
  SlotType extends Content<AllProps> = Content<AllProps>
> = WithDeepSlots<Target, SlotType>;

export * from "./DropZone";
export * from "./Viewports";

export type { Overrides };



================================================
FILE: packages/core/types/API/Overrides.ts
================================================
import { ReactElement, ReactNode } from "react";
import { Field, FieldProps } from "../Fields";
import { ItemSelector } from "../../lib/data/get-item";

// Plugins can use `usePuck` instead of relying on props
type RenderFunc<
  Props extends { [key: string]: any } = { children: ReactNode }
> = (props: Props) => ReactElement;

// All direct render methods, excluding fields
export const overrideKeys = [
  "header",
  "headerActions",
  "fields",
  "fieldLabel",
  "components",
  "componentItem",
  "outline",
  "puck",
  "preview",
] as const;

export type OverrideKey = (typeof overrideKeys)[number];

type OverridesGeneric<Shape extends { [key in OverrideKey]: any }> = Shape;

export type Overrides = OverridesGeneric<{
  fieldTypes: Partial<FieldRenderFunctions>;
  header: RenderFunc<{ actions: ReactNode; children: ReactNode }>;
  actionBar: RenderFunc<{
    label?: string;
    children: ReactNode;
    parentAction: ReactNode;
  }>;
  headerActions: RenderFunc<{ children: ReactNode }>;
  preview: RenderFunc;
  fields: RenderFunc<{
    children: ReactNode;
    isLoading: boolean;
    itemSelector?: ItemSelector | null;
  }>;
  fieldLabel: RenderFunc<{
    children?: ReactNode;
    icon?: ReactNode;
    label: string;
    el?: "label" | "div";
    readOnly?: boolean;
    className?: string;
  }>;
  components: RenderFunc;
  componentItem: RenderFunc<{ children: ReactNode; name: string }>;
  iframe: RenderFunc<{ children: ReactNode; document?: Document }>;
  outline: RenderFunc;
  puck: RenderFunc;
}>;

export type FieldRenderFunctions = Omit<
  {
    [Type in Field["type"]]: React.FunctionComponent<
      FieldProps<Extract<Field, { type: Type }>, any> & {
        children: ReactNode;
        name: string;
      }
    >;
  },
  "custom"
> & {
  [key: string]: React.FunctionComponent<
    FieldProps<any> & {
      children: ReactNode;
      name: string;
    }
  >;
};



================================================
FILE: packages/core/types/API/Viewports.ts
================================================
import { ReactNode } from "react";

type iconTypes = "Smartphone" | "Monitor" | "Tablet";

export type Viewport = {
  width: number;
  height?: number | "auto";
  label?: string;
  icon?: iconTypes | ReactNode;
};

export type Viewports = Viewport[];



================================================
FILE: packages/create-puck-app/README.md
================================================
# create-puck-app

`create-puck-app` generates recipes. For a full list of recipes, please see the monorepo README.

## Usage

npx

```sh
npx create-puck-app my-app
```

yarn

```sh
yarn create puck-app my-app
```

## License

MIT © [The Puck Contributors](https://github.com/measuredco/puck/graphs/contributors)



================================================
FILE: packages/create-puck-app/index.js
================================================
#!/usr/bin/env node

import fs from "fs";
import path from "path";
import { program } from "commander";
import inquirer from "inquirer";
import Handlebars from "handlebars";
import { glob } from "glob";
import { execSync } from "child_process";
import { dirname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const packageJson = JSON.parse(
  fs.readFileSync(path.join(__dirname, "./package.json"))
);

// Lifted from https://github.com/vercel/next.js/blob/c2d7bbd1b82c71808b99e9a7944fb16717a581db/packages/create-next-app/helpers/get-pkg-manager.ts
function getPkgManager() {
  // eslint-disable-next-line turbo/no-undeclared-env-vars
  const userAgent = process.env.npm_config_user_agent || "";

  if (userAgent.startsWith("yarn")) {
    return "yarn";
  }

  if (userAgent.startsWith("pnpm")) {
    return "pnpm";
  }

  return "npm";
}

program
  .command("create [app-name]")
  .option(
    "--use-npm",
    `

    Explicitly tell the CLI to bootstrap the application using npm
  `
  )
  .option(
    "--use-pnpm",
    `

    Explicitly tell the CLI to bootstrap the application using pnpm
  `
  )
  .option(
    "--use-yarn",
    `

    Explicitly tell the CLI to bootstrap the application using Yarn
  `
  )
  .action(async (_appName, options) => {
    const beforeQuestions = [];

    if (!_appName) {
      beforeQuestions.push({
        type: "input",
        name: "appName",
        message: "What is the name of your app?",
        required: true,
      });
    }

    const questions = [
      ...beforeQuestions,
      {
        type: "input",
        name: "recipe",
        message: "Which recipe would you like to use?",
        required: true,
        default: "next",
      },
    ];
    const answers = await inquirer.prompt(questions);
    const appName = answers.appName || _appName;
    const recipe = answers.recipe;

    // Copy template files to the new directory
    const templatePath = path.join(__dirname, "./templates", recipe);
    const appPath = path.join(process.cwd(), appName);

    if (!recipe) {
      console.error(`Please specify a recipe.`);
      return;
    }

    if (!fs.existsSync(templatePath)) {
      console.error(`No recipe named ${recipe} exists.`);
      return;
    }

    if (fs.existsSync(appPath)) {
      console.error(
        `A directory called ${appName} already exists. Please use a different name or delete this directory.`
      );
      return;
    }

    fs.mkdirSync(appName);

    const packageManager = !!options.useNpm
      ? "npm"
      : !!options.usePnpm
      ? "pnpm"
      : !!options.useYarn
      ? "yarn"
      : getPkgManager();

    // Compile handlebars templates
    const templateFiles = glob.sync(`**/*`, {
      cwd: templatePath,
      nodir: true,
      dot: true,
    });

    for (const templateFile of templateFiles) {
      const filePath = path.join(templatePath, templateFile);
      const targetPath = filePath
        .replace(templatePath, appPath)
        .replace(".hbs", "")
        .replace("gitignore", ".gitignore"); // Rename gitignore back to .gitignore (.gitignore) gets ignored by npm during publish

      let data;

      if (path.extname(filePath) === ".hbs") {
        const templateString = fs.readFileSync(filePath, "utf-8");

        const template = Handlebars.compile(templateString);
        data = template({
          ...answers,
          appName,
          puckVersion: `^${packageJson.version}`,
        });
      } else {
        data = fs.readFileSync(filePath, "utf-8");
      }

      const dir = path.dirname(targetPath);

      fs.mkdirSync(dir, { recursive: true });

      fs.writeFileSync(targetPath, data);
    }

    if (packageManager === "yarn") {
      execSync("yarn install", { cwd: appPath, stdio: "inherit" });
    } else {
      execSync(`${packageManager} i`, { cwd: appPath, stdio: "inherit" });
    }

    let inGitRepo = false;

    try {
      inGitRepo =
        execSync("git status", { cwd: appPath })
          .toString()
          .indexOf("fatal:") !== 0;
    } catch {}

    // Only commit if this is a new repo
    if (!inGitRepo) {
      try {
        execSync("git init", { cwd: appPath, stdio: "inherit" });

        execSync("git add .", { cwd: appPath, stdio: "inherit" });
        execSync('git commit -m "build(puck): generate app"', {
          cwd: appPath,
          stdio: "inherit",
        });
      } catch (error) {
        console.log("Failed to commit git changes");
      }
    }
  })
  .parse(process.argv);



================================================
FILE: packages/create-puck-app/package.json
================================================
{
  "name": "create-puck-app",
  "version": "0.19.1",
  "author": "Chris Villa <chris@puckeditor.com>",
  "repository": "measuredco/puck",
  "bugs": "https://github.com/measuredco/puck/issues",
  "homepage": "https://puckeditor.com",
  "private": false,
  "license": "MIT",
  "type": "module",
  "bin": {
    "create-puck-app": "./index.js"
  },
  "files": [
    "templates",
    "index.js"
  ],
  "scripts": {
    "generate": "node scripts/generate.js",
    "prepublishOnly": "yarn generate",
    "removeGitignore": "mv templates/.gitignore templates/gitignore",
    "restoreGitignore": "mv templates/gitignore templates/.gitignore"
  },
  "dependencies": {
    "commander": "^10.0.1",
    "glob": "^10.3.4",
    "handlebars": "^4.7.7",
    "inquirer": "^9.2.7",
    "prettier": "^2.8.8"
  }
}



================================================
FILE: packages/create-puck-app/scripts/generate.js
================================================
#!/usr/bin/env node

import fs from "fs";
import path from "path";
import { glob } from "glob";
import { dirname } from "path";
import { fileURLToPath } from "url";

const verbose = false;

const run = async () => {
  const __filename = fileURLToPath(import.meta.url);
  const __dirname = dirname(__filename);

  // Copy template files to the new directory
  const recipePath = path.join(__dirname, "../../../recipes");
  const templatePath = path.join(__dirname, "../templates");

  if (!fs.existsSync(recipePath)) {
    console.error(`No recipe directory could be found at ${recipePath}.`);
    return;
  }

  if (!fs.existsSync(templatePath)) {
    console.error(`No template directory could be found at ${templatePath}.`);
    return;
  }

  // Copy recipe files
  const recipeFiles = glob.sync(`**/*`, {
    cwd: recipePath,
    nodir: true,
    dot: true,
  });

  console.warn(
    `⚠️   The following files use handlebars templates. Please manually update them:`
  );

  let counter = 0;

  for (const recipeFile of recipeFiles) {
    const filePath = path.join(recipePath, recipeFile);

    const targetPath = filePath.replace(recipePath, templatePath);

    // Don't copy file if it's templated by handlebars
    if (fs.existsSync(`${targetPath}.hbs`)) {
      console.warn(`- ${recipeFile}`);
    } else {
      if (verbose) {
        console.log(`Copying ${filePath} -> ${targetPath}`);
      }

      const data = await fs.readFileSync(filePath, "utf-8");

      const dir = path.dirname(targetPath);

      await fs.mkdirSync(dir, { recursive: true });

      await fs.writeFileSync(targetPath, data);

      if (targetPath.indexOf(".gitignore") > -1) {
        await fs.copyFileSync(
          filePath,
          targetPath.replace(".gitignore", "gitignore") // rename .gitignore to gitignore so NPM publish doesn't ignore it
        );
      }

      counter += 1;
    }
  }

  console.log(`Copied ${counter} files into generator!`);
};

await run();



================================================
FILE: packages/create-puck-app/templates/.gitignore
================================================
# # Ignore everything
*.*

# # Explicitly ignore gitignore without extension
gitignore

# # Except for handlebars files
!*.hbs



================================================
FILE: packages/create-puck-app/templates/next/package.json.hbs
================================================
{
  "name": "{{appName}}",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@measured/puck": "{{puckVersion}}",
    "classnames": "^2.3.2",
    "next": "^15.2.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@types/node": "^17.0.12",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "eslint-config-custom": "*",
    "typescript": "^5.5.4"
  }
}



================================================
FILE: packages/create-puck-app/templates/react-router/package.json.hbs
================================================
{
  "name": "{{appName}}",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "react-router build",
    "dev": "react-router dev",
    "start": "react-router-serve ./build/server/index.js",
    "typecheck": "react-router typegen && tsc"
  },
  "dependencies": {
    "@measured/puck": "{{puckVersion}}",
    "@react-router/node": "^7.5.3",
    "@react-router/serve": "^7.5.3",
    "isbot": "^5",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "react-router": "^7.5.3"
  },
  "devDependencies": {
    "@react-router/dev": "^7.5.3",
    "@types/node": "^20",
    "@types/react": "^19.1.2",
    "@types/react-dom": "^19.1.2",
    "typescript": "^5.8.3",
    "vite": "^6.3.3",
    "vite-tsconfig-paths": "^5.1.4"
  },
  "engines": {
    "node": ">=20.0.0"
  }
}



================================================
FILE: packages/create-puck-app/templates/react-router/tsconfig.json.hbs
================================================
{
  "include": [
    "**/*",
    "**/.server/**/*",
    "**/.client/**/*",
    ".react-router/types/**/*"
  ],
  "compilerOptions": {
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "types": ["node", "vite/client"],
    "target": "ES2022",
    "module": "ES2022",
    "moduleResolution": "bundler",
    "jsx": "react-jsx",
    "rootDirs": [".", "./.react-router/types"],
    "baseUrl": ".",
    "paths": {
      "~/*": ["./app/*"]
    },
    "esModuleInterop": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true
  }
}



================================================
FILE: packages/create-puck-app/templates/remix/package.json.hbs
================================================
{
  "name": "{{appName}}",
  "version": "1.0.0",
  "private": true,
  "sideEffects": false,
  "type": "module",
  "scripts": {
    "build": "remix build",
    "dev": "remix dev --manual",
    "start": "remix-serve ./build/index.js",
    "typecheck": "tsc"
  },
  "dependencies": {
    "@measured/puck": "{{puckVersion}}",
    "@remix-run/css-bundle": "^2.2.0",
    "@remix-run/node": "^2.2.0",
    "@remix-run/react": "^2.2.0",
    "@remix-run/serve": "^2.2.0",
    "isbot": "^3.6.8",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@remix-run/dev": "^2.2.0",
    "@remix-run/eslint-config": "^2.2.0",
    "@types/react": "^18.2.20",
    "@types/react-dom": "^18.2.7",
    "eslint": "^8.38.0",
    "typescript": "^5.1.6"
  },
  "engines": {
    "node": ">=20.0.0"
  }
}



================================================
FILE: packages/eslint-config-custom/index.js
================================================
module.exports = {
  extends: ["next", "turbo", "prettier"],
  rules: {
    "@next/next/no-html-link-for-pages": "off",
  },
  parserOptions: {
    babelOptions: {
      presets: [],
    },
  },
};



================================================
FILE: packages/eslint-config-custom/package.json
================================================
{
  "name": "eslint-config-custom",
  "version": "0.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "eslint-config-next": "^13.4.1",
    "eslint-config-prettier": "^8.3.0",
    "eslint-plugin-react": "7.28.0",
    "eslint-config-turbo": "^2.3.3"
  },
  "publishConfig": {
    "access": "public"
  }
}



================================================
FILE: packages/field-contentful/README.md
================================================
# field-contentful

Select [entries](https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/entries) from a [Contentful](https://www.contentful.com) space.

## Quick start

```sh
npm i @measured/puck-field-contentful
```

```jsx
import createFieldContentful from "@measured/puck-field-contentful";

const config = {
  components: {
    Example: {
      fields: {
        movie: createFieldContentful("movies", {
          space: "my_space",
          accessToken: "abcdefg123456",
        }),
      },
      render: ({ data }) => {
        return <p>{data?.fields.title || "No data selected"}</p>;
      },
    },
  },
};
```

## Args

| Param                         | Example  | Type   | Status   |
| ----------------------------- | -------- | ------ | -------- |
| [`contentType`](#contenttype) | `movies` | String | Required |
| [`options`](#options)         | `{}`     | Object | Required |

### Required args

#### `contentType`

ID of the Contentful [Content Type](https://www.contentful.com/help/content-model-and-content-type/) to query.

#### `options`

| Param                                      | Example                                 | Type                                                            | Status                         |
| ------------------------------------------ | --------------------------------------- | --------------------------------------------------------------- | ------------------------------ |
| [`accessToken`](#optionsaccesstoken)       | `"abc123"`                              | String                                                          | Required (unless using client) |
| [`space`](#optionsspace)                   | `"my-space"`                            | String                                                          | Required (unless using client) |
| [`client`](#optionsclient)                 | `createClient()`                        | [ContentfulClientApi](https://www.npmjs.com/package/contentful) | -                              |
| [`filterFields`](#optionsfilterfields)     | `{ "rating[gte]": { type: "number" } }` | Object                                                          | -                              |
| [`initialFilters`](#optionsinitialfilters) | `{ "rating[gte]": 1 }`                  | Object                                                          | -                              |
| [`titleField`](#optionstitlefield)         | `"name"`                                | String                                                          | -                              |

##### `options.accessToken`

Your Contentful access token.

##### `options.space`

The id for the Contentful space that contains your content.

##### `options.client`

A Contentful client as created by the [`contentful` Node.js package](https://www.npmjs.com/package/contentful). You can use this instead of `accessToken` and `space` if you want to reuse your client, or customise it more fully.

##### `options.filterFields`

An object describing which [`filterFields`](https://puckeditor.com/docs/api-reference/fields/external#filterfields) to render and pass the result directly to Contentful as [search parameters](https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters).

```jsx
createFieldContentful("movies", {
  // ...
  filterFields: {
    // Filter the "rating" field by value greater than the user input
    "fields.rating[gte]": {
      type: "number",
    },
  },
});
```

##### `options.initialFilters`

The initial values for the filters defined in [`filterFields`](#optionsfilterfields). This data is passed directly directly to Contentful as [search parameters](https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters).

```jsx
createFieldContentful("movies", {
  // ...
  initialFilters: {
    "fields.rating[gte]": 1,
    select: "name,rating", // Can include search parameters not included in filterFields
  },
});
```

##### `options.titleField`

The field to use as the title for the selected item. Defaults to `"title"`.

```jsx
createFieldContentful("movies", {
  // ...
  titleField: "name",
});
```

## Returns

An [External field](https://puckeditor.com/docs/api-reference/fields/external) type that loads Contentful [entries](https://contentful.github.io/contentful.js/contentful/10.6.16/types/Entry.html).

## TypeScript

You can use the `Entry` type for data loaded via Contentful:

```tsx
import createFieldContentful, { Entry } from "@/field-contentful";

type MyProps = {
  Example: {
    movie: Entry<{ title: string; description: string; rating: number }>;
  };
};

const config: Config<MyProps> = {
  // ...
};
```

## License

MIT © [The Puck Contributors](https://github.com/measuredco/puck/graphs/contributors)



================================================
FILE: packages/field-contentful/index.ts
================================================
import { ExternalField } from "@/core/types";

import { BaseEntry, ContentfulClientApi, createClient } from "contentful";

export { createClient };

export type Entry<Fields extends Record<string, any> = {}> = BaseEntry & {
  fields: Fields;
};

export function createFieldContentful<T extends Entry = Entry>(
  contentType: string,
  options: {
    client?: ContentfulClientApi<undefined>;
    space?: string;
    accessToken?: string;
    titleField?: string;
    filterFields?: ExternalField["filterFields"];
    initialFilters?: ExternalField["initialFilters"];
  } = {}
) {
  const {
    space,
    accessToken,
    titleField = "title",
    filterFields,
    initialFilters,
  } = options;

  if (!options.client) {
    if (!space || !accessToken) {
      throw new Error(
        'field-contentful: Must either specify "client", or "space" and "accessToken"'
      );
    }
  }

  const client =
    options.client ||
    createClient({ space: space!, accessToken: accessToken! });

  const field: ExternalField<T> = {
    type: "external",
    placeholder: "Select from Contentful",
    showSearch: true,
    fetchList: async ({ query, filters = {} }) => {
      const entries = await client.getEntries({
        ...filters,
        content_type: contentType,
        query,
      });

      return entries.items;
    },
    mapRow: ({ fields }) => fields,
    getItemSummary: (item) =>
      item.fields[titleField as keyof typeof item.fields],
    filterFields,
    initialFilters,
  };

  return field;
}

export default createFieldContentful;



================================================
FILE: packages/field-contentful/package.json
================================================
{
  "name": "@measured/puck-field-contentful",
  "version": "0.19.1",
  "author": "Chris Villa <chris@puckeditor.com>",
  "repository": "measuredco/puck",
  "bugs": "https://github.com/measuredco/puck/issues",
  "homepage": "https://puckeditor.com",
  "private": false,
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    "import": "./dist/index.mjs",
    "types": "./dist/index.d.ts"
  },
  "license": "MIT",
  "scripts": {
    "lint": "eslint \"**/*.ts*\"",
    "build": "rm -rf dist && tsup index.ts",
    "prepare": "yarn build"
  },
  "files": [
    "dist"
  ],
  "devDependencies": {
    "@measured/puck": "^0.19.1",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "contentful": "^10.8.6",
    "eslint": "^7.32.0",
    "eslint-config-custom": "*",
    "tsconfig": "*",
    "tsup-config": "*",
    "typescript": "^5.5.4"
  },
  "peerDependencies": {
    "contentful": "^10.0.0",
    "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
  }
}



================================================
FILE: packages/field-contentful/tsconfig.json
================================================
{
  "extends": "tsconfig/react-library.json",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"],
  "compilerOptions": {
    "paths": {
      "@/core": ["../core"],
      "@/core/*": ["../core/*"]
    }
  }
}



================================================
FILE: packages/field-contentful/tsup.config.ts
================================================
import { defineConfig } from "tsup";
import tsupconfig from "../tsup-config";

export default defineConfig(tsupconfig);



================================================
FILE: packages/plugin-emotion-cache/README.md
================================================
# plugin-emotion-cache

Inject [emotion cache](https://emotion.sh/docs/@emotion/cache) into the Puck iframe.

## Quick start

```sh
npm i @measured/puck-plugin-emotion-cache
```

```jsx
import { Puck } from "@measured/puck";
import createEmotionCache from "@measured/puck-plugin-emotion-cache";

// Create your emotion cache plugin. This example configures it for Chakra.
const chakraEmotionCache = createEmotionCache("cha");

// Render Puck
export function Page() {
  return <Puck config={config} data={data} plugins={[chakraEmotionCache]} />;
}
```

## Args

| Param         | Example | Type   | Status   |
| ------------- | ------- | ------ | -------- |
| [`key`](#key) | `cha`   | String | Required |

### Required args

#### `key`

Key to pass to Emotion's [`createCache` method](https://emotion.sh/docs/@emotion/cache#createcache).

## License

MIT © [The Puck Contributors](https://github.com/measuredco/puck/graphs/contributors)



================================================
FILE: packages/plugin-emotion-cache/index.tsx
================================================
import { Plugin } from "@/core/types";
import { useEffect, useState } from "react";

import createCache, { EmotionCache } from "@emotion/cache";
import { CacheProvider } from "@emotion/react";

const createEmotionCachePlugin = (key: string): Plugin => {
  return {
    overrides: {
      iframe: ({ children, document }) => {
        // eslint-disable-next-line react-hooks/rules-of-hooks
        const [cache, setCache] = useState<EmotionCache | null>(null);

        // eslint-disable-next-line react-hooks/rules-of-hooks
        useEffect(() => {
          // Defer until next render
          setTimeout(() => {
            if (document) {
              setCache(
                createCache({
                  key,
                  container: document.head,
                })
              );
            }
          }, 0);
        }, [document, key]);

        if (cache) {
          return <CacheProvider value={cache}>{children}</CacheProvider>;
        }

        return <>{children}</>;
      },
    },
  };
};

export default createEmotionCachePlugin;



================================================
FILE: packages/plugin-emotion-cache/package.json
================================================
{
  "name": "@measured/puck-plugin-emotion-cache",
  "version": "0.19.1",
  "author": "Chris Villa <chris@puckeditor.com>",
  "repository": "measuredco/puck",
  "bugs": "https://github.com/measuredco/puck/issues",
  "homepage": "https://puckeditor.com",
  "private": false,
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    "import": "./dist/index.mjs",
    "types": "./dist/index.d.ts"
  },
  "license": "MIT",
  "scripts": {
    "lint": "eslint \"**/*.ts*\"",
    "build": "rm -rf dist && tsup index.tsx",
    "prepare": "yarn build"
  },
  "files": [
    "dist"
  ],
  "devDependencies": {
    "@emotion/react": "^11.13.3",
    "@measured/puck": "^0.19.1",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "eslint": "^7.32.0",
    "eslint-config-custom": "*",
    "tsconfig": "*",
    "tsup": "^8.2.4",
    "tsup-config": "*",
    "typescript": "^5.5.4"
  },
  "peerDependencies": {
    "@emotion/react": "^11.0.0",
    "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
  }
}



================================================
FILE: packages/plugin-emotion-cache/tsconfig.json
================================================
{
  "extends": "tsconfig/react-library.json",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"],
  "compilerOptions": {
    "paths": {
      "@/core": ["../core"],
      "@/core/*": ["../core/*"]
    }
  }
}



================================================
FILE: packages/plugin-emotion-cache/tsup.config.ts
================================================
import { defineConfig } from "tsup";
import tsupconfig from "../tsup-config";

export default defineConfig(tsupconfig);



================================================
FILE: packages/plugin-heading-analyzer/README.md
================================================
# plugin-heading-analyzer

Visualise your heading outline structure and identify missing heading levels. Respects WCAG 2.

<img src="https://i.imgur.com/POqtgHu.jpg" alt="example" width="156px" />

## Quick start

```sh
npm i @measured/puck-plugin-heading-analyzer
```

```jsx
import { Puck } from "@measured/puck";
import headingAnalyzer from "@measured/puck-plugin-heading-analyzer";
import "@measured/puck-plugin-heading-analyzer/dist/index.css";

...

// Render Puck
export function Page() {
  return <Puck
    config={config}
    data={data}
    plugins={[
        headingAnalyzer
    ]}
  />;
}
```

## License

MIT © [The Puck Contributors](https://github.com/measuredco/puck/graphs/contributors)



================================================
FILE: packages/plugin-heading-analyzer/globals.d.ts
================================================
declare module "*.module.css";



================================================
FILE: packages/plugin-heading-analyzer/index.ts
================================================
export { default } from "./src/HeadingAnalyzer";



================================================
FILE: packages/plugin-heading-analyzer/package.json
================================================
{
  "name": "@measured/puck-plugin-heading-analyzer",
  "version": "0.19.1",
  "author": "Chris Villa <chris@puckeditor.com>",
  "repository": "measuredco/puck",
  "bugs": "https://github.com/measuredco/puck/issues",
  "homepage": "https://puckeditor.com",
  "private": false,
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "exports": {
    ".": {
      "import": "./dist/index.mjs",
      "types": "./dist/index.d.ts"
    },
    "./dist/index.css": "./dist/index.css"
  },
  "license": "MIT",
  "scripts": {
    "lint": "eslint \"**/*.ts*\"",
    "build": "rm -rf dist && tsup index.ts",
    "prepare": "yarn build"
  },
  "files": [
    "dist"
  ],
  "devDependencies": {
    "@measured/puck": "^0.19.1",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "eslint": "^7.32.0",
    "eslint-config-custom": "*",
    "tsconfig": "*",
    "tsup": "^8.2.4",
    "tsup-config": "*",
    "typescript": "^5.5.4"
  },
  "dependencies": {
    "react-from-json": "^0.8.0"
  },
  "peerDependencies": {
    "react": "^17.0.0 || ^18.0.0 || ^19.0.0"
  }
}



================================================
FILE: packages/plugin-heading-analyzer/tsconfig.json
================================================
{
  "extends": "tsconfig/react-library.json",
  "include": ["."],
  "exclude": ["dist", "build", "node_modules"],
  "compilerOptions": {
    "paths": {
      "@/core": ["../core"],
      "@/core/*": ["../core/*"]
    }
  }
}



================================================
FILE: packages/plugin-heading-analyzer/tsup.config.ts
================================================
import { defineConfig } from "tsup";
import tsupconfig from "../tsup-config";

export default defineConfig(tsupconfig);



================================================
FILE: packages/plugin-heading-analyzer/src/HeadingAnalyzer.module.css
================================================
.HeadingAnalyzer {
  display: block;
}

.HeadingAnalyzer-cssWarning {
  display: none !important;
}

.HeadingAnalyzerItem {
  display: inline;
}

.HeadingAnalyzerItem--missing {
  color: var(--puck-color-red-04);
}



================================================
FILE: packages/plugin-heading-analyzer/src/HeadingAnalyzer.tsx
================================================
import { ReactElement, useEffect, useState } from "react";

import styles from "./HeadingAnalyzer.module.css";

import { createUsePuck } from "@measured/puck";
import { Plugin } from "@/core/types";
import { SidebarSection } from "@/core/components/SidebarSection";
import { OutlineList } from "@/core/components/OutlineList";

import { scrollIntoView } from "@/core/lib/scroll-into-view";
import { getFrame } from "@/core/lib/get-frame";

import { getClassNameFactory } from "@/core/lib";

const getClassName = getClassNameFactory("HeadingAnalyzer", styles);
const getClassNameItem = getClassNameFactory("HeadingAnalyzerItem", styles);

import ReactFromJSONModule from "react-from-json";

// Synthetic import
const ReactFromJSON =
  (ReactFromJSONModule as unknown as { default: typeof ReactFromJSONModule })
    .default || ReactFromJSONModule;

const getOutline = ({ frame }: { frame?: Element | Document } = {}) => {
  const headings = frame?.querySelectorAll("h1,h2,h3,h4,h5,h6") || [];

  const _outline: {
    rank: number;
    text: string;
    element: HTMLElement;
  }[] = [];

  headings.forEach((item, i) => {
    if (item.closest("[data-dnd-dragging]")) {
      return;
    }

    _outline.push({
      rank: parseInt(item.tagName.split("H")[1]),
      text: item.textContent!,
      element: item as HTMLElement,
    });
  });

  return _outline;
};

type Block = {
  rank: number;
  text: string;
  children?: Block[];
  missing?: boolean;
  analyzeId?: string;
  element?: HTMLElement;
};

function buildHierarchy(frame: Element | Document): Block[] {
  const headings = getOutline({ frame });

  const root = { rank: 0, children: [], text: "" }; // Placeholder root node
  let path: Block[] = [root];

  for (let heading of headings) {
    const node: Block = {
      rank: heading.rank,
      text: heading.text,
      children: [],
      element: heading.element,
    };

    // When encountering an h1, reset the path to only the root
    if (node.rank === 1) {
      path = [root];
    } else {
      // Go up the path until finding a node where this heading can be a child
      while (path[path.length - 1].rank >= node.rank) {
        path.pop();
      }

      // Add missing nodes if necessary
      while (path.length < node.rank) {
        const missingNode: Block = {
          rank: path.length,
          missing: true,
          children: [],
          text: "",
        };
        path[path.length - 1].children?.push(missingNode);
        path.push(missingNode);
      }
    }

    // Add this node to its parent in the path and update path
    path[path.length - 1].children?.push(node);
    path.push(node);
  }

  return root.children;
}

const usePuck = createUsePuck();

export const HeadingAnalyzer = () => {
  const data = usePuck((s) => s.appState.data);
  const [hierarchy, setHierarchy] = useState<Block[]>([]);

  // Re-render when content changes
  useEffect(() => {
    const frame = getFrame();

    let entry = frame?.querySelector(`[data-puck-entry]`);

    const createHierarchy = () => {
      setHierarchy(buildHierarchy(entry!));
    };
    const entryObserver = new MutationObserver(() => {
      createHierarchy();
    });

    const frameObserver = new MutationObserver(() => {
      entry = frame?.querySelector(`[data-puck-entry]`);

      if (entry) {
        registerEntryObserver();
        frameObserver.disconnect();
      }
    });

    const registerEntryObserver = () => {
      if (!entry) return;
      entryObserver.observe(entry, { subtree: true, childList: true });
    };

    const registerFrameObserver = () => {
      if (!frame) return;
      frameObserver.observe(frame, { subtree: true, childList: true });
    };

    if (entry) {
      createHierarchy();
      registerEntryObserver();
    } else {
      registerFrameObserver();
    }

    return () => {
      entryObserver.disconnect();
      frameObserver.disconnect();
    };
  }, [data]);

  return (
    <div className={getClassName()}>
      <small
        className={getClassName("cssWarning")}
        style={{
          color: "var(--puck-color-red-04)",
          display: "block",
          marginBottom: 16,
        }}
      >
        Heading analyzer styles not loaded. Please review the{" "}
        <a href="https://github.com/measuredco/puck/blob/main/packages/plugin-heading-analyzer/README.md">
          README
        </a>
        .
      </small>

      {hierarchy.length === 0 && <div>No headings.</div>}

      <OutlineList>
        <ReactFromJSON<{
          Root: (props: any) => ReactElement;
          OutlineListItem: (props: any) => ReactElement;
        }>
          mapping={{
            Root: (props) => <>{props.children}</>,
            OutlineListItem: (props) => (
              <OutlineList.Item>
                <OutlineList.Clickable>
                  <small
                    className={getClassNameItem({ missing: props.missing })}
                    onClick={
                      typeof props.element == "undefined"
                        ? undefined
                        : (e) => {
                            e.stopPropagation();

                            const el = props.element;

                            const oldStyle = { ...el.style };

                            if (el) {
                              scrollIntoView(el);

                              el.style.outline =
                                "4px solid var(--puck-color-rose-06)";
                              el.style.outlineOffset = "4px";

                              setTimeout(() => {
                                el.style.outline = oldStyle.outline || "";
                                el.style.outlineOffset =
                                  oldStyle.outlineOffset || "";
                              }, 2000);
                            }
                          }
                    }
                  >
                    {props.missing ? (
                      <>
                        <b>H{props.rank}</b>: Missing
                      </>
                    ) : (
                      <>
                        <b>H{props.rank}</b>: {props.text}
                      </>
                    )}
                  </small>
                </OutlineList.Clickable>
                <OutlineList>{props.children}</OutlineList>
              </OutlineList.Item>
            ),
          }}
          entry={{
            props: { children: hierarchy },
            type: "Root",
          }}
          mapProp={(prop) => {
            if (prop && prop.rank) {
              return {
                type: "OutlineListItem",
                props: prop,
              };
            }

            return prop;
          }}
        />
      </OutlineList>
    </div>
  );
};

const headingAnalyzer: Plugin = {
  overrides: {
    fields: ({ children, itemSelector }) => (
      <>
        {children}
        <div style={{ display: itemSelector ? "none" : "block" }}>
          <SidebarSection title="Heading Outline">
            <HeadingAnalyzer />
          </SidebarSection>
        </div>
      </>
    ),
  },
};

export default headingAnalyzer;



================================================
FILE: packages/tsconfig/base.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}



================================================
FILE: packages/tsconfig/nextjs.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "allowJs": true,
    "declaration": false,
    "declarationMap": false,
    "incremental": true,
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "noEmit": true,
    "resolveJsonModule": true,
    "strict": false,
    "target": "es5"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: packages/tsconfig/package.json
================================================
{
  "name": "tsconfig",
  "version": "0.0.0",
  "private": true,
  "license": "MIT",
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "typescript-plugin-css-modules": "^5.0.1"
  }
}



================================================
FILE: packages/tsconfig/react-library.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "React Library",
  "extends": "./base.json",
  "compilerOptions": {
    "strict": true,
    "jsx": "react-jsx",
    "lib": ["ES2015", "DOM"],
    "module": "ESNext",
    "target": "es6",
    "plugins": [{ "name": "typescript-plugin-css-modules" }]
  }
}



================================================
FILE: packages/tsup-config/index.ts
================================================
import fs from "fs";
import path from "path";
import postcss from "postcss";
import postcssModules from "postcss-modules";
import type { Options } from "tsup";

const config: Options = {
  dts: true,
  format: ["cjs", "esm"],
  inject: ["../tsup-config/react-import.js"],
  external: [
    "react",
    "react-dom",
    "@measured/puck",
    "@dnd-kit/react",
    "@dnd-kit/dom",
    "@dnd-kit/abstract",
    "@dnd-kit/state",
    "@dnd-kit/geometry",
    "@dnd-kit/utilities",
  ],
  esbuildPlugins: [
    {
      name: "css-module",
      setup(build): void {
        build.onResolve(
          { filter: /\.module\.css$/, namespace: "file" },
          (args) => ({
            path: `${path.join(args.resolveDir, args.path)}#css-module`,
            namespace: "css-module",
            pluginData: {
              pathDir: path.join(args.resolveDir, args.path),
            },
          })
        );
        build.onLoad(
          { filter: /#css-module$/, namespace: "css-module" },
          async (args) => {
            const { pluginData } = args as {
              pluginData: { pathDir: string };
            };

            const source = fs.readFileSync(pluginData.pathDir, "utf8");

            let cssModule = {};
            const result = await postcss([
              postcssModules({
                getJSON(_, json) {
                  cssModule = json;
                },
              }),
            ]).process(source, { from: pluginData.pathDir });

            return {
              pluginData: { css: result.css },
              contents: `import "${
                pluginData.pathDir
              }"; export default ${JSON.stringify(cssModule)}`,
            };
          }
        );
        build.onResolve(
          { filter: /\.module\.css$/, namespace: "css-module" },
          (args) => ({
            path: path.join(args.resolveDir, args.path, "#css-module-data"),
            namespace: "css-module",
            pluginData: args.pluginData as { css: string },
          })
        );
        build.onLoad(
          { filter: /#css-module-data$/, namespace: "css-module" },
          (args) => ({
            contents: (args.pluginData as { css: string }).css,
            loader: "css",
          })
        );
      },
    },
  ],
};

export default config;



================================================
FILE: packages/tsup-config/package.json
================================================
{
  "name": "tsup-config",
  "version": "0.0.0",
  "private": true,
  "license": "MIT",
  "publishConfig": {
    "access": "public"
  },
  "dependencies": {
    "tsconfig": "*",
    "tsup": "^8.2.4",
    "typescript": "^5.5.4",
    "postcss": "^8.4.24",
    "postcss-modules": "^6.0.0"
  }
}



================================================
FILE: packages/tsup-config/react-import.js
================================================
// react-import.js
import React from "react";

export { React };



================================================
FILE: recipes/next/README.md
================================================
# `next` recipe

The `next` recipe showcases one of the most powerful ways to implement Puck using to provide an authoring tool for any route in your Next app.

## Demonstrates

- Next.js App Router implementation
- JSON database implementation with HTTP API
- Catch-all routes to use puck for any route on the platform
- Incremental static regeneration (ISR) for all Puck pages

## Usage

Run the generator and enter `next` when prompted

```
npx create-puck-app my-app
```

Start the server

```
yarn dev
```

Navigate to the homepage at https://localhost:3000. To edit the homepage, access the Puck editor at https://localhost:3000/edit.

You can do this for any route on the application, **even if the page doesn't exist**. For example, visit https://localhost:3000/hello/world and you'll receive a 404. You can author and publish a page by visiting https://localhost:3000/hello/world/edit. After publishing, go back to the original URL to see your page.

## Using this recipe

To adopt this recipe you will need to:

- **IMPORTANT** Add authentication to `/edit` routes. This can be done by modifying the example API routes in `/app/puck/api/route.ts` and server component in `/app/puck/[...puckPath]/page.tsx`. **If you don't do this, Puck will be completely public.**
- Integrate your database into the API calls in `/app/puck/api/route.ts`
- Implement a custom puck configuration in `puck.config.tsx`

By default, this recipe will generate static pages by setting `dynamic` to [`force-static`](https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic) in the `/app/[...puckPath]/page.tsx`. This will strip headers and cookies. If you need dynamic pages, you can delete this.



================================================
FILE: recipes/next/database.json
================================================
{"/":{"content":[{"type":"HeadingBlock","props":{"title":"Edit this page by adding /edit to the end of the URL","id":"HeadingBlock-1694032984497"}}],"root":{"props": {"title":""}}}}


================================================
FILE: recipes/next/middleware.ts
================================================
import { NextResponse } from "next/server";

import type { NextRequest } from "next/server";

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();

  if (req.method === "GET") {
    // Rewrite routes that match "/[...puckPath]/edit" to "/puck/[...puckPath]"
    if (req.nextUrl.pathname.endsWith("/edit")) {
      const pathWithoutEdit = req.nextUrl.pathname.slice(
        0,
        req.nextUrl.pathname.length - 5
      );
      const pathWithEditPrefix = `/puck${pathWithoutEdit}`;

      return NextResponse.rewrite(new URL(pathWithEditPrefix, req.url));
    }

    // Disable "/puck/[...puckPath]"
    if (req.nextUrl.pathname.startsWith("/puck")) {
      return NextResponse.redirect(new URL("/", req.url));
    }
  }

  return res;
}



================================================
FILE: recipes/next/next-env.d.ts
================================================
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================
FILE: recipes/next/next.config.js
================================================
module.exports = {
  reactStrictMode: true,
};



================================================
FILE: recipes/next/package.json
================================================
{
  "name": "next-recipe",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@measured/puck": "*",
    "classnames": "^2.3.2",
    "next": "^15.2.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@types/node": "^17.0.12",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "eslint-config-custom": "*",
    "typescript": "^5.5.4"
  }
}



================================================
FILE: recipes/next/puck.config.tsx
================================================
import type { Config } from "@measured/puck";

type Props = {
  HeadingBlock: { title: string };
};

export const config: Config<Props> = {
  components: {
    HeadingBlock: {
      fields: {
        title: { type: "text" },
      },
      defaultProps: {
        title: "Heading",
      },
      render: ({ title }) => (
        <div style={{ padding: 64 }}>
          <h1>{title}</h1>
        </div>
      ),
    },
  },
};

export default config;



================================================
FILE: recipes/next/tsconfig.json
================================================
{
  "extends": "./tsconfig/nextjs.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: recipes/next/.eslintrc.js
================================================
module.exports = {
  root: true,
  extends: ["custom"],
};



================================================
FILE: recipes/next/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel



================================================
FILE: recipes/next/app/layout.tsx
================================================
import "./styles.css";

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      <body>{children}</body>
    </html>
  );
}



================================================
FILE: recipes/next/app/page.tsx
================================================
export { default, generateMetadata } from "./[...puckPath]/page";



================================================
FILE: recipes/next/app/styles.css
================================================
body {
  margin: 0;
}



================================================
FILE: recipes/next/app/[...puckPath]/client.tsx
================================================
"use client";

import type { Data } from "@measured/puck";
import { Render } from "@measured/puck";
import config from "../../puck.config";

export function Client({ data }: { data: Data }) {
  return <Render config={config} data={data} />;
}



================================================
FILE: recipes/next/app/[...puckPath]/page.tsx
================================================
/**
 * This file implements a catch-all route that renders the user-facing pages
 * generated by Puck. For any route visited (with exception of other hardcoded
 * pages in /app), it will check your database (via `getPage`) for a Puck page
 * and render it using <Render>.
 *
 * All routes produced by this page are statically rendered using incremental
 * static site generation. After the first visit, the page will be cached as
 * a static file. Subsequent visits will receive the cache. Publishing a page
 * will invalidate the cache as the page is written in /api/puck/route.ts
 */

import { Client } from "./client";
import { notFound } from "next/navigation";
import { Metadata } from "next";
import { getPage } from "../../lib/get-page";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}): Promise<Metadata> {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;

  return {
    title: getPage(path)?.root.props?.title,
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}) {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;
  const data = getPage(path);

  if (!data) {
    return notFound();
  }

  return <Client data={data} />;
}

// Force Next.js to produce static pages: https://nextjs.org/docs/app/api-reference/file-conventions/route-segment-config#dynamic
// Delete this if you need dynamic rendering, such as access to headers or cookies
export const dynamic = "force-static";



================================================
FILE: recipes/next/app/puck/page.tsx
================================================
export { default, generateMetadata, dynamic } from "./[...puckPath]/page";



================================================
FILE: recipes/next/app/puck/[...puckPath]/client.tsx
================================================
"use client";

import type { Data } from "@measured/puck";
import { Puck } from "@measured/puck";
import config from "../../../puck.config";

export function Client({ path, data }: { path: string; data: Partial<Data> }) {
  return (
    <Puck
      config={config}
      data={data}
      onPublish={async (data) => {
        await fetch("/puck/api", {
          method: "post",
          body: JSON.stringify({ data, path }),
        });
      }}
    />
  );
}



================================================
FILE: recipes/next/app/puck/[...puckPath]/page.tsx
================================================
/**
 * This file implements a *magic* catch-all route that renders the Puck editor.
 *
 * This route exposes /puck/[...puckPath], but is disabled by middleware.ts. The middleware
 * then rewrites all URL requests ending in `/edit` to this route, allowing you to visit any
 * page in your application and add /edit to the end to spin up a Puck editor.
 *
 * This approach enables public pages to be statically rendered whilst the /puck route can
 * remain dynamic.
 *
 * NB this route is public, and you will need to add authentication
 */

import "@measured/puck/puck.css";
import { Client } from "./client";
import { Metadata } from "next";
import { getPage } from "../../../lib/get-page";

export async function generateMetadata({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}): Promise<Metadata> {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;

  return {
    title: "Puck: " + path,
  };
}

export default async function Page({
  params,
}: {
  params: Promise<{ puckPath: string[] }>;
}) {
  const { puckPath = [] } = await params;
  const path = `/${puckPath.join("/")}`;
  const data = getPage(path);

  return <Client path={path} data={data || {}} />;
}

export const dynamic = "force-dynamic";



================================================
FILE: recipes/next/app/puck/api/route.ts
================================================
import { revalidatePath } from "next/cache";
import { NextResponse } from "next/server";
import fs from "fs";

export async function POST(request: Request) {
  const payload = await request.json();

  const existingData = JSON.parse(
    fs.existsSync("database.json")
      ? fs.readFileSync("database.json", "utf-8")
      : "{}"
  );

  const updatedData = {
    ...existingData,
    [payload.path]: payload.data,
  };

  fs.writeFileSync("database.json", JSON.stringify(updatedData));

  // Purge Next.js cache
  revalidatePath(payload.path);

  return NextResponse.json({ status: "ok" });
}



================================================
FILE: recipes/next/lib/get-page.ts
================================================
import { Data } from "@measured/puck";
import fs from "fs";

// Replace with call to your database
export const getPage = (path: string) => {
  const allData: Record<string, Data> | null = fs.existsSync("database.json")
    ? JSON.parse(fs.readFileSync("database.json", "utf-8"))
    : null;

  return allData ? allData[path] : null;
};



================================================
FILE: recipes/next/tsconfig/base.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Default",
  "compilerOptions": {
    "composite": false,
    "declaration": true,
    "declarationMap": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "inlineSources": false,
    "isolatedModules": true,
    "moduleResolution": "node",
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "preserveWatchOutput": true,
    "skipLibCheck": true,
    "strict": true
  },
  "exclude": ["node_modules"]
}



================================================
FILE: recipes/next/tsconfig/nextjs.json
================================================
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "display": "Next.js",
  "extends": "./base.json",
  "compilerOptions": {
    "plugins": [{ "name": "next" }],
    "allowJs": true,
    "declaration": false,
    "declarationMap": false,
    "incremental": true,
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "module": "esnext",
    "noEmit": true,
    "resolveJsonModule": true,
    "strict": false,
    "target": "es5"
  },
  "include": ["src", "next-env.d.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: recipes/react-router/README.md
================================================
# `react-router` recipe

The `react-router` recipe showcases one of the most powerful ways to implement Puck using to provide an authoring tool for any route in your React Router app.

## Demonstrates

- React Router v7 (framework) implementation
- JSON database implementation
- Splat route to use puck for any route on the platform

## Usage

Run the generator and enter `react-router` when prompted

```
npx create-puck-app my-app
```

Start the server

```
yarn dev
```

Navigate to the homepage at http://localhost:5173/. To edit the homepage, access the Puck editor at http://localhost:5173/edit.

You can do this for any **base** route on the application, **even if the page doesn't exist**. For example, visit http://localhost:5173/hello-world and you'll receive a 404. You can author and publish a page by visiting http://localhost:5173/hello-world/edit. After publishing, go back to the original URL to see your page.

## Using this recipe

To adopt this recipe, you will need to:

- **IMPORTANT** Add authentication to `/edit` routes. This can be done by modifying the [route module action](https://reactrouter.com/start/framework/route-module#action) in the splat route `/app/routes/puck-splat.tsx`. **If you don't do this, Puck will be completely public.**
- Integrate your database into the functions in `/lib/pages.server.ts`
- Implement a custom puck configuration in `/app/puck.config.tsx`



================================================
FILE: recipes/react-router/database.json
================================================
{"/":{"content":[{"type":"HeadingBlock","props":{"title":"Edit this page by adding /edit to the end of the URL","id":"HeadingBlock-1694032984497"}}],"root":{"props":{"title":"Puck + React Router 7 demo"}},"zones":{}}}


================================================
FILE: recipes/react-router/package.json
================================================
{
  "name": "react-router-recipe",
  "private": true,
  "type": "module",
  "version": "1.0.0",
  "scripts": {
    "build": "react-router build",
    "dev": "react-router dev",
    "start": "react-router-serve ./build/server/index.js",
    "typecheck": "react-router typegen && tsc"
  },
  "dependencies": {
    "@measured/puck": "*",
    "@react-router/node": "^7.5.3",
    "@react-router/serve": "^7.5.3",
    "isbot": "^5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router": "^7.5.3"
  },
  "devDependencies": {
    "@react-router/dev": "^7.5.3",
    "@types/node": "^20",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "typescript": "^5.8.3",
    "vite": "^6.3.3",
    "vite-tsconfig-paths": "^5.1.4"
  },
  "engines": {
    "node": ">=20.0.0"
  }
}



================================================
FILE: recipes/react-router/puck.config.tsx
================================================
import type { Config } from "@measured/puck";

type Props = {
  HeadingBlock: { title: string };
};

export const config: Config<Props> = {
  components: {
    HeadingBlock: {
      fields: {
        title: { type: "text" },
      },
      defaultProps: {
        title: "Heading",
      },
      render: ({ title }) => (
        <div style={{ padding: 64 }}>
          <h1>{title}</h1>
        </div>
      ),
    },
  },
};



================================================
FILE: recipes/react-router/react-router.config.ts
================================================
import type { Config } from "@react-router/dev/config";

export default {
  // Config options...
  // Server-side render by default, to enable SPA mode set this to `false`
  ssr: true,
} satisfies Config;



================================================
FILE: recipes/react-router/tsconfig.json
================================================
{
  "include": [
    "**/*",
    "**/.server/**/*",
    "**/.client/**/*",
    ".react-router/types/**/*"
  ],
  "compilerOptions": {
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "types": ["node", "vite/client"],
    "target": "ES2022",
    "module": "ES2022",
    "moduleResolution": "bundler",
    "jsx": "react-jsx",
    "rootDirs": [".", "./.react-router/types"],
    "baseUrl": ".",
    "paths": {
      "~/*": ["./app/*"],
      "@measured/puck": ["../../packages/core/index.ts"],
      "@measured/puck/puck.css": ["../../packages/core/styles.css"]
    },
    "esModuleInterop": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true
  }
}



================================================
FILE: recipes/react-router/vite.config.ts
================================================
import { reactRouter } from "@react-router/dev/vite";
import { defineConfig } from "vite";
import tsconfigPaths from "vite-tsconfig-paths";

export default defineConfig({
  plugins: [reactRouter(), tsconfigPaths()],
});



================================================
FILE: recipes/react-router/.gitignore
================================================
.DS_Store
/node_modules/

# React Router
/.react-router/
/build/



================================================
FILE: recipes/react-router/app/root.tsx
================================================
import {
  isRouteErrorResponse,
  Links,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "react-router";

import type { Route } from "./+types/root";

export function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body>
        {children}
        <ScrollRestoration />
        <Scripts />
      </body>
    </html>
  );
}

export default function App() {
  return <Outlet />;
}

export function ErrorBoundary({ error }: Route.ErrorBoundaryProps) {
  let message = "Oops!";
  let details = "An unexpected error occurred.";
  let stack: string | undefined;

  if (isRouteErrorResponse(error)) {
    message = error.status === 404 ? "404" : "Error";
    details =
      error.status === 404
        ? "The requested page could not be found."
        : error.statusText || details;
  } else if (
    import.meta.env.NODE_ENV !== "production" &&
    error &&
    error instanceof Error
  ) {
    details = error.message;
    stack = error.stack;
  }

  return (
    <main>
      <h1>{message}</h1>
      <p>{details}</p>
      {stack && (
        <pre>
          <code>{stack}</code>
        </pre>
      )}
    </main>
  );
}



================================================
FILE: recipes/react-router/app/routes.ts
================================================
import type { RouteConfig } from "@react-router/dev/routes";
import { route, index } from "@react-router/dev/routes";

export default [
  index("routes/_index.tsx"),
  route("*", "routes/puck-splat.tsx"),
] satisfies RouteConfig;



================================================
FILE: recipes/react-router/app/components/puck-render.tsx
================================================
import type { Data } from "@measured/puck";
import { Render } from "@measured/puck";

import { config } from "../../puck.config";

export function PuckRender({ data }: { data: Data }) {
  return <Render config={config} data={data} />;
}



================================================
FILE: recipes/react-router/app/lib/pages.server.ts
================================================
import path from "path";
import { fileURLToPath } from "url";
import fs from "fs/promises";
import type { Data } from "@measured/puck";

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const databasePath = path.join(__dirname, "..", "..", "database.json");

export async function getPage(path: string) {
  const pages = await readDatabase();
  return pages[path];
}

export async function savePage(path: string, data: Data) {
  const pages = await readDatabase();
  pages[path] = data;
  await fs.writeFile(databasePath, JSON.stringify(pages), { encoding: "utf8" });
}

async function readDatabase() {
  try {
    const file = await fs.readFile(databasePath, "utf8");
    return JSON.parse(file) as Record<string, Data>;
  } catch (error: unknown) {
    console.error(error);
    return {};
  }
}



================================================
FILE: recipes/react-router/app/lib/resolve-puck-path.server.ts
================================================
export function resolvePuckPath(
  path = "",
  // `base` can be any valid origin, it is required for the URL constructor so
  // we can return a pathname - you can change this if you want, but it isn't
  // important
  base = "https://placeholder.com/"
) {
  const url = new URL(path, base);
  const segments = url.pathname.split("/");
  const isEditorRoute = segments.at(-1) === "edit";
  const pathname = isEditorRoute
    ? segments.slice(0, -1).join("/")
    : url.pathname;

  return {
    isEditorRoute,
    path: new URL(pathname, base).pathname,
  };
}



================================================
FILE: recipes/react-router/app/routes/_index.tsx
================================================
import type { Route } from "./+types/_index";
import { PuckRender } from "~/components/puck-render";
import { resolvePuckPath } from "~/lib/resolve-puck-path.server";
import { getPage } from "~/lib/pages.server";

export async function loader() {
  const { isEditorRoute, path } = resolvePuckPath("/");
  let page = await getPage(path);

  if (!page) {
    throw new Response("Not Found", { status: 404 });
  }

  return {
    isEditorRoute,
    path,
    data: page,
  };
}

export function meta({ data: loaderData }: Route.MetaArgs) {
  return [
    {
      title: loaderData.data.root.title,
    },
  ];
}

export default function PuckSplatRoute({ loaderData }: Route.ComponentProps) {
  return <PuckRender data={loaderData.data} />;
}



================================================
FILE: recipes/react-router/app/routes/puck-splat.tsx
================================================
import { useFetcher, useLoaderData } from "react-router";
import type { Data } from "@measured/puck";
import { Puck, Render } from "@measured/puck";

import type { Route } from "./+types/puck-splat";
import { config } from "../../puck.config";
import { resolvePuckPath } from "~/lib/resolve-puck-path.server";
import { getPage, savePage } from "~/lib/pages.server";
import editorStyles from "@measured/puck/puck.css?url";

export async function loader({ params }: Route.LoaderArgs) {
  const pathname = params["*"] ?? "/";
  const { isEditorRoute, path } = resolvePuckPath(pathname);
  let page = await getPage(path);

  // Throw a 404 if we're not rendering the editor and data for the page does not exist
  if (!isEditorRoute && !page) {
    throw new Response("Not Found", { status: 404 });
  }

  // Empty shell for new pages
  if (isEditorRoute && !page) {
    page = {
      content: [],
      root: {
        props: {
          title: "",
        },
      },
    };
  }

  return {
    isEditorRoute,
    path,
    data: page,
  };
}

export function meta({ data: loaderData }: Route.MetaArgs) {
  return [
    {
      title: loaderData.isEditorRoute
        ? `Edit: ${loaderData.path}`
        : loaderData.data.root.title,
    },
  ];
}

export async function action({ params, request }: Route.ActionArgs) {
  const pathname = params["*"] ?? "/";
  const { path } = resolvePuckPath(pathname);
  const body = (await request.json()) as { data: Data };

  await savePage(path, body.data);
}

function Editor() {
  const loaderData = useLoaderData<typeof loader>();
  const fetcher = useFetcher<typeof action>();

  return (
    <>
      <link rel="stylesheet" href={editorStyles} id="puck-css" />
      <Puck
        config={config}
        data={loaderData.data}
        onPublish={async (data) => {
          await fetcher.submit(
            {
              data,
            },
            {
              action: "",
              method: "post",
              encType: "application/json",
            }
          );
        }}
      />
    </>
  );
}

export default function PuckSplatRoute({ loaderData }: Route.ComponentProps) {
  return (
    <div>
      {loaderData.isEditorRoute ? (
        <Editor />
      ) : (
        <Render config={config} data={loaderData.data} />
      )}
    </div>
  );
}




================================================
FILE: recipes/remix/README.md
================================================
# `remix` recipe

The `remix` recipe showcases a Remix Run app with Puck, using it to provide an authoring tool for any root-level route in your Remix app.

## Demonstrates

- Remix Run V2 implementation
- JSON database implementation with HTTP API
- Dynamic routes to use puck for any root-level route on the platform
- Option to disable client-side JavaScript for Puck pages

## Usage

Run the generator and enter `next` when prompted

```
npx create-puck-app my-app
```

Start the server

```
yarn dev
```

Navigate to the homepage at https://localhost:3000. To edit the homepage, access the Puck editor at https://localhost:3000/edit.

You can do this for any **base** route on the application, **even if the page doesn't exist**. For example, visit https://localhost:3000/hello-world and you'll receive a 404. You can author and publish a page by visiting https://localhost:3000/hello-world/edit. After publishing, go back to the original URL to see your page.

## Using this recipe

To adopt this recipe you will need to:

- **IMPORTANT** Add authentication to `/edit` routes. This can be done by modifying the example routes `/app/routes/_index.tsx` and `/app/routes/edit.tsx` or the example model in `/app/models/page.server.ts`. **If you don't do this, Puck will be completely public.**
- Integrate your database into the API calls in `/app/models/page.server.ts`
- Implement a custom puck configuration in `/app/puck.config.tsx`

By default, this recipe will have JavaScript enable on all routes - like a usual react app. If you know that your Puck content doesn't need react, then you can disable JS uncommenting the relevant code in `/app/root.tsx` and the example route `/app/routes/_index.tsx`. Check the network tab for no JS downloads, and verify that the page still works.

## Disabling JavaScript

This recipe can be adapted to disable JavaScript. See the [Remix docs](https://remix.run/docs/en/main/guides/disabling-javascript) for steps on how to do this.



================================================
FILE: recipes/remix/database.json
================================================
{"/":{"content":[{"type":"HeadingBlock","props":{"title":"Edit this page by adding /edit to the end of the URL","id":"HeadingBlock-1694032984497"}}],"root":{"props": {"title":""}}}}


================================================
FILE: recipes/remix/package.json
================================================
{
  "name": "remix-recipe",
  "version": "1.0.0",
  "private": true,
  "sideEffects": false,
  "type": "module",
  "scripts": {
    "build": "remix build",
    "dev": "remix dev --manual",
    "start": "remix-serve ./build/index.js",
    "typecheck": "tsc"
  },
  "dependencies": {
    "@measured/puck": "*",
    "@remix-run/css-bundle": "^2.2.0",
    "@remix-run/node": "^2.2.0",
    "@remix-run/react": "^2.2.0",
    "@remix-run/serve": "^2.2.0",
    "isbot": "^3.6.8",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@remix-run/dev": "^2.2.0",
    "@remix-run/eslint-config": "^2.2.0",
    "@types/react": "^18.2.20",
    "@types/react-dom": "^18.2.7",
    "eslint": "^8.38.0",
    "typescript": "^5.1.6"
  },
  "engines": {
    "node": ">=20.0.0"
  }
}



================================================
FILE: recipes/remix/remix.config.js
================================================
/** @type {import('@remix-run/dev').AppConfig} */
export default {
  ignoredRouteFiles: ["**/.*"],
  // appDirectory: "app",
  // assetsBuildDirectory: "public/build",
  // publicPath: "/build/",
  // serverBuildPath: "build/index.js",
  /**
   * @see https://github.com/measuredco/puck/issues/112
   */
  browserNodeBuiltinsPolyfill: { modules: { crypto: true } },
};



================================================
FILE: recipes/remix/remix.env.d.ts
================================================
/// <reference types="@remix-run/dev" />
/// <reference types="@remix-run/node" />



================================================
FILE: recipes/remix/tsconfig.json
================================================
{
  "include": ["remix.env.d.ts", "**/*.ts", "**/*.tsx"],
  "compilerOptions": {
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "isolatedModules": true,
    "esModuleInterop": true,
    "jsx": "react-jsx",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "target": "ES2022",
    "strict": true,
    "allowJs": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "~/*": ["./app/*"]
    },

    // Remix takes care of building everything in `remix build`.
    "noEmit": true
  }
}



================================================
FILE: recipes/remix/.eslintrc.cjs
================================================
/** @type {import('eslint').Linter.Config} */
module.exports = {
  extends: ["@remix-run/eslint-config", "@remix-run/eslint-config/node"],
};



================================================
FILE: recipes/remix/.gitignore
================================================
node_modules

/.cache
/build
/public/build
.env



================================================
FILE: recipes/remix/app/entry.client.tsx
================================================
/**
 * By default, Remix will handle hydrating your app on the client for you.
 * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ✨
 * For more information, see https://remix.run/file-conventions/entry.client
 */

import { RemixBrowser } from "@remix-run/react";
import { startTransition, StrictMode } from "react";
import { hydrateRoot } from "react-dom/client";

startTransition(() => {
  hydrateRoot(
    document,
    <StrictMode>
      <RemixBrowser />
    </StrictMode>
  );
});



================================================
FILE: recipes/remix/app/entry.server.tsx
================================================
/**
 * By default, Remix will handle generating the HTTP Response for you.
 * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ✨
 * For more information, see https://remix.run/file-conventions/entry.server
 */

import { PassThrough } from "node:stream";

import type { AppLoadContext, EntryContext } from "@remix-run/node";
import { createReadableStreamFromReadable } from "@remix-run/node";
import { RemixServer } from "@remix-run/react";
import isbot from "isbot";
import { renderToPipeableStream } from "react-dom/server";

const ABORT_DELAY = 5_000;

export default function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
  loadContext: AppLoadContext
) {
  return isbot(request.headers.get("user-agent"))
    ? handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )
    : handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      );
}

function handleBotRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}



================================================
FILE: recipes/remix/app/puck.config.tsx
================================================
import type { Config } from "@measured/puck";

type Props = {
  HeadingBlock: { title: string };
};

export const config: Config<Props> = {
  components: {
    HeadingBlock: {
      fields: {
        title: { type: "text" },
      },
      defaultProps: {
        title: "Heading",
      },
      render: ({ title }) => (
        <div style={{ padding: 64 }}>
          <h1>{title}</h1>
        </div>
      ),
    },
  },
};

export default config;



================================================
FILE: recipes/remix/app/root.tsx
================================================
import { cssBundleHref } from "@remix-run/css-bundle";
import type { LinksFunction } from "@remix-run/node";
import {
  Links,
  LiveReload,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
} from "@remix-run/react";

import styles from "~/styles/shared.css";

export const links: LinksFunction = () => [
  ...(cssBundleHref ? [{ rel: "stylesheet", href: cssBundleHref }] : []),
  { rel: "stylesheet", href: styles },
];

export default function App() {
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  );
}



================================================
FILE: recipes/remix/app/models/page.server.ts
================================================
import { Data } from "@measured/puck";
import fs from "fs";

// Replace with call to your database
export const getPage = (path: string) => {
  const allData: Record<string, Data> | null = fs.existsSync("database.json")
    ? JSON.parse(fs.readFileSync("database.json", "utf-8"))
    : null;

  return allData ? allData[path] : null;
};

// Replace with call to your database
export const setPage = (path: string, data: Data) => {
  const existingData = JSON.parse(
    fs.existsSync("database.json")
      ? fs.readFileSync("database.json", "utf-8")
      : "{}"
  );

  const updatedData = {
    ...existingData,
    [path]: data,
  };

  fs.writeFileSync("database.json", JSON.stringify(updatedData));
};



================================================
FILE: recipes/remix/app/routes/$puckPath.tsx
================================================
export { default } from "./_index";
export * from "./_index";



================================================
FILE: recipes/remix/app/routes/$puckPath_.edit.tsx
================================================
export { default } from "./edit";
// I think a bug in remix means loader needs to be explicitly exported here
export { action, loader } from "./edit";
// For meta and links etc.
export * from "./edit";



================================================
FILE: recipes/remix/app/routes/_index.tsx
================================================
import { Render, type Config } from "@measured/puck";
import type { LoaderFunctionArgs, MetaFunction } from "@remix-run/node";
import { json } from "@remix-run/node";
import { useLoaderData } from "@remix-run/react";

import puckConfig from "~/puck.config";
import { getPage } from "~/models/page.server";

export const loader = async ({ params }: LoaderFunctionArgs) => {
  // Get path, and default to slash for root path.
  const puckPath = params.puckPath || "/";
  // Get puckData for this path, this could be a database call.
  const puckData = getPage(puckPath);
  if (!puckData) {
    throw new Response(null, {
      status: 404,
      statusText: "Not Found",
    });
  }
  // Return the data.
  return json({ puckData });
};

export const meta: MetaFunction<typeof loader> = ({ data }) => {
  const title = data?.puckData?.root?.props?.title || "Page";

  return [{ title }];
};

export default function Page() {
  const { puckData } = useLoaderData<typeof loader>();

  return <Render config={puckConfig as Config} data={puckData} />;
}



================================================
FILE: recipes/remix/app/routes/edit.tsx
================================================
import { Puck, type Data, type Config } from "@measured/puck";
import styles from "@measured/puck/puck.css";
import type {
  ActionFunctionArgs,
  LinksFunction,
  LoaderFunctionArgs,
  MetaFunction,
} from "@remix-run/node";
import { json } from "@remix-run/node";
import { useLoaderData, useSubmit } from "@remix-run/react";
import invariant from "tiny-invariant";

import puckConfig from "~/puck.config";
import { getPage, setPage } from "~/models/page.server";

export const action = async ({ params, request }: ActionFunctionArgs) => {
  const puckPath = params.puckPath || "/";
  const formData = await request.formData();
  const puckData = formData.get("puckData");

  invariant(puckData, "Missing data");
  invariant(typeof puckData === "string", "Invalid data");

  setPage(puckPath, JSON.parse(puckData));

  return json({ ok: true });
};

export const links: LinksFunction = () => [
  { rel: "stylesheet", href: styles, id: "puck-css" },
];

export const loader = async ({ params }: LoaderFunctionArgs) => {
  const puckPath = params.puckPath || "/";
  const initialData = getPage(puckPath) || {
    content: [],
    root: {},
  };
  return json({ puckPath, initialData });
};

export const meta: MetaFunction<typeof loader> = ({ data }) => {
  const title = data?.initialData?.root?.props?.title || "Untitled page";

  return [{ title: `Editing: ${title}` }];
};

export default function Edit() {
  const { initialData } = useLoaderData<typeof loader>();
  const submit = useSubmit();

  return (
    <Puck
      config={puckConfig as Config}
      data={initialData}
      onPublish={async (data: Data) => {
        // Use form data here because it's the usual remix way.
        let formData = new FormData();
        formData.append("puckData", JSON.stringify(data));
        submit(formData, { method: "post" });
      }}
    />
  );
}



================================================
FILE: recipes/remix/app/styles/shared.css
================================================
body {
  margin: 0;
}




================================================
FILE: scripts/create-changelog.js
================================================
const standardChangelog = require("standard-changelog");
const path = require("path");
const fs = require("fs");

const releasePattern = /^#\s(\[?(([0-9]|\.)+)\]?.*)((.|\n)*)/gm;

const transform = (body) =>
  body.replace(releasePattern, (_, header, _2, _3, content) => {
    return `## ${header}${content}`;
  });

const changelogPath = path.join(__dirname, "../CHANGELOG.md");
const changelog = fs.readFileSync(changelogPath, "utf8");

let changes = "";

const standardStream = standardChangelog();

standardStream.on(
  "data",
  (chunk) => (changes = `${changes}${chunk.toString()}`)
);

standardStream.on("end", () => {
  // Indent headers and add download section
  const transformed = transform(changes);

  // Inject into changelog
  const updatedChangelog = changelog.replace(
    "<!--__CHANGELOG_ENTRY__-->\n",
    `<!--__CHANGELOG_ENTRY__-->\n\n${transformed}`
  );

  fs.writeFileSync(changelogPath, updatedChangelog);
});



================================================
FILE: scripts/get-unstable-version.js
================================================
const { exec } = require("child_process");
const pkg = require("../package.json");

exec("git rev-parse --short HEAD", (_, stdout) => {
  console.log(`${pkg.version}-${process.argv[2] || "canary"}.${stdout}`);
  process.exit();
});



================================================
FILE: scripts/publish.sh
================================================
cd packages/core && npm publish --access public --tag $1
cd ../../

cd packages/field-contentful && npm publish --access public --tag $1
cd ../../

cd packages/plugin-emotion-cache && npm publish --access public --tag $1
cd ../../

cd packages/plugin-heading-analyzer && npm publish --access public --tag $1
cd ../../

cd packages/create-puck-app && npm run removeGitignore && npm publish --access public --tag $1 && npm run restoreGitignore
cd ../../



================================================
FILE: scripts/e2e/smoke-framework.mjs
================================================
import asciichart from "asciichart";
import { pause } from "./utils/pause.mjs";
import { setup } from "./utils/setup.mjs";

const CHART = false;
const CHART_HEIGHT = 15;
const DURATION = 60;
const THRESHOLD = 300;
const MB = 1024 * 1024;

const execute = async (test) => {
  const {
    duration = DURATION,
    threshold = THRESHOLD,
    chart = CHART,
    chartHeight = CHART_HEIGHT,
    puppeteerOptions,
  } = test;

  const { browser, page } = await setup(test.url, puppeteerOptions);

  if (chart) {
    console.log(
      "\x1b[36m%s\x1b[0m",
      ` ╭ ${test.label} (duration: ${duration}s, threshold: ${threshold} MB)`
    );
  }

  const timeout = duration * 1000;
  const memoryThreshold = threshold * MB;

  let memoryUsage;

  const memoryData = [50];

  const start = Date.now();

  const clearLines = (n) => {
    for (let i = 0; i < n; i++) {
      const y = i === 0 ? null : -1;
      process.stdout.moveCursor(0, y);
      process.stdout.clearLine(1);
    }
    process.stdout.cursorTo(0);
  };

  let plotted = false;
  let timeElapsedHuman = 0;
  let iterations = 0;

  const plot = () => {
    if (chart) {
      if (memoryData.length > 0) {
        if (plotted) {
          clearLines(chartHeight + 2);
        }

        process.stdout.write(
          ` │ ${asciichart
            .plot(memoryData, { height: chartHeight })
            .replace(/\n/gm, "\n │ ")}`
        );

        process.stdout.write(
          `\n ╰ ${(memoryUsage / MB).toFixed(
            2
          )} MB (${timeElapsedHuman}s, ${iterations} iterations) `
        );
      }
    } else {
      if (plotted) {
        clearLines(1);
      }

      process.stdout.write(
        ` ├ ${test.label}: ${(memoryUsage / MB).toFixed(
          2
        )} MB (${timeElapsedHuman}s, ${iterations} iterations) `
      );
    }

    plotted = true;
  };

  await pause(1000);

  let memoryExceeded = false;

  try {
    while (true) {
      iterations += 1;

      const timeElapsed = Date.now() - start;
      timeElapsedHuman = ((Date.now() - start) / 1000).toFixed(2);

      await test.run(page);

      memoryUsage = await page.evaluate(
        () => performance.memory.usedJSHeapSize
      );

      memoryData.push((memoryUsage / MB).toFixed(2));

      plot();

      if (memoryUsage > memoryThreshold) {
        memoryExceeded = true;

        console.error(
          `❌ Test failed. Memory usage exceeded ${threshold} MB threshold in ${timeElapsedHuman}s.`
        );

        break;
      }

      if (timeElapsed > timeout) {
        break;
      }
    }

    if (!memoryExceeded) {
      plot();

      console.log(`✅ Test successful.`);
    }
  } catch (err) {
    console.error("Error during smoke test:", err);
  } finally {
    await browser.close();
  }

  return {
    memoryUsage,
    memoryExceeded,
    timeElapsedHuman,
    memoryData,
    iterations,
  };
};

export const smoke = async (tests, config) => {
  console.log(`Beginning smoke tests...`);
  const results = [];

  for (let i = 0; i < tests.length; i++) {
    const test = tests[i];

    results.push({
      test,
      result: await execute({ ...config, ...test }),
    });
  }

  const numSucceeded = results.reduce(
    (acc, result) => (result.result.memoryExceeded ? acc : acc + 1),
    0
  );

  console.log(`${numSucceeded}/${results.length} tests passed`);

  if (numSucceeded < 0) {
    process.exit(1);
  }
};



================================================
FILE: scripts/e2e/smoke.mjs
================================================
import { smoke } from "./smoke-framework.mjs";
import { dragAndDrop } from "./utils/drag-and-drop.mjs";

const runs = {
  oneLevel: async (page) => {
    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Heading"]',
      '[data-testid="dropzone:root:default-zone"]'
    );
  },
  twoLevels: async (page) => {
    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Grid"]',
      '[data-testid="dropzone:root:default-zone"]',
      "top"
    );

    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Heading"]',
      '[data-testid="dropzone:root:default-zone"] [data-puck-dropzone]'
    );
  },
  threeLevels: async (page) => {
    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Grid"]',
      '[data-testid="dropzone:root:default-zone"]',
      "top"
    );

    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Grid"]',
      '[data-testid="dropzone:root:default-zone"] [data-puck-dropzone]'
    );

    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Heading"]',
      '[data-testid="dropzone:root:default-zone"] [data-puck-dropzone] [data-puck-dropzone]'
    );
  },
  sixLevels: async (page) => {
    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Grid"]',
      '[data-testid="dropzone:root:default-zone"]',
      "top"
    );

    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Grid"]',
      '[data-testid="dropzone:root:default-zone"] [data-puck-dropzone]'
    );

    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Grid"]',
      '[data-testid="dropzone:root:default-zone"] [data-puck-dropzone] [data-puck-dropzone]'
    );

    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Grid"]',
      '[data-testid="dropzone:root:default-zone"] [data-puck-dropzone] [data-puck-dropzone] [data-puck-dropzone]'
    );

    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Grid"]',
      '[data-testid="dropzone:root:default-zone"] [data-puck-dropzone] [data-puck-dropzone] [data-puck-dropzone] [data-puck-dropzone]'
    );

    await dragAndDrop(
      page,
      '[data-testid="drawer-item:Heading"]',
      '[data-testid="dropzone:root:default-zone"] [data-puck-dropzone] [data-puck-dropzone] [data-puck-dropzone] [data-puck-dropzone] [data-puck-dropzone]'
    );
  },
};

const tests = [
  {
    label: "iframe, 2 levels",
    url: "http://localhost:3000/test/edit?disableIframe=false",
    run: runs.twoLevels,
  },
  {
    label: "iframe, 6 levels",
    url: "http://localhost:3000/test/edit?disableIframe=false",
    run: runs.sixLevels,
  },
  {
    label: "no iframe, 2 levels",
    url: "http://localhost:3000/test/edit?disableIframe=true",
    run: runs.twoLevels,
  },
  {
    label: "no iframe, 6 levels",
    url: "http://localhost:3000/test/edit?disableIframe=true",
    run: runs.sixLevels,
  },
];

(async () => {
  await smoke(tests, {
    chart: true,
    duration: 180,
    threshold: 300,
    puppeteerOptions: { headless: true },
  });
})();



================================================
FILE: scripts/e2e/utils/drag-and-drop.mjs
================================================
import { getBox } from "./get-box.mjs";
import { pause } from "./pause.mjs";

const TIME_PREFIX = 0;

export async function dragAndDrop(
  page,
  sourceSelector,
  targetSelector,
  position
) {
  const sourceBox = await getBox(page, sourceSelector);
  const targetBox = await getBox(page, targetSelector);

  // Simulate drag and drop
  await page.mouse.move(
    sourceBox.x + sourceBox.width / 2,
    sourceBox.y + sourceBox.height / 2
  );
  await page.mouse.down(); // Simulate drag start

  await pause(TIME_PREFIX + 300);

  if (position === "top") {
    // Move to top
    await page.mouse.move(targetBox.x + targetBox.width / 2, targetBox.y - 4);

    await pause(TIME_PREFIX + 50);

    // Move to center
    await page.mouse.move(
      targetBox.x + targetBox.width / 2,
      targetBox.y + targetBox.height / 2
    );
    await pause(TIME_PREFIX + 50);

    // Move to top
    await page.mouse.move(targetBox.x + targetBox.width / 2, targetBox.y - 4);
  } else {
    await page.mouse.move(
      targetBox.x + targetBox.width / 2,
      targetBox.y + targetBox.height / 2
    );
  }

  await pause(TIME_PREFIX + 10);

  await page.mouse.up(); // Simulate drop

  await pause(TIME_PREFIX + 500);
}



================================================
FILE: scripts/e2e/utils/get-box.mjs
================================================
/**
 * Custom box function to get scaled bounding box across documents
 *
 * @param {*} page
 * @param {*} selector
 * @returns
 */
export const getBox = async (page, targetSelector) =>
  await page.evaluate((selector) => {
    function getFrameElement(el) {
      const refWindow = el?.ownerDocument.defaultView;

      if (refWindow && refWindow.self !== refWindow.parent) {
        return refWindow.frameElement;
      }

      return null;
    }

    function getFrameTransform(frameEl, boundary = window.frameElement) {
      const transform = {
        x: 0,
        y: 0,
        scaleX: 1,
        scaleY: 1,
      };

      while (frameEl) {
        if (frameEl === boundary) {
          return transform;
        }

        const rect = frameEl.getBoundingClientRect();
        const { x: scaleX, y: scaleY } = getScale(frameEl, rect);

        transform.x = transform.x + rect.left;
        transform.y = transform.y + rect.top;
        transform.scaleX = transform.scaleX * scaleX;
        transform.scaleY = transform.scaleY * scaleY;

        frameEl = getFrameElement(frameEl);
      }

      return transform;
    }

    function getScale(
      element,
      boundingRectangle = element.getBoundingClientRect()
    ) {
      const width = Math.round(boundingRectangle.width);
      const height = Math.round(boundingRectangle.height);

      return {
        x: width / element.offsetWidth,
        y: height / element.offsetHeight,
      };
    }

    const frameEl = document.querySelector("#preview-frame");
    const frame = frameEl ? frameEl?.contentDocument || null : null;

    const el = document.querySelector(selector);

    if (el) {
      const rect = el.getBoundingClientRect();

      return {
        x: rect.left,
        y: rect.top,
        width: rect.width,
        height: rect.height,
      };
    } else if (frame) {
      const el = frame.querySelector(selector);

      if (!el) return null;

      const rect = el.getBoundingClientRect();
      const frameRect = frameEl.getBoundingClientRect();
      const transform = getFrameTransform(frameEl);

      return {
        x: rect.left * transform.scaleX + frameRect.left,
        y: rect.top * transform.scaleY + frameRect.top,
        width: rect.width * transform.scaleX,
        height: rect.height * transform.scaleY,
      };
    }

    return null;
  }, targetSelector);



================================================
FILE: scripts/e2e/utils/pause.mjs
================================================
export const pause = (timeout) =>
  new Promise((resolve) => setTimeout(resolve, timeout));



================================================
FILE: scripts/e2e/utils/setup.mjs
================================================
import puppeteer from "puppeteer";

export const setup = async (
  url = "http://localhost:3000/test/edit?disableIframe=false",
  { headless = true, ...options } = {}
) => {
  const browser = await puppeteer.launch({ headless, ...options });
  const page = await browser.newPage();
  await page.setViewport({ width: 1200, height: 812 });
  await page.goto(url);

  return { browser, page };
};



================================================
FILE: .github/ISSUE_TEMPLATE/bug-report.md
================================================
---
name: "Bug Report 🐛"
about:
  Report a problem with Puck. Please provide enough information to reproduce
  the problem.
title: ""
labels: ["type: bug 🐛"]
assignees: ""
---

## Description

[Example: "The `<Puck />` component doesn't render correctly inside a CSS grid layout..."]

<!--
  Provide a clear and concise description of the bug.
  Don't assume we know anything about your repository or codebase.
  Keep it centered around Puck—avoid detailing your use case unless it directly helps explain the issue.
  Test the issue using the latest version of Puck to confirm it hasn't already been fixed.
-->

## Environment

- Puck version: [0.19.0, 1.0.0...]
- Browser version: [Chrome 135 (desktop), Firefox 133 (mobile)...]
- Additional environment info: [bundler, OS, device type...]

<!--
  Detail the environment where the bug is occurring.
-->

## Steps to reproduce

1. Render the `<Puck />` component in a grid layout...

```tsx
const Editor = () => {
  return (
    <div style={{ display: "grid" }}>
      <Puck config={config} data={data} />
    </div>
  );
};
```

2. Run the application in development mode...

<!--
  Provide clear steps with code examples so that we can reproduce the bug.
  Avoid including dependencies other than Puck.
  Issues without reproduction steps or code examples may be closed as not actionable.
  For help on providing minimal, reproducible examples: https://stackoverflow.com/help/mcve
-->

## What happens

[Example: "A white screen appears and the editor doesn't load..."]

<!--
  State what is the result of the steps above.
  Keep the explanation short and clear.
-->

## What I expect to happen

[Example: "The Puck component should render correctly in any CSS layout..."]

<!--
  State what was the result you expected from the steps above.
  Keep the explanation short and clear.
-->

## Additional Media

<!--
  Include any screenshots, videos, or other relevant media that may help
  visualize the issue or demonstrate the behavior.
-->



================================================
FILE: .github/ISSUE_TEMPLATE/config.yml
================================================
blank_issues_enabled: false
contact_links:
    - name: Guidance - Discord 👾
      url: https://discord.gg/V9mDAhuxyZ
      about: This issue tracker is not for guidance. Please refer to the Discord server for live help and general guidance.
    - name: Questions and Help - Github Discussions 💬
      url: https://github.com/measuredco/puck/discussions
      about: This issue tracker is not for support questions. Please open a discussion for that.


================================================
FILE: .github/ISSUE_TEMPLATE/feature_request.md
================================================
---
name: "Feature Request ✨"
about: "Share ideas for new features."
title: ""
labels: ["type: feature"]
assignees: ""
---

## Description

[Example: "Currently, the `text` field doesn’t support validation for maximum and minimum lengths. However, in many cases, you need to limit user input to specific constraints..."]

<!--
  Describe the expected outcome and why you want that outcome.
  Don’t provide implementation details, save that for the 'Proposals' section.
  Assume the person reading this has zero context about your problem or use case.
-->

## Considerations

- This might be related to field validation, which is currently being tracked in issue: #1...
- The file implementing the `text` field lives at `core/text.tsx`...

<!--
  List any special considerations for this feature that might help or make the changes more difficult.
  List any other issues that might be related or affected by this feature.
-->

## Proposals

### Proposal 1

[Example: "Introduce `min` and `max` props for the field configuration object and the `<AutoField />` component..."]

<!--
  Add a high-level description of how you'd like to see the feature implemented.
  Include code examples if appropriate.
  Discuss the pros and cons of the approach where necessary.
-->



================================================
FILE: .github/workflows/ci.yml
================================================
# This workflow will run all checks required for a PR to be merged.

name: Build and Test ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2.0.0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Check Yarn Version
        run: yarn --version

      - name: Install dependencies
        run: yarn

      - name: Run tests
        run: yarn test

      - name: Check linting and formatting
        run: |
          if yarn lint && yarn format:check; then
            echo "Linting and formatting checks passed."
          else
            echo "Linting or formatting checks failed. Please fix the issues."
            exit 1
          fi

      - name: Build everything
        run: |
          yarn build

      - name: Check for build failures
        run: |
          if [ $? -ne 0 ]; then
            echo "Build failed. Please fix the issues."
            exit 1
          fi



================================================
FILE: .github/workflows/publish-canary.yml
================================================
name: Publish canary release
on:
  push:
    branches:
      - "main"
      - "releases/**"

jobs:
  tag-and-publish-to-npm:
    runs-on: ubuntu-latest

    # Don't run on regular releases
    if: "!startsWith(github.event.head_commit.message, 'release: ')"
    steps:
      - uses: actions/checkout@v4.0.0
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: yarn

      - name: Run release script
        run: yarn release:canary

      - name: Publish all packages
        run: ./scripts/publish.sh canary
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    timeout-minutes: 10



================================================
FILE: .github/workflows/publish.yml
================================================
name: Publish release
on:
  push:
    branches:
      - "releases/**"
permissions:
  contents: write
jobs:
  tag-and-publish-to-npm:
    runs-on: ubuntu-latest
    if: "startsWith(github.event.head_commit.message, 'release: ')"
    steps:
      - uses: actions/checkout@v2.0.0
      - name: Extract version
        shell: bash
        run: echo "TAG_NAME=$(git log -1 --oneline --pretty=%B | sed 's/release:\ //g')" >> $GITHUB_ENV
      - name: Tag commit
        uses: tvdias/github-tagger@v0.0.1
        with:
          repo-token: "${{ secrets.GH_TOKEN }}"
          tag: ${{ env.TAG_NAME }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org"

      - name: Install dependencies
        run: yarn

      - name: Publish all packages
        run: ./scripts/publish.sh latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Trigger a new build to ensure Vercel creates a distinct release branch, rather than reusing latest
      - name: Triggering new build
        run: |
          git config --global user.name 'chrisvxd'
          git config --global user.email 'chrisvxd@users.noreply.github.com'
          git commit -m "ci: trigger build" --allow-empty
          git push

    timeout-minutes: 10


